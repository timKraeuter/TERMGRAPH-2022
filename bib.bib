
@article{abou-salehCoalgebraicAspectsBidirectional2017,
  title = {Coalgebraic {{Aspects}} of {{Bidirectional Computation}}.},
  author = {{Abou-Saleh}, Faris and McKinna, James and Gibbons, Jeremy},
  year = {2017},
  journal = {The Journal of Object Technology},
  volume = {16},
  number = {1},
  pages = {1:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2017.16.1.a1},
  abstract = {We have previously shown that several state-based bx formalisms can be captured using monadic functional programming, using the state monad together with possibly other monadic effects, giving rise to structures we have called monadic bx (mbx). In this paper, we develop a coalgebraic theory of state-based bx, and relate the resulting coalgebraic structures (cbx) to mbx. We show that cbx support a notion of composition coherent with, but conceptually simpler than, our previous mbx definition. Coalgebraic bisimulation yields a natural notion of behavioural equivalence on cbx, which respects composition, and essentially includes symmetric lens equivalence as a special case. Finally, we speculate on the applications of this coalgebraic perspective to other bx constructions and formalisms.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7CPT9NNC\\Abou-Saleh et al. - 2017 - Coalgebraic Aspects of Bidirectional Computation..pdf;C\:\\Users\\Tim\\Zotero\\storage\\UD5XTW88\\cbx-jot-long.pdf}
}

@book{acetoReactiveSystemsModelling2007,
  title = {Reactive {{Systems}}: {{Modelling}}, {{Specification}} and {{Verification}}},
  shorttitle = {Reactive {{Systems}}},
  author = {Aceto, Luca and Ingolfsdottir, Anna and Larsen, Kim Guldstrand and Srba, Jiri},
  year = {2007},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511814105},
  isbn = {978-0-511-81410-5},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\79ZIBQCS\\Aceto et al. - 2007 - Reactive Systems Modelling, Specification and Ver.pdf}
}

@article{aguilarModelCheckingBPMN,
  title = {Model {{Checking}} of {{BPMN Models}} for {{Reconfigurable Workflows}}},
  author = {Aguilar, Juan Carlos Polanco and Hasebe, Koji and Mazzara, Manuel and Kato, Kazuhiko},
  pages = {3},
  abstract = {Nowadays, business enterprises often need to dynamically reconfigure their internal processes in order to improve the efficiency of the business flow. However, modifications of the workflow usually lead to several problems in terms of deadlock freedom, completeness and security. A solid solution to these problems consists in the application of model checking techniques in order to verify if specific properties of the workflow are preserved by the change in configuration. Our goal in this work is to develop a formal verification procedure to deal with these problems. The first step consists in developing a formal definition of a BPMN model of a business workflow. Then, a given BPMN model is translated into a formal model specified in Promela. Finally, by using the SPIN model checker, the correctness of the reconfigured workflow is verified.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QR4G4DGY\\Aguilar et al. - Model Checking of BPMN Models for Reconfigurable W.pdf}
}

@phdthesis{alanaziConsistencyCheckingMultiple2008,
  title = {Consistency {{Checking}} in {{Multiple UML State Diagrams Using Super State Analysis}}},
  author = {Alanazi, Mohammad N},
  year = {2008},
  langid = {english},
  school = {Kansas State University},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KSHMTSM6\\Alanazi - 2008 - Consistency Checking in Multiple UML State Diagram.pdf}
}

@inproceedings{alanaziSuperStateAnalysis2009,
  title = {Super {{State Analysis}} for {{UML State Diagrams}}},
  booktitle = {2009 {{WRI World Congress}} on {{Computer Science}} and {{Information Engineering}}},
  author = {Alanazi, Mohammad N. and Gustafson, David A.},
  year = {2009},
  pages = {560--565},
  publisher = {{IEEE}},
  address = {{Los Angeles, California USA}},
  doi = {10.1109/CSIE.2009.943},
  abstract = {In this paper, we present Super State Analysis (SSA) for analyzing multiple UML state and sequence diagrams to detect inconsistencies. The SSA model uses a transition set that captures relationship information that is not specifiable in UML diagrams. The SSA model uses the transition set to link transitions of multiple state diagrams together. The analysis generates three different sets automatically. These generated sets are compared to the provided sets to detect inconsistencies. Because SSA considers multiple UML state diagrams, it discovers inconsistencies that cannot be discovered when considering only a single UML state diagram.},
  isbn = {978-0-7695-3507-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8A65JM2J\\Alanazi og Gustafson - 2009 - Super State Analysis for UML State Diagrams.pdf}
}

@article{allakiBuildingConsistentUML2017,
  title = {Building {{Consistent UML Models}} for {{Better Model Driven Engineering}}},
  author = {Allaki, Driss},
  year = {2017},
  volume = {15},
  number = {5},
  pages = {12},
  abstract = {The OMG (Object Management Group) has designed its own vision of the emerging software paradigm MDE (Model Driven Engineering) under the name of MDA (Model Driven Architecture). For this aim, OMG proposes a set of standardized rules and practices to promote good modeling and perfectly exploit models. To fully benefit from this approach, the UML models, to be used within MDA, should be consistent. In this paper, we point out that inconsistencies could be a serious problem that negatively affects the sustainability, the productivity and the consideration of execution platforms aimed by MDA. As a solution, we propose a constraint-based method that defines consistency rules expressed using EVL (Epsilon Validation Language) to automatically detect and fix the potential inconsistencies that could compromise the application of MDA through UML diagrams.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6P5D5DC4\\Allaki - 2017 - Building Consistent UML Models for Better Model Dr.pdf}
}

@article{allakiNEWTAXONOMYINCONSISTENCIES,
  title = {A {{NEW TAXONOMY OF INCONSISTENCIES IN UML MODELS WITH THEIR DETECTION METHODS FOR BETTER MDE}}},
  author = {Allaki, Driss and Dahchour, Mohamed and {En-Nouaary}, Abdeslam},
  pages = {18},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IWEBBSAL\\Allaki et al. - A NEW TAXONOMY OF INCONSISTENCIES IN UML MODELS WI.pdf}
}

@incollection{amaralRecentAdvancesMultiparadigm2010,
  title = {Recent {{Advances}} in {{Multi-paradigm Modeling}}},
  booktitle = {Models in {{Software Engineering}}},
  author = {Amaral, Vasco and Hardebolle, C{\'e}cile and Karsai, Gabor and Lengyel, L{\'a}szl{\'o} and Levendovszky, Tiham{\'e}r},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Ghosh, Sudipto},
  year = {2010},
  volume = {6002},
  pages = {220--224},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-12261-3_21},
  abstract = {Model transformations are key enablers for multi-paradigm modeling. However, currently there is little support for reusing transformations in different contexts since they are tightly coupled to the metamodels they are defined upon, and hence reusing them for other metamodels becomes challenging. Inspired from generic programming, we proposed generic model-to-model transformations, which are defined over so-called metamodel concepts, which are later bound to specific metamodels. Nevertheless, the current binding mechanism lacks automated resolution support for recurring structural heterogeneities between metamodels. Therefore, based on a systematic classification of heterogeneities, we propose a flexible binding mechanism being able to automatically resolve recurring structural heterogeneities between metamodels. For this, the binding model is analyzed and required adaptors are automatically added to the transformation.},
  isbn = {978-3-642-12260-6 978-3-642-12261-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RWLBRAHF\\Amaral et al. - 2010 - Recent Advances in Multi-paradigm Modeling.pdf}
}

@article{amraniMultiparadigmModellingCyber2021,
  title = {Multi-Paradigm Modelling for Cyber\textendash Physical Systems: A Descriptive Framework},
  shorttitle = {Multi-Paradigm Modelling for Cyber\textendash Physical Systems},
  author = {Amrani, Moussa and Blouin, Dominique and Heinrich, Robert and Rensink, Arend and Vangheluwe, Hans and Wortmann, Andreas},
  year = {2021},
  month = jun,
  journal = {Software and Systems Modeling},
  volume = {20},
  number = {3},
  pages = {611--639},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-021-00876-z},
  abstract = {The complexity of cyber\textendash physical systems (CPSs) is commonly addressed through complex workflows, involving models in a plethora of different formalisms, each with their own methods, techniques, and tools. Some workflow patterns, combined with particular types of formalisms and operations on models in these formalisms, are used successfully in engineering practice. To identify and reuse them, we refer to these combinations of workflow and formalism patterns as modelling paradigms. This paper proposes a unifying (Descriptive) Framework to describe these paradigms, as well as their combinations. This work is set in the context of Multi-Paradigm Modelling (MPM), which is based on the principle to model every part and aspect of a system explicitly, at the most appropriate level(s) of abstraction, using the most appropriate modelling formalism(s) and workflows. The purpose of the Descriptive Framework presented in this paper is to serve as a basis to reason about these formalisms, workflows, and their combinations. One crucial part of the framework is the ability to capture the structural essence of a paradigm through the concept of a paradigmatic structure. This is illustrated informally by means of two example paradigms commonly used in CPS: Discrete Event Dynamic Systems and Synchronous Data Flow. The presented framework also identifies the need to establish whether a paradigm candidate follows, or qualifies as, a (given) paradigm. To illustrate the ability of the framework to support combining paradigms, the paper shows examples of both workflow and formalism combinations. The presented framework is intended as a basis for characterisation and classification of paradigms, as a starting point for a rigorous formalisation of the framework (allowing formal analyses), and as a foundation for MPM tool development.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q9IJ2FXE\\Amrani et al. - 2021 - Multi-paradigm modelling for cyber–physical system.pdf}
}

@article{anjorinBenchmarkingBidirectionalTransformations2020,
  title = {Benchmarking Bidirectional Transformations: Theory, Implementation, Application, and Assessment},
  shorttitle = {Benchmarking Bidirectional Transformations},
  author = {Anjorin, Anthony and Buchmann, Thomas and Westfechtel, Bernhard and Diskin, Zinovy and Ko, Hsiang-Shang and Eramo, Romina and Hinkel, Georg and {Samimi-Dehkordi}, Leila and Z{\"u}ndorf, Albert},
  year = {2020},
  month = may,
  journal = {Software and Systems Modeling},
  volume = {19},
  number = {3},
  pages = {647--691},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-019-00752-x},
  abstract = {Bidirectional transformations (bx) are relevant for a wide range of application domains. While bx problems may be solved with unidirectional languages and tools, maintaining separate implementations of forward and backward synchronizers with mutually consistent behavior can be difficult, laborious, and error-prone. To address the challenges involved in handling bx problems, dedicated languages and tools for bx have been developed. Due to their heterogeneity, however, the numerous and diverse approaches to bx are difficult to compare, with the consequence that fundamental differences and similarities are not yet well understood. This motivates the need for suitable benchmarks that facilitate the comparison of bx approaches. This paper provides a comprehensive treatment of benchmarking bx, covering theory, implementation, application, and assessment. At the level of theory, we introduce a conceptual framework that defines and classifies architectures of bx tools. At the level of implementation, we describe Benchmarx, an infrastructure for benchmarking bx tools which is based on the conceptual framework. At the level of application, we report on a wide variety of solutions to the well-known Families-to-Persons benchmark, which were developed and compared with the help of Benchmarx. At the level of assessment, we reflect on the usefulness of the Benchmarx approach to benchmarking bx, based on the experiences gained from the Families-to-Persons benchmark.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\49S2PZAY\\Anjorin et al. - 2020 - Benchmarking bidirectional transformations theory.pdf}
}

@inproceedings{anjorinBenchmarXReloadedPractical2017,
  title = {{{BenchmarX}} Reloaded: {{A}} Practical Benchmark Framework for Bidirectional Transformations},
  booktitle = {{{BX}}@{{ETAPS}}},
  author = {Anjorin, Anthony and Diskin, Zinovy and Jouault, Fr{\'e}d{\'e}ric and Ko, Hsiang-Shang and Leblebici, Erhan and Westfechtel, Bernhard},
  year = {2017},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\I4B34VLS\\Anjorin et al. - Benchmarx Reloaded A Practical Benchmark Framewor.pdf}
}

@article{arbabAbstractBehaviorTypes2005,
  title = {Abstract {{Behavior Types}}: A Foundation Model for Components and Their Composition},
  shorttitle = {Abstract {{Behavior Types}}},
  author = {Arbab, Farhad},
  year = {2005},
  month = mar,
  journal = {Science of Computer Programming},
  volume = {55},
  number = {1-3},
  pages = {3--52},
  issn = {01676423},
  doi = {10.1016/j.scico.2004.05.010},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7MI2GQM5\\Arbab - 2005 - Abstract Behavior Types a foundation model for co.pdf}
}

@incollection{arbabIWIMModelCoordination1996,
  title = {The {{IWIM}} Model for Coordination of Concurrent Activities},
  booktitle = {Coordination {{Languages}} and {{Models}}},
  author = {Arbab, Farhad},
  editor = {Goos, Gerhard and Hartmanis, Juris and Leeuwen, Jan and Ciancarini, Paolo and Hankin, Chris},
  year = {1996},
  volume = {1061},
  pages = {34--56},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-61052-9_38},
  isbn = {978-3-540-61052-6 978-3-540-49936-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DX4B6D95\\Arbab - 1996 - The IWIM model for coordination of concurrent acti.pdf}
}

@article{arbabWhatYouMean2001,
  title = {What Do You Mean, Coordination?},
  author = {Arbab, Farhad},
  year = {2001},
  month = feb,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BJNM4CX3\\Arbab et al. - What Do You Mean, Coordination.pdf}
}

@misc{ArtifactsICSME2022,
  title = {Artifacts - {{ICSME-2022}}},
  journal = {GitHub},
  abstract = {Contribute to timKraeuter/ICSME-2022 development by creating an account on GitHub.},
  howpublished = {https://github.com/timKraeuter/ICSME-2022},
  langid = {english}
}

@article{autiliGraphicalScenariosSpecifying2007,
  title = {Graphical Scenarios for Specifying Temporal Properties: An Automated Approach},
  shorttitle = {Graphical Scenarios for Specifying Temporal Properties},
  author = {Autili, M. and Inverardi, P. and Pelliccione, P.},
  year = {2007},
  month = sep,
  journal = {Automated Software Engineering},
  volume = {14},
  number = {3},
  pages = {293--340},
  issn = {0928-8910, 1573-7535},
  doi = {10.1007/s10515-007-0012-6},
  abstract = {Temporal logics are commonly used for reasoning about concurrent systems. Model checkers and other finite-state verification techniques allow for automated checking of system model compliance to given temporal properties. These properties are typically specified as linear-time formulae in temporal logics. Unfortunately, the level of inherent sophistication required by these formalisms too often represents an impediment to move these techniques from ``research theory'' to ``industry practice''. The objective of this work is to facilitate the nontrivial and error prone task of specifying, correctly and without expertise in temporal logic, temporal properties.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SCNX2QUB\\Autili et al. - 2007 - Graphical scenarios for specifying temporal proper.pdf}
}

@article{awadidConsistencyRequirementsBusiness2019,
  title = {Consistency Requirements in Business Process Modeling: A Thorough Overview},
  shorttitle = {Consistency Requirements in Business Process Modeling},
  author = {Awadid, Afef and Nurcan, Selmin},
  year = {2019},
  month = apr,
  journal = {Software \& Systems Modeling},
  volume = {18},
  number = {2},
  pages = {1097--1115},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-017-0629-2},
  abstract = {The field of business process modeling has been beset by inter-model consistency problems which are mainly due to the existence of multiple variants of the same business process, for instance when models have been produced by different actors, or through the time by a same (or different) actor(s), as well as the possibility of its modeling from discrete and complementary perspectives (using different lenses). Accordingly, our overall aim in this paper is to provide a thorough overview of consistency requirements in business process modeling, which is strongly needed not only for the sake of a comprehensive investigation of this challenging subject, but also for the sake of empowering significant contributions to it. In order to do so, we opted for a systematic literature review of consistency among business process models as starting point and basis to attain the intended overview and to guide our contributions in this field.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\S3E66YAX\\Awadid og Nurcan - 2019 - Consistency requirements in business process model.pdf}
}

@incollection{azziVerigraphSystemGraph2018,
  title = {The Verigraph System for Graph Transformation},
  booktitle = {Graph Transformation, Specifications, and Nets: {{In}} Memory of Hartmut Ehrig},
  author = {Azzi, Guilherme Grochau and Bezerra, Jonas Santos and Ribeiro, Leila and Costa, Andrei and Rodrigues, Leonardo Marques and Machado, Rodrigo},
  editor = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2018},
  pages = {160--178},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-75396-6₉},
  abstract = {Graph transformation (GT) is a rule-based framework, suitable for modelling both static and dynamic aspects of complex systems in an intuitive yet formal manner. The algebraic approach to GT is based on category theory, allowing the instantiation of theoretical results to multiple graph-like structures (e.g. labelled or attributed graphs, Petri nets, even transformation rules themselves). There exists a rich theory of algebraic GT which underlies verification techniques such as static analysis. Current tools based on GT are implemented in a very concrete way, unlike the theory, making them hard to extend with novel theoretical results. Thus a new software system called Verigraph was created, with the goal of implementing the theory as closely as possible, while maintaining a reasonable execution time. In this paper we present the architecture of Verigraph, which enabled an almost direct implementation of the theory. We also provide a step-by-step guide to implementing a new graph model within the system, using second-order graph transformation as an example. Finally, we compare the performance of Verigraph and AGG.},
  isbn = {978-3-319-75396-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GA4ITMHA\\Azzi et al. - 2018 - The verigraph system for graph transformation.pdf}
}

@article{babaeiEfficientReorderingReplay2020,
  title = {Efficient {{Reordering}} and {{Replay}} of {{Execution Traces}} of {{Distributed Reactive Systems}} in the {{Context}} of {{Model-driven Development}}},
  author = {Babaei, Majid and Bagherzadeh, Mojtaba and Dingel, Juergen},
  year = {2020},
  pages = {12},
  abstract = {Ordering and replaying of execution traces of distributed systems is a challenging problem. State-of-the-art approaches annotate the traces with logical or physical timestamps. However, both kinds of timestamps have their drawbacks, including increased trace size. We examine the problem of determining consistent orderings of execution traces in the context of model-driven development of reactive distributed systems, that is, systems whose code has been generated from communicating state machine models. By leveraging key concepts of state machines and existing model analysis and transformation techniques, we propose an approach to collecting and reordering execution traces that does not rely on timestamps. We describe a prototype implementation of our approach and an evaluation. The experimental results show that compared to reordering based on logical timestamps using vector time (clocks), our approach reduces the size of the trace information collected by more than half while incurring similar runtime overhead.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UIE6L2PB\\Babaei et al. - 2020 - Efficient Reordering and Replay of Execution Trace.pdf}
}

@inbook{baeza-yatesVisualDebuggingAutomatic1996,
  title = {Visual {{Debugging}} and {{Automatic Animation}} of {{C Programs}}},
  booktitle = {Series on {{Software Engineering}} and {{Knowledge Engineering}}},
  author = {{Baeza-Yates}, R. A. and Quezada, G. and Valmadre, G.},
  year = {1996},
  month = nov,
  volume = {7},
  pages = {46--58},
  publisher = {{WORLD SCIENTIFIC}},
  doi = {10.1142/9789812797995_0003},
  abstract = {We present VCC, a system that allows the end-user to graphically visualize and animate a C program. We emphasize the di erences between our approach and previous works on the topic. This system can be seen as a preprocessor that automatically annotates a C program with animation code, and embeds it in a special graphical environment. The system is implemented in C++ and C, and uses the X-Windows environment, making it highly portable. It can be used for several purposes, including debugging, teaching, understanding, and exploring algorithms and static data structures.},
  collaborator = {Eades, P and Zhang, K},
  isbn = {978-981-02-2826-2 978-981-279-799-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XSQVMASU\\Baeza-Yates et al. - 1996 - VISUAL DEBUGGING AND AUTOMATIC ANIMATION OF C PROG.pdf}
}

@book{baierPrinciplesModelChecking2008,
  title = {Principles of Model Checking},
  author = {Baier, Christel and Katoen, Joost-Pieter},
  year = {2008},
  publisher = {{MIT Press}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/books/daglib/0020348.bib},
  isbn = {978-0-262-02649-9},
  timestamp = {Tue, 15 Feb 2011 11:22:37 +0100},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6BBWZ4SB\\Principles of Model Checking by Baier C., Katoen J. (z-lib.org).pdf}
}

@article{bakerNaturallyOccurringP16Ink4apositive2016,
  title = {Naturally Occurring {{p16Ink4a-positive}} Cells Shorten Healthy Lifespan},
  author = {Baker, Darren J. and Childs, Bennett G. and Durik, Matej and Wijers, Melinde E. and Sieben, Cynthia J. and Zhong, Jian and A. Saltness, Rachel and Jeganathan, Karthik B. and Verzosa, Grace Casaclang and Pezeshki, Abdulmohammad and Khazaie, Khashayarsha and Miller, Jordan D. and {van Deursen}, Jan M.},
  year = {2016},
  month = feb,
  journal = {Nature},
  volume = {530},
  number = {7589},
  pages = {184--189},
  publisher = {{Nature Publishing Group}},
  issn = {1476-4687},
  doi = {10.1038/nature16932},
  abstract = {Cellular senescence, a stress-induced irreversible growth arrest often characterized by expression of p16Ink4a (encoded by the Ink4a/Arf locus, also known as Cdkn2a) and a distinctive secretory phenotype, prevents the proliferation of preneoplastic cells and has beneficial roles in tissue remodelling during embryogenesis and wound healing. Senescent cells accumulate in various tissues and organs over time, and have been speculated to have a role in ageing. To explore the physiological relevance and consequences of naturally occurring senescent cells, here we use a previously established transgene, INK-ATTAC, to induce apoptosis in p16Ink4a-expressing cells of wild-type mice by injection of AP20187 twice a week starting at one year of age. We show that compared to vehicle alone, AP20187 treatment extended median lifespan in both male and female mice of two distinct genetic backgrounds. The clearance of p16Ink4a-positive cells delayed tumorigenesis and attenuated age-related deterioration of several organs without apparent side effects, including kidney, heart and fat, where clearance preserved the functionality of glomeruli, cardio-protective KATP channels and adipocytes, respectively. Thus, p16Ink4a-positive cells that accumulate during adulthood negatively influence lifespan and promote age-dependent changes in several organs, and their therapeutic removal may be an attractive approach to extend healthy lifespan. When senescent cells accumulate during adulthood they negatively influence lifespan and promote age-dependent changes in several organs; clearance of these cells delayed tumorigenesis in mice and attenuated age-related deterioration of several organs without overt side effects, suggesting that the therapeutic removal of senescent cells may be able to extend healthy lifespan. Various tissues and organs accumulate senescent cells during normal ageing, but it is not known whether \textemdash{} or how \textemdash{} these cells influence health and lifespan. Jan van Deursen and colleagues show that when senescent cells accumulate during adulthood they are a negative influence on lifespan and promote age-dependent changes in multiple organs. Clearance of these cells delayed tumorigenesis and attenuated age-related deterioration of several organs without overt side effects. This finding suggests that therapeutic removal of senescent cells may be able to extend healthy lifespan.},
  copyright = {2016 Nature Publishing Group, a division of Macmillan Publishers Limited. All Rights Reserved.},
  langid = {english},
  keywords = {Ageing,Senescence},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9QQ6S4K8\\Baker et al. - 2016 - Naturally occurring p16Ink4a-positive cells shorte.pdf}
}

@article{balarinMetropolisIntegratedElectronic2003,
  title = {Metropolis: An Integrated Electronic System Design Environment},
  shorttitle = {Metropolis},
  author = {Balarin, F. and Watanabe, Y. and Hsieh, H. and Lavagno, L. and Passerone, C. and {Sangiovanni-Vincentelli}, A.},
  year = {2003},
  month = apr,
  journal = {Computer},
  volume = {36},
  number = {4},
  pages = {45--52},
  issn = {0018-9162},
  doi = {10.1109/MC.2003.1193228},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\76DXA257\\Balarin et al. - 2003 - Metropolis an integrated electronic system design.pdf}
}

@incollection{baldanConcurrentSemanticsAlgebraic1999,
  title = {Concurrent Semantics of Algebraic Graph Transformations},
  booktitle = {Handbook of {{Graph Grammars}} and {{Computing}} by {{Graph Transformation}}},
  author = {Baldan, Paolo and Corradini, Andrea and Montanari, Ugo and Rossi, Francesca and Ehrig, Hartmut and L{\"o}we, Michael},
  year = {1999},
  month = aug,
  volume = {3},
  pages = {107--188},
  publisher = {{World Scientific}},
  doi = {10.1142/9789812814951_0003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\D27LFNSJ\\Baldan et al. - 1999 - Concurrent semantics of algebraic graph transforma.pdf}
}

@inproceedings{bar-sinaiBPjsExtensibleOpen2018,
  title = {{{BPjs}}: An Extensible, Open Infrastructure for Behavioral Programming Research},
  shorttitle = {{{BPjs}}},
  booktitle = {Proceedings of the 21st {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {{Bar-Sinai}, Michael and Weiss, Gera and Shmuel, Reut},
  year = {2018},
  month = oct,
  pages = {59--60},
  publisher = {{ACM}},
  address = {{Copenhagen Denmark}},
  doi = {10.1145/3270112.3270126},
  abstract = {We present unified and extensible semantics for Behavioral Programming (BP). The presented semantics support a direct embedding of executable models in regular software systems. We further present BPjs \textemdash{} a tool-set for executing, embedding, and verifying behavioral models, based on the proposed semantics. Being extensible, embeddable, and supporting verification, BPjs can serve as a common infrastructure for BP and executable modeling research.},
  isbn = {978-1-4503-5965-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AFTYDERX\\Bar-Sinai et al. - 2018 - BPjs an extensible, open infrastructure for behav.pdf}
}

@article{bar-sinaiBPjsFrameworkModeling2018,
  title = {{{BPjs}} --- a Framework for Modeling Reactive Systems Using a Scripting Language and {{BP}}},
  author = {{Bar-Sinai}, Michael and Weiss, Gera and Shmuel, Reut},
  year = {2018},
  month = jun,
  journal = {arXiv:1806.00842 [cs]},
  eprint = {1806.00842},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {We describe some progress towards a new common framework for model driven engineering, based on behavioral programming. The tool we have developed unifies almost all of the work done in behavioral programming so far, under a common set of interfaces. Its architecture supports pluggable event selection strategies, which can make models more intuitive and compact. Program state space can be traversed using various algorithms, such as DFS and A*. Furthermore, program state is represented in a way that enables scanning a state space using parallel and distributed algorithms. Executable models created with this tool can be directly embedded in Java applications, enabling a model-first approach to system engineering, where initially a model is created and verified, and then a working application is gradually built around the model. The model itself consists of a collection of small scripts written in JavaScript (hence ``BPjs''). Using a variety of case-studies, this paper shows how the combination of a lenient programming language with formal model analysis tools creates an efficient way of developing robust complex systems. Additionally, as we learned from an experimental course we ran, the usage of JavaScript make practitioners more amenable to using this system and, thus, model checking and model driven engineering. In addition to providing infrastructure for development and case-studies in behavioral programming, the tool is designed to serve as a common platform for research and innovation in behavioral programming and in model driven engineering in general.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Formal Languages and Automata Theory,Computer Science - Programming Languages,Computer Science - Software Engineering},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TKR3VCCG\\Bar-Sinai et al. - 2018 - BPjs --- a framework for modeling reactive systems.pdf}
}

@incollection{barbaneraChoreographyAutomata2020,
  title = {Choreography {{Automata}}},
  booktitle = {Coordination {{Models}} and {{Languages}}},
  author = {Barbanera, Franco and Lanese, Ivan and Tuosto, Emilio},
  editor = {Bliudze, Simon and Bocchi, Laura},
  year = {2020},
  volume = {12134},
  pages = {86--106},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-50029-0_6},
  abstract = {Automata models are well-established in many areas of computer science and are supported by a wealth of theoretical results including a wide range of algorithms and techniques to specify and analyse systems. We introduce choreography automata for the choreographic modelling of communicating systems. The projection of a choreography automaton yields a system of communicating finite-state machines. We consider both the standard asynchronous semantics of communicating systems and a synchronous variant of it. For both, the projections of well-formed automata are proved to be live as well as lock- and deadlockfree.},
  isbn = {978-3-030-50028-3 978-3-030-50029-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PTTN5JRS\\Barbanera et al. - 2020 - Choreography Automata.pdf}
}

@inproceedings{barbosaUMLModelRefactoring2008,
  title = {{{UML Model Refactoring}} as {{Refinement}}: {{A Coalgebraic Perspective}}},
  shorttitle = {{{UML Model Refactoring}} as {{Refinement}}},
  booktitle = {2008 10th {{International Symposium}} on {{Symbolic}} and {{Numeric Algorithms}} for {{Scientific Computing}}},
  author = {Barbosa, Luis Soares and Meng, Sun},
  year = {2008},
  pages = {340--347},
  publisher = {{IEEE}},
  address = {{Timisoara, Romania}},
  doi = {10.1109/SYNASC.2008.88},
  abstract = {Although increasingly popular, Model Driven Architecture (MDA) still lacks suitable formal foundations on top of which rigorous methodologies for the description, analysis and transformation of models could be built. This paper aims to contribute in this direction: building on previous work by the authors on coalgebraic refinement for software components and architectures, it discusses refactoring of models within a coalgebraic semantic framework. Architectures are defined through aggregation based on a coalgebraic semantics for (subsets of) UML. On the other hand, such aggregations, no matter how large and complex they are, can always be dealt with as coalgebras themselves. This paves the way to a discipline of models' transformations which, being invariant under either behavioural equivalence or refinement, are able to formally capture a large number of refactoring patterns. The main ideas underlying this research are presented through a detailed example in the context of refactoring of UML class diagrams.},
  isbn = {978-0-7695-3523-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YDYM2MSP\\Barbosa und Meng - 2008 - UML Model Refactoring as Refinement A Coalgebraic.pdf}
}

@article{baresiEfficientSolutionModel2008,
  title = {An {{Efficient Solution}} for {{Model Checking Graph Transformation Systems}}},
  author = {Baresi, Luciano and Rafe, Vahid and Rahmani, Adel T. and Spoletini, Paola},
  year = {2008},
  month = may,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {213},
  number = {1},
  pages = {3--21},
  issn = {15710661},
  doi = {10.1016/j.entcs.2008.04.071},
  abstract = {This paper presents an efficient solution for modeling checking graph transformation systems. The approach transforms AGG specifications into Bogor models and supports both attributed typed graphs and layered transformations. Resulting models are amenable to check interesting properties expressed as combinations of LTL (Linear Temporal Logic) and graph transformation rules. The first experimental results are encouraging and show that in most cases our proposal improves existing approaches, both in terms of performance and expressiveness.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AVJPGE5X\\Baresi et al. - 2008 - An Efficient Solution for Model Checking Graph Tra.pdf}
}

@article{bashirUMLModelsConsistency2016,
  title = {{{UML}} Models Consistency Management: {{Guidelines}} for Software Quality Manager},
  author = {Bashir, Raja Sehrab},
  year = {2016},
  journal = {International Journal of Information Management},
  pages = {17},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8AYZ3U8A\\Bashir - 2016 - UML models consistency management Guidelines for .pdf}
}

@inproceedings{basuModelingHeterogeneousRealtime2006,
  title = {Modeling {{Heterogeneous Real-time Components}} in {{BIP}}},
  booktitle = {Fourth {{IEEE International Conference}} on {{Software Engineering}} and {{Formal Methods}} ({{SEFM}}'06)},
  author = {Basu, A. and Bozga, M. and Sifakis, J.},
  year = {2006},
  pages = {3--12},
  publisher = {{IEEE}},
  address = {{Pune, India}},
  doi = {10.1109/SEFM.2006.27},
  abstract = {We present a methodology for modeling heterogeneous real-time components. Components are obtained as the superposition of three layers : Behavior, specified as a set of transitions; Interactions between transitions of the behavior; Priorities, used to choose amongst possible interactions. A parameterized binary composition operator is used to compose components layer by layer.},
  isbn = {978-0-7695-2678-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\G4LZCI4H\\Basu et al. - 2006 - Modeling Heterogeneous Real-time Components in BIP.pdf}
}

@article{beckerVeriGraphToolModel,
  title = {{{VeriGraph}}: {{A Tool For Model Checking Graph Grammars}}},
  author = {Becker, Thiago Rafael},
  pages = {95},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y5BWZ5L5\\Becker - VeriGraph A Tool For Model Checking Graph Grammar.pdf}
}

@phdthesis{bednarczykCategoriesAsynchronousSystems1987,
  title = {Categories of Asynchronous Systems},
  author = {Bednarczyk, Marek A.},
  year = {1987},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EPAR7VV9\\Bednarczyk - Categories of Asynchronous Systems.pdf}
}

@article{bednarczykExpressingVerifyingTemporal2015,
  title = {Expressing and {{Verifying Temporal}} and {{Structural Properties}} of {{Mobile Agents}}},
  author = {Bednarczyk, Marek A and Jamroga, Wojciech and Paw{\l}owski, Wies{\l}aw},
  year = {2015},
  pages = {24},
  abstract = {The paper deals with logics for expressing temporal and structural properties of Petri hypernets, a visual formalism for modeling mobile agents. In particular, we consider how such logics can be build as a composition of two formalisms\textemdash one for expressing the temporal, another for expressing the structural properties of multiagent systems. The problem of model checking properties of a class of composed logics on Petri hypernets is shown to be PSPACE-complete.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BYEWBLCG\\Bednarczyk et al. - Expressing and Verifying Temporal and Structural P.pdf}
}

@article{bednarczykFiniteCompletenessCategories2000,
  title = {Finite {{Completeness}} of {{Categories}} of {{Petri Nets}}},
  author = {Bednarczyk, Marek A. and Borzyszkowski, Andrzej M. and Somla, Rafa{\l}},
  year = {2000},
  journal = {Fundamenta Informaticae},
  volume = {43},
  number = {1-4},
  pages = {21--48},
  issn = {01692968},
  doi = {10.3233/FI-2000-43123402},
  abstract = {The problem of finite completeness of categories of Petri nets is studied. Since Petri nets have finite products, the problem reduces to the issue of the existence of equalizers. We show that the categories of Petri nets with general and Winskel morphisms do not admit equalizers, and hence are not finitely complete.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2A9FQ7UF\\Bednarczyk et al. - 2000 - Finite Completeness of Categories of Petri Nets.pdf}
}

@article{bednarczykModellingAnalysingSystems2008,
  title = {Modelling and {{Analysing Systems}} of {{Agents}} by {{Agent-aware Transition Systems}}},
  author = {Bednarczyk, Marek and Bernardinello, Luca and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  year = {2008},
  pages = {11},
  abstract = {We propose a method to specify, in a modular way, complex systems formed by interacting agents. The method is based on the notion of view, that is a partial representation of the system, reflecting one of its specific aspects. By composing the different views, we get the overall system, described as a special kind of transition system. By means of a suitable logical language, we can express interesting properties of the system; model-checking techniques can then be used to assess their validity. Views can be specified using different languages or notations, provided they can be translated in so-called agent aware transition systems. The method is explained with the help of a simple, but non trivial example.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GCSW679K\\Bednarczyk et al. - Modelling and Analysing Systems of Agents by Agent.pdf}
}

@incollection{bednarczykModellingMobilityPetri2005,
  title = {Modelling {{Mobility}} with {{Petri Hypernets}}},
  booktitle = {Recent {{Trends}} in {{Algebraic Development Techniques}}},
  author = {Bednarczyk, Marek A. and Bernardinello, Luca and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Fiadeiro, Jos{\'e} Luiz and Mosses, Peter D. and Orejas, Fernando},
  year = {2005},
  volume = {3423},
  pages = {28--44},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-31959-7_2},
  abstract = {Petri hypernets, a novel framework for modeling mobile agents based on nets-within-nets paradigm is presented. Hypernets employ a local and finitary character of interactions between agents, and provide means for a modular and hierarchical description. They are capable of modelling mobile agents tfrahat can dynamically change their hierarchy, and can communicate with each other and with the outside world by exchanging messages, i.e., other mobile agents.},
  isbn = {978-3-540-25327-3 978-3-540-31959-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7U3SN9U6\\Bednarczyk et al. - 2005 - Modelling Mobility with Petri Hypernets.pdf}
}

@incollection{bednarczykModularSystemDevelopment2003,
  title = {Modular {{System Development}} with {{Pullbacks}}},
  booktitle = {Applications and {{Theory}} of {{Petri Nets}} 2003},
  author = {Bednarczyk, Marek A. and Bernardinello, Luca and Caillaud, Beno{\^i}t and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and {van der Aalst}, Wil M. P. and Best, Eike},
  year = {2003},
  volume = {2679},
  pages = {140--160},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-44919-1_12},
  abstract = {Two, seemingly different modular techniques for concurrent system development are investigated from a categorical perspective. A novel approach is presented in which they turn out to be merely special instances of pullback, a general categorical limit construction. Interestingly, the approach is based on truly concurrent semantics of systems.},
  isbn = {978-3-540-40334-0 978-3-540-44919-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\C82CZM4L\\Bednarczyk et al. - 2003 - Modular System Development with Pullbacks.pdf}
}

@article{bednarczykMultifacetApproachDynamic2008,
  title = {A Multi-Facet Approach to Dynamic Agent Systems},
  author = {Bednarczyk, Marek A and Paw{\l}owski, Wies{\l}aw and Bernardinello, Luca and Pomello, Lucia and Borzyszkowski, Tomasz},
  year = {2008},
  pages = {15},
  abstract = {We are concerned with the problem of defining a complex, hybrid, agent based discrete system in a modular way. The modularity results from looking at the system from a number of different perspectives, each dealing with a specific aspect of the system. As a solution a synchronization operator is proposed which glues agent aware systems on shared agents and transitions. The construction turns out to be a categorical product. We also show that a logic to talk about the temporal and the structural properties of the product can be obtained by gluing suitable logical frameworks from the components.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GKX3HHZM\\Bednarczyk et al. - A multi-facet approach to dynamic agent systems.pdf}
}

@book{BeingScientistGuide2009,
  title = {On {{Being}} a {{Scientist}}: {{A Guide}} to {{Responsible Conduct}} in {{Research}}: {{Third Edition}}},
  shorttitle = {On {{Being}} a {{Scientist}}},
  year = {2009},
  month = mar,
  publisher = {{National Academies Press}},
  address = {{Washington, D.C.}},
  doi = {10.17226/12192},
  isbn = {978-0-309-11970-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\67HM5K3E\\2009 - On Being a Scientist A Guide to Responsible Condu.pdf}
}

@article{bencomoModelsRunTime2019,
  title = {Models@run.Time: A Guided Tour of the State of the Art and Research Challenges},
  shorttitle = {Models@run.Time},
  author = {Bencomo, Nelly and G{\"o}tz, Sebastian and Song, Hui},
  year = {2019},
  month = oct,
  journal = {Software \& Systems Modeling},
  volume = {18},
  number = {5},
  pages = {3049--3082},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00712-x},
  abstract = {More than a decade ago, the research topic models@run.time was coined. Since then, the research area has received increasing attention. Given the prolific results during these years, the current outcomes need to be sorted and classified. Furthermore, many gaps need to be categorised in order to further develop the research topic by experts of the research area but also newcomers. Accordingly, the paper discusses the principles and requirements of models@run.time and the state-of-the-art of the research line. To make the discussion more concrete, a taxonomy is defined and used to compare the main approaches and research outcomes in the area during the last decade and including ancestor research initiatives. We identified and classified 275 papers on models@run.time, which allowed us to identify the underlying research gaps and to elaborate on the corresponding research challenges. Finally, we also facilitate sustainability of the survey over time by offering tool support to add, correct and visualise data.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RGSU6Z7L\\Bencomo et al. - 2019 - Models@run.time a guided tour of the state of the.pdf}
}

@article{benelallamRaisingTimeAwareness,
  title = {Raising {{Time Awareness}} in {{Model-Driven Engineering}}},
  author = {Benelallam, Amine and Hartmann, Thomas and Mouline, Ludovic and Fouquet, Francois and Bourcier, Johann and Barais, Olivier and Traon, Yves Le},
  pages = {10},
  abstract = {The conviction that big data analytics is a key for the success of modern businesses is growing deeper, and the mobilisation of companies into adopting it becomes increasingly important. Big data integration projects enable companies to capture their relevant data, to efficiently store it, turn it into domain knowledge, and finally monetize it. In this context, historical data, also called temporal data, is becoming increasingly available and delivers means to analyse the history of applications, discover temporal patterns, and predict future trends. Despite the fact that most data that today's applications are dealing with is inherently temporal current approaches, methodologies, and environments for developing these applications don't provide sufficient support for handling time. We envision that Model-Driven Engineering (MDE) would be an appropriate ecosystem for a seamless and orthogonal integration of time into domain modelling and processing. In this paper, we investigate the state-of-the-art in MDE techniques and tools in order to identify the missing bricks for raising time-awareness in MDE and outline research directions in this emerging domain.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q5QEZE6E\\Benelallam et al. - Raising Time Awareness in Model-Driven Engineering.pdf}
}

@article{benniCharacterizingBlackboxComposition2020,
  title = {Characterizing {{Black-box Composition Operators}} via {{Generated Tailored Benchmarks}}.},
  author = {Benni, Benjamin and Mosser, S{\'e}bastien and Acherc, Mathieu and Paillart, Mathieu},
  year = {2020},
  journal = {The Journal of Object Technology},
  volume = {19},
  number = {2},
  pages = {7:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2020.19.2.a7},
  abstract = {The integration of a model composition operator into a system is a challenging task: the properties associated with such operators can drastically change how the developers will be able to use it. In this paper, we describe a modelling framework that allows a software developer, who is not an expert in model composition, to describe the interface of the operators she wants to use, and describe the properties she expects from them to fit her needs (e.g., idempotence, commutativity, associativity). This abstract description is used to pilot a property-based testing approach on generated code. We applied the approach to two case studies: feature model composition and Git merging.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MK4R65S3\\Benni et al. - 2020 - Characterizing Black-box Composition Operators via.pdf}
}

@inproceedings{benvenutiContractbasedFormalismSpecification2008,
  title = {A Contract-Based Formalism for the Specification of Heterogeneous Systems},
  booktitle = {2008 {{Forum}} on {{Specification}}, {{Verification}} and {{Design Languages}}},
  author = {Benvenuti, Luca and Ferrari, Alberto and Mangeruca, Leonardo and Mazzi, Emanuele and Passerone, Roberto and Sofronis, Christos},
  year = {2008},
  month = sep,
  pages = {142--147},
  publisher = {{IEEE}},
  address = {{Stuttgart}},
  doi = {10.1109/FDL.2008.4641436},
  abstract = {We present the mathematical formalism and the verification methodology of the contract-based model developed in the framework of the SPEEDS project. SPEEDS aims at developing methods and tools to support ``speculative design'', a design methodology in which distributed designers develop different aspects of the overall system, in a concurrent but controlled way. Our generic mathematical model of contract supports this style of development. This is achieved by focusing on behaviors, by supporting the notion of ``rich component'' where functional and non-functional aspects of the system can be considered and combined, by representing rich components via their set of associated contracts, and by formalizing the process of component composition.},
  isbn = {978-1-4244-2264-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E5L3E4K6\\Benvenuti et al. - 2008 - A contract-based formalism for the specification o.pdf}
}

@book{berardSystemsSoftwareVerification2001,
  title = {Systems and {{Software Verification}}},
  author = {B{\'e}rard, B{\'e}atrice and Bidoit, Michel and Finkel, Alain and Laroussinie, Fran{\c c}ois and Petit, Antoine and Petrucci, Laure and Schnoebelen, Philippe and McKenzie, Pierre},
  year = {2001},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-04558-9},
  isbn = {978-3-642-07478-3 978-3-662-04558-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L524FU9X\\Bérard et al. - 2001 - Systems and Software Verification.pdf}
}

@incollection{bezivinCanonicalSchemeModel2006,
  title = {A {{Canonical Scheme}} for {{Model Composition}}},
  booktitle = {Model {{Driven Architecture}} \textendash{} {{Foundations}} and {{Applications}}},
  author = {B{\'e}zivin, Jean and Bouzitouna, Salim and Del Fabro, Marcos Didonet and Gervais, Marie-Pierre and Jouault, Fr{\'e}deric and Kolovos, Dimitrios and Kurtev, Ivan and Paige, Richard F.},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Rensink, Arend and Warmer, Jos},
  year = {2006},
  volume = {4066},
  pages = {346--360},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11787044_26},
  abstract = {There is little agreement on terminology in model composition, and even less on key characteristics of a model composition solution. We present three composition frameworks: the Atlas Model Weaver, the Epsilon Merging Language, and the Glue Generator Tool, and from them derive a core set of common definitions. We use this to outline the key requirements of a model composition solution, in terms of language and tool support.},
  isbn = {978-3-540-35909-8 978-3-540-35910-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8QZUHKCP\\Bézivin et al. - 2006 - A Canonical Scheme for Model Composition.pdf}
}

@phdthesis{boronatMOMENTFormalFramework2007,
  title = {{{MOMENT}}: {{A Formal Framework}} for {{MOdel managemMENT}}},
  author = {Boronat, Artur},
  year = {2007},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CEBRKF7B\\Boronat - MOMENT A Formal Framework for MOdel managemMENT.pdf}
}

@incollection{boronatWhatMultimodelingLanguage2009,
  title = {What {{Is}} a {{Multi-modeling Language}}?},
  booktitle = {Recent {{Trends}} in {{Algebraic Development Techniques}}},
  author = {Boronat, Artur and Knapp, Alexander and Meseguer, Jos{\'e} and Wirsing, Martin},
  editor = {Corradini, Andrea and Montanari, Ugo},
  year = {2009},
  volume = {5486},
  pages = {71--87},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-03429-9_6},
  isbn = {978-3-642-03428-2 978-3-642-03429-9},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BYQL72Q7\\Boronat et al. - 2009 - What Is a Multi-modeling Language.pdf}
}

@inproceedings{boulangerSimulationMultiFormalismModels2008,
  title = {Simulation of {{Multi-Formalism Models}} with {{ModHel}}'{{X}}},
  booktitle = {2008 {{International Conference}} on {{Software Testing}}, {{Verification}}, and {{Validation}}},
  author = {Boulanger, Fr and Hardebolle, C},
  year = {2008},
  month = apr,
  pages = {318--327},
  publisher = {{IEEE}},
  address = {{Lillehammer, Norway}},
  doi = {10.1109/ICST.2008.15},
  abstract = {A step in the validation of a system is to check its behavior by simulation. Simulation is also used to validate the behavior of the model of the system against test patterns. For complex systems, models are made of parts which use different modeling formalisms. The main issues in the simulation of such systems are the specification of the semantics of each modeling formalism, and of the interactions between heterogeneous parts of a model. ModHel'X relies on component based modeling and models of computation to address these problems and focuses on the computation of one possible behavior of a model. This includes simulation and code generation. ModHel'X defines a MOF meta-model for describing the structural elements of a modeling language. The semantics of modeling languages is expressed in an imperative style and addresses three aspects: control, data and time. ModHel'X is supported by a simulator of multi-formalism models.},
  isbn = {978-0-7695-3127-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UHJMJWWS\\Boulanger og Hardebolle - 2008 - Simulation of Multi-Formalism Models with ModHel'X.pdf}
}

@inproceedings{bousseExecutionFrameworkGEMOC2016,
  title = {Execution Framework of the {{GEMOC}} Studio (Tool Demo)},
  booktitle = {Proceedings of the 2016 {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {Bousse, Erwan and Degueule, Thomas and Vojtisek, Didier and Mayerhofer, Tanja and Deantoni, Julien and Combemale, Benoit},
  year = {2016},
  month = oct,
  pages = {84--89},
  publisher = {{ACM}},
  address = {{Amsterdam Netherlands}},
  doi = {10.1145/2997364.2997384},
  abstract = {The development and evolution of an advanced modeling environment for a Domain-Specific Modeling Language (DSML) is a tedious task, which becomes recurrent with the increasing number of DSMLs involved in the development and management of complex software-intensive systems. Recent efforts in language workbenches result in advanced frameworks that automatically provide syntactic tooling such as advanced editors. However, defining the execution semantics of languages and their tooling remains mostly hand crafted. Similarly to editors that share code completion or syntax highlighting, the development of advanced debuggers, animators, and others execution analysis tools shares common facilities, which should be reused among various DSMLs. In this tool demonstration paper, we present the execution framework offered by the GEMOC studio, an Eclipse-based language and modeling workbench. The framework provides a generic interface to plug in different execution engines associated to their specific metalanguages used to define the discrete-event operational semantics of DSMLs. It also integrates generic runtime services that are shared among the approaches used to implement the execution semantics, such as graphical animation or omniscient debugging.},
  isbn = {978-1-4503-4447-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z6JHCFGZ\\Bousse et al. - 2016 - Execution framework of the GEMOC studio (tool demo.pdf}
}

@inproceedings{bozgaAutomatedValidationDistributed2001,
  title = {Automated Validation of Distributed Software Using the {{IF}} Environment},
  booktitle = {{{IEEE}} International Symposium on Network Computing and Applications ({{NCA}} 2001)},
  author = {Bozga, Marius and Graf, Susanne and Mounier, Laurent},
  year = {2001},
  month = oct,
  pages = {268--275},
  publisher = {{IEEE Computer Society}},
  address = {{Cambridge, MA, United States}},
  hal_id = {hal-00374652},
  hal_version = {v1},
  pdf = {https://hal.archives-ouvertes.fr/hal-00374652/file/nca2001.pdf},
  keywords = {IF,real-time distributed systems,validation environment,validation methodology},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\K9BZRRB5\\Bozga et al. - Automated validation of distributed software using.pdf}
}

@incollection{bozgaIF2ValidationEnvironment2002,
  title = {{{IF-2}}.0: {{A Validation Environment}} for {{Component-Based Real-Time Systems}}},
  shorttitle = {{{IF-2}}.0},
  booktitle = {Computer {{Aided Verification}}},
  author = {Bozga, Marius and Graf, Susanne and Mounier, Laurent},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Brinksma, Ed and Larsen, Kim Guldstrand},
  year = {2002},
  volume = {2404},
  pages = {343--348},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-45657-0_26},
  isbn = {978-3-540-43997-4 978-3-540-45657-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DXM4J2SE\\Bozga et al. - 2002 - IF-2.0 A Validation Environment for Component-Bas.pdf}
}

@article{braendshoeiConsistencyCheckingUML,
  title = {Consistency Checking {{UML}} Interactions and State Machines},
  author = {Braendshoei, Bjoern},
  pages = {148},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8PAABY9U\\Braendshoei - Consistency checking UML interactions and state ma.pdf}
}

@article{brambillaLTLFormalizationBPML2005,
  title = {{{LTL Formalization}} of {{BPML Semantics}} and {{Visual Notation}} for {{Linear Temporal Logic}}},
  author = {Brambilla, Marco},
  year = {2005},
  journal = {Technical Report},
  pages = {43},
  abstract = {As the Web becomes a platform for implementing complex B2C and B2B applications, the need arises of extending Web conceptual modeling from data-centric applications to data- and process-centric applications. New primitives must be put in place to implement workflows describing business processes. In this context, new problems about process safety and verification arise. We study Web sites interacting with users or applications. We provide a formal data-driven model of the application, which can access an underlying database, as well as state information updated as the interaction progresses, and a set of user input. Against this Web application definition, we aim at verifying properties concerning the sequences of events, inputs, states, and actions, resulting from the interaction. In particular, we focus on workflow based properties, describing the execution flow of the tasks within the application. Such properties are expressed in linear or branching-time temporal logics. Since temporal logics properties are difficult to describe by a user, this work presents a visual approach that exploits and extends workflow notations (in particular, BPMN) for describing the rules to be verified. Some results from the same research group involved in this work establish under what conditions automatic verification of such properties is possible and provide the complexity of verification.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\P3RHCFEV\\Brambilla - LTL Formalization of BPML Semantics and Visual Not.pdf}
}

@book{brambillaModeldrivenSoftwareEngineering2017,
  title = {Model-Driven Software Engineering in Practice},
  author = {Brambilla, Marco and Cabot, Jordi and Wimmer, Manuel},
  year = {2017},
  series = {Synthesis Lectures on Software Engineering},
  edition = {Second},
  number = {4},
  publisher = {{Morgan \& Claypool Publishers}},
  address = {{San Rafael, Calif.}},
  isbn = {978-1-62705-708-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3WIT7YB6\\Brambilla et al. - 2017 - Model-driven software engineering in practice.pdf}
}

@article{brandCommunicatingFiniteStateMachines1983,
  title = {On {{Communicating Finite-State Machines}}},
  author = {Brand, Daniel and Zafiropulo, Pitro},
  year = {1983},
  month = apr,
  journal = {Journal of the ACM},
  volume = {30},
  number = {2},
  pages = {323--342},
  issn = {0004-5411, 1557-735X},
  doi = {10.1145/322374.322380},
  abstract = {A model of commumcations protocols based on finite-state machines is investigated. The problem addressed is how to ensure certain generally desirable properties, which make protocols "wellformed," that is, specify a response to those and only those events that can actually occur. It is determined to what extent the problem is solvable, and one approach to solving it ts described.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KGUZXP26\\Brand og Zafiropulo - 1983 - On Communicating Finite-State Machines.pdf}
}

@incollection{broyDefinitionSystemModel2009,
  title = {Definition of the System Model},
  author = {Broy, Manfred and Cengarle, Mar{\'i}a and Gr{\"o}nniger, Hans and Rumpe, Bernhard},
  year = {2009},
  month = oct,
  pages = {61--93},
  doi = {10.1002/9780470522622.ch4},
  isbn = {978-0-470-52262-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E9RU34UA\\Lano - UML 2 SEMANTICS AND APPLICATIONS.pdf}
}

@book{broyPerspectivesSystemInformatics2003,
  title = {Perspectives of System Informatics: 5th {{International Andrei Ershov Memorial Conference}}, {{PSI}} 2003, {{Akademgorodok}}, {{Novosibirsk}}, {{Russia}}, {{July}} 9-12, 2003 ; Revised Papers},
  shorttitle = {Perspectives of System Informatics},
  editor = {Broy, M. and Zamulin, A. V.},
  year = {2003},
  series = {Lecture Notes in Computer Science},
  number = {2890},
  publisher = {{Springer}},
  address = {{Berlin ; New York}},
  isbn = {978-3-540-20813-6},
  langid = {english},
  lccn = {QA75.5 .I5443 2003},
  keywords = {ocl,temporal logic},
  annotation = {OCLC: ocm54081486},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LCA95H9J\\Broy und Zamulin - 2003 - Perspectives of system informatics 5th Internatio.pdf}
}

@incollection{bruelModelTransformationReuse2018,
  title = {Model {{Transformation Reuse Across Metamodels}}},
  booktitle = {Theory and {{Practice}} of {{Model Transformation}}},
  author = {Bruel, Jean-Michel and Combemale, Benoit and Guerra, Esther and J{\'e}z{\'e}quel, Jean-Marc and Kienzle, J{\"o}rg and {de Lara}, Juan and Mussbacher, Gunter and Syriani, Eugene and Vangheluwe, Hans},
  editor = {Rensink, Arend and S{\'a}nchez Cuadrado, Jes{\'u}s},
  year = {2018},
  volume = {10888},
  pages = {92--109},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-93317-7_4},
  abstract = {Model transformations (MTs) are essential elements of model-driven engineering (MDE) solutions. MDE promotes the creation of domain-specific metamodels, but without proper reuse mechanisms, MTs need to be developed from scratch for each new metamodel. In this paper, we classify reuse approaches for MTs across different metamodels and compare a sample of specific approaches \textendash{} model types, concepts, a-posteriori typing, multilevel modeling, and design patterns for MTs \textendash with the help of a feature model developed for this purpose, as well as a common example. We discuss strengths and weaknesses of each approach, provide a reading grid used to compare their features, and identify gaps in current reuse approaches.},
  isbn = {978-3-319-93316-0 978-3-319-93317-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QEJIXG76\\Bruel et al. - 2018 - Model Transformation Reuse Across Metamodels.pdf}
}

@inproceedings{brumbulliAutomaticVerificationBPMN2020,
  title = {Automatic Verification of {{BPMN}} Models},
  booktitle = {10th European Congress on Embedded Real Time Software and Systems ({{ERTS}} 2020)},
  author = {Brumbulli, Mihal and Gaudin, Emmanuel and Teodorov, Ciprian},
  year = {2020},
  month = jan,
  address = {{Toulouse, France}},
  hal_id = {hal-02441878},
  hal_version = {v1},
  pdf = {https://hal.archives-ouvertes.fr/hal-02441878/file/20200129\textsubscript{p}aper.pdf},
  keywords = {BPMN,Model Checking,Verification},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NCJAZCHM\\Brumbulli et al. - Automatic Verification of BPMN Models.pdf}
}

@article{bucchiaroneGrandChallengesModeldriven2020,
  title = {Grand Challenges in Model-Driven Engineering: An Analysis of the State of the Research},
  author = {Bucchiarone, Antonio and Cabot, Jordi and Paige, Richard and Pierantonio, Alfonso},
  year = {2020},
  month = jan,
  journal = {Software and Systems Modeling},
  volume = {19},
  pages = {1--9},
  doi = {10.1007/s10270-019-00773-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GIFCY83K\\Bucchiarone - Grand challenges in model-driven engineering an a.pdf}
}

@article{burguenoContentsModelBasedSoftware2019,
  title = {Contents for a {{Model-Based Software Engineering Body}} of {{Knowledge}}},
  author = {Burgue{\~n}o, Loli and Ciccozzi, Federico and Famelis, Michalis and Kappel, Gerti and Lambers, Leen and Mosser, Sebastien and Paige, Richard F. and Pierantonio, Alfonso and Rensink, Arend and Salay, Rick and Taentzer, Gabriele and Vallecillo, Antonio and Wimmer, Manuel},
  year = {2019},
  month = dec,
  journal = {Software and Systems Modeling},
  volume = {18},
  number = {6},
  pages = {3193--3205},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-019-00746-9},
  abstract = {Although Model-Based Software Engineering (MBE) is a widely accepted Software Engineering (SE) discipline, no agreedupon core set of concepts and practices (i.e., a Body of Knowledge) has been defined for it yet. With the goals of characterizing the contents of the MBE discipline, promoting a global consistent view of it, clarifying its scope with regard to other SE disciplines, and defining a foundation for the development of educational curricula on MBE, this paper proposes the contents for a Body of Knowledge for MBE. We also describe the methodology that we have used to come up with the proposed list of contents, as well as the results of a survey study that we conducted to sound out the opinion of the community on the importance of the proposed topics and their level of coverage in the existing SE curricula.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3EDWF6HY\\Burgueño et al. - 2019 - Contents for a Model-Based Software Engineering Bo.pdf}
}

@inproceedings{capelAutomatingTransformationBPMN2012,
  title = {Automating the {{Transformation}} from {{BPMN Models}} to {{CSP}}+{{T Specifications}}},
  booktitle = {2012 35th {{Annual IEEE Software Engineering Workshop}}},
  author = {Capel, Manuel I. and Mendoza, Luis E.},
  year = {2012},
  month = oct,
  pages = {100--109},
  publisher = {{IEEE}},
  address = {{Heraclion, Crete, Greece}},
  doi = {10.1109/SEW.2012.17},
  abstract = {The complexity of modern Business Process Modelling (BPM) together with the absence of the appropriate validation tools is the main reason for the costly and non\textendash evolutionary characteristics of these models. Temporal constructs of Extended Business Process Model and Notation (EBPMN) semantics are disambiguated here by using Communicating Sequential Processes+Time (CSP+T) process calculus, which adds new constructions to timed BPMN modelling entities for non\textendash functional requirements specification. Our objective is to facilitate the description of a business process model as a collection of verified software components, thereby advancing to their complete verification with state\textendash of-the\textendash art model checking tools. One real\textendash life example, Customer Relationship Management (CRM) modelled as a correct business task model is discussed to demonstrate the applicability of the verification approach.},
  isbn = {978-1-4673-5574-2 978-0-7695-4947-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SLZSGF6S\\Capel og Mendoza - 2012 - Automating the Transformation from BPMN Models to .pdf}
}

@incollection{cengarleHeterogeneousApproachUML2008,
  title = {A {{Heterogeneous Approach}} to {{UML Semantics}}},
  booktitle = {Concurrency, {{Graphs}} and {{Models}}},
  author = {Cengarle, Mar{\'i}a Victoria and Knapp, Alexander and Tarlecki, Andrzej and Wirsing, Martin},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Degano, Pierpaolo and De Nicola, Rocco and Meseguer, Jos{\'e}},
  year = {2008},
  volume = {5065},
  pages = {383--402},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-68679-8_23},
  isbn = {978-3-540-68676-7 978-3-540-68679-8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GDF27XNX\\Concurrency, Graphs and Models Essays Dedicated to Ugo Montanari on the Occasion of His 65th Birthday by Rocco De Nicola, Pierpaolo Degano, José Meseguer (auth.), Pierpaolo Degano, Rocco De Nicola, Jo (z-lib.o.pdf}
}

@inproceedings{chenCompositionalSpecificationBehavioral2007,
  title = {Compositional Specification of Behavioral Semantics},
  booktitle = {2007 Design, Automation Test in Europe Conference Exhibition},
  author = {Chen, Kai and Sztipanovits, Janos and Neema, Sandeep},
  year = {2007},
  pages = {1--6},
  doi = {10.1109/DATE.2007.364408},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RTCMAMXQ\\Chen - Compositional Specification of Behavioral Semantic.pdf}
}

@article{cheneyPrinciplesLeastChange2017,
  title = {On Principles of {{Least Change}} and {{Least Surprise}} for Bidirectional Transformations.},
  author = {Cheney, James and Gibbons, Jeremy and McKinna, James and Stevens, Perdita},
  year = {2017},
  journal = {The Journal of Object Technology},
  volume = {16},
  number = {1},
  pages = {3:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2017.16.1.a3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A25WXDMZ\\Cheney et al. - 2017 - On principles of Least Change and Least Surprise f.pdf}
}

@inproceedings{chenFormalModelingComponent2010,
  title = {A {{Formal Modeling}} for {{Component Behaviors Based}} on {{Event Track}}},
  booktitle = {2010 {{Fifth IEEE International Symposium}} on {{Service Oriented System Engineering}}},
  author = {Chen, Zhongyu and Zhang, Jichang and Miao, Huaikou and Guo, Zhenghu},
  year = {2010},
  month = jun,
  pages = {113--116},
  publisher = {{IEEE}},
  address = {{Nanjing, China}},
  doi = {10.1109/SOSE.2010.9},
  abstract = {System behaviors are implemented through interacting between components during the method of component-based software development. Therefore, how to formal the component behaviors have become an important problem. This paper presents a component behavioral modeling method based on event track, which utilize a process with the event track to describe the behavior of component, the event set may be involved in the components were extended to the pointed set, the possible behavior of component in a given environment seen as an event track. This method can effectively solve parallel composition of component behaviors with synchronization constraints. Finally, this paper illustrates concrete details by an example.},
  isbn = {978-1-4244-7327-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QRCHIK4L\\Chen et al. - 2010 - A Formal Modeling for Component Behaviors Based on.pdf}
}

@article{choiTimingConsistencyChecking2016,
  title = {Timing Consistency Checking for {{UML}}/{{MARTE}} Behavioral Models},
  author = {Choi, Jinho and Jee, Eunkyoung and Bae, Doo-Hwan},
  year = {2016},
  month = sep,
  journal = {Software Quality Journal},
  volume = {24},
  number = {3},
  pages = {835--876},
  issn = {0963-9314, 1573-1367},
  doi = {10.1007/s11219-015-9290-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QMA27CSK\\Choi et al. - 2016 - Timing consistency checking for UMLMARTE behavior.pdf}
}

@incollection{ciattoTwentyYearsCoordination2018,
  title = {Twenty {{Years}} of {{Coordination Technologies}}: {{State-of-the-Art}} and {{Perspectives}}},
  shorttitle = {Twenty {{Years}} of {{Coordination Technologies}}},
  booktitle = {Coordination {{Models}} and {{Languages}}},
  author = {Ciatto, Giovanni and Mariani, Stefano and Louvel, Maxime and Omicini, Andrea and Zambonelli, Franco},
  editor = {Di Marzo Serugendo, Giovanna and Loreti, Michele},
  year = {2018},
  volume = {10852},
  pages = {51--80},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-92408-3_3},
  abstract = {Since complexity of inter- and intra-systems interactions is steadily increasing in modern application scenarios (e.g., the IoT), coordination technologies are required to take a crucial step towards maturity. In this paper we look back at the history of the COORDINATION conference in order to shed light on the current status of the coordination technologies there proposed throughout the years, in an attempt to understand success stories, limitations, and possibly reveal the gap between actual technologies, theoretical models, and novel application needs.},
  isbn = {978-3-319-92407-6 978-3-319-92408-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SAXUWPTG\\Ciatto et al. - 2018 - Twenty Years of Coordination Technologies State-o.pdf}
}

@article{cicchettiMultiviewApproachesSoftware2019,
  title = {Multi-View Approaches for Software and System Modelling: A Systematic Literature Review},
  shorttitle = {Multi-View Approaches for Software and System Modelling},
  author = {Cicchetti, Antonio and Ciccozzi, Federico and Pierantonio, Alfonso},
  year = {2019},
  month = dec,
  journal = {Software and Systems Modeling},
  volume = {18},
  number = {6},
  pages = {3207--3233},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00713-w},
  abstract = {Over the years, a number of approaches have been proposed on the description of systems and software in terms of multiple views represented by models. This modelling branch, so-called multi-view software and system modelling, praises a differentiated and complex scientific body of knowledge. With this study, we aimed at identifying, classifying, and evaluating existing solutions for multi-view modelling of software and systems. To this end, we conducted a systematic literature review of the existing state of the art related to the topic. More specifically, we selected and analysed 40 research studies among over 8600 entries. We defined a taxonomy for characterising solutions for multi-view modelling and applied it to the selected studies. Lastly, we analysed and discussed the data extracted from the studies. From the analysed data, we made several observations, among which: (i) there is no uniformity nor agreement in the terminology when it comes to multi-view artefact types, (ii) multi-view approaches have not been evaluated in industrial settings and (iii) there is a lack of support for semantic consistency management and the community does not appear to consider this as a priority. The study results provide an exhaustive overview of the state of the art for multi-view software and systems modelling useful for both researchers and practitioners.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AWFQSPI2\\Cicchetti et al. - 2019 - Multi-view approaches for software and system mode.pdf}
}

@book{clarkeHandbookModelChecking2018,
  title = {Handbook of {{Model Checking}}},
  editor = {Clarke, Edmund M. and Henzinger, Thomas A. and Veith, Helmut and Bloem, Roderick},
  year = {2018},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-10575-8},
  isbn = {978-3-319-10574-1 978-3-319-10575-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z45RIZNA\\Clarke et al. - 2018 - Handbook of Model Checking.pdf}
}

@article{clarkeStateSpaceReduction1999,
  title = {State Space Reduction Using Partial Order Techniques},
  author = {Clarke, E.M. and Grumberg, O. and Minea, M. and Peled, D.},
  year = {1999},
  month = nov,
  journal = {International Journal on Software Tools for Technology Transfer (STTT)},
  volume = {2},
  number = {3},
  pages = {279--287},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s100090050035},
  abstract = {With the advancement of computer technology, highly concurrent systems are being developed. The veri cation of such systems is a challenging task, as their state space grows exponentially with the number of processes. Partial order reduction is an e ective technique to address this problem. It relies on the observation that the e ect of executing transitions concurrently is often independent of their ordering. In this paper we present the basic principles behind partial order reduction and its implementation.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y9F69575\\Clarke et al. - 1999 - State space reduction using partial order techniqu.pdf}
}

@incollection{colangeloReducingSoftwareArchitecture2006,
  title = {Reducing {{Software Architecture Models Complexity}}: {{A Slicing}} and {{Abstraction Approach}}},
  shorttitle = {Reducing {{Software Architecture Models Complexity}}},
  booktitle = {Formal {{Techniques}} for {{Networked}} and {{Distributed Systems}} - {{FORTE}} 2006},
  author = {Colangelo, Daniela and Compare, Daniele and Inverardi, Paola and Pelliccione, Patrizio},
  editor = {Najm, Elie and {Pradat-Peyre}, Jean-Fran{\c c}ois and {Donzeau-Gouge}, V{\'e}ronique Vigui{\'e}},
  year = {2006},
  volume = {4229},
  pages = {243--258},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11888116_19},
  abstract = {Software architectures (SA) represents a critical design level for software systems. Architectural choices need to be analyzed and verified to achieve a better software quality while reducing the time and cost of production. Model-checking is one of the most promising verification techniques, however its use for very large systems is not always possible due to the state explosion problem. In this paper we propose an approach that slices and abstracts the SA of a system in order to reduce the model complexity without compromising the verification validity. This approach exploits the characteristics of the SA model and the structure of the property of interest. It is applied to an industrial telecommunication system of the Selex Communications company.},
  isbn = {978-3-540-46219-4 978-3-540-46220-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3KGXA3MH\\Colangelo et al. - 2006 - Reducing Software Architecture Models Complexity .pdf}
}

@article{combemaleGlobalizingModelingLanguages2014,
  title = {Globalizing {{Modeling Languages}}},
  author = {Combemale, Benoit and DeAntoni, Julien and Baudry, Benoit and France, Robert B. and Jezequel, Jean-Marc and Gray, Jeff},
  year = {2014},
  month = jun,
  journal = {Computer},
  volume = {47},
  number = {6},
  pages = {68--71},
  issn = {0018-9162},
  doi = {10.1109/MC.2014.147},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RD4XPN4M\\Combemale et al. - 2014 - Globalizing Modeling Languages.pdf}
}

@incollection{combemaleReifyingConcurrencyExecutable2013,
  title = {Reifying {{Concurrency}} for {{Executable Metamodeling}}},
  booktitle = {Software {{Language Engineering}}},
  author = {Combemale, Beno{\^i}t and De Antoni, Julien and Larsen, Matias Vara and Mallet, Fr{\'e}d{\'e}ric and Barais, Olivier and Baudry, Benoit and France, Robert B.},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Erwig, Martin and Paige, Richard F. and Van Wyk, Eric},
  year = {2013},
  volume = {8225},
  pages = {365--384},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-02654-1_20},
  abstract = {Current metamodeling techniques can be used to specify the syntax and semantics of domain specific modeling languages (DSMLs). Still, there is little support for explicitly specifying concurrency semantics of DSMLs. Often, such semantics are provided by the implicit concurrency model of the execution environment supported by the language workbench used to implement the DSMLs. The lack of an explicit concurrency model has several drawbacks: it prevents from developing a complete understanding of the DSML's behavioral semantics, as well as effective concurrency-aware analysis techniques, and explicit models of semantic variants. This work reifies concurrency as a metamodeling facility, leveraging formalization work from the concurrency theory and models of computation (MoC) community. The essential contribution of this paper is a language workbench for binding domain-specific concepts and models of computation through an explicit event structure at the metamodel level. We present a case study that serves to demonstrate the utility of the novel metamodeling facilities and clarify the scope of the approach.},
  isbn = {978-3-319-02653-4 978-3-319-02654-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MLH6J38Q\\Combemale et al. - 2013 - Reifying Concurrency for Executable Metamodeling.pdf}
}

@article{combemaleSolutionTTC15,
  title = {A {{Solution}} to the {{TTC}}'15 {{Model Execution Case Using}} the {{GEMOC Studio}}},
  author = {Combemale, Benoit and Deantoni, Julien and Barais, Olivier and Blouin, Arnaud and Bousse, Erwan and Brun, C{\'e}dric and Degueule, Thomas and Vojtisek, Didier},
  pages = {9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\76KXU9WS\\Combemale et al. - A Solution to the TTC'15 Model Execution Case Usin.pdf;C\:\\Users\\Tim\\Zotero\\storage\\V9E3XMI2\\casedescription.pdf}
}

@article{CompositionStateMachines,
  title = {Composition of State Machines (Formally)},
  pages = {44},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\F8A3LTXC\\03_Composition_of_state_machines.pdf}
}

@inbook{corradiniAlgebraicApproachesGraph1997,
  title = {Algebraic {{Approaches}} to {{Graph Transformation}}, {{Part I}}: {{Basic Concepts}} and {{Double Pushout Approach}}},
  shorttitle = {{{ALGEBRAIC APPROACHES TO GRAPH TRANSFORMATION}} \textendash{} {{PART I}}},
  booktitle = {Handbook of {{Graph Grammars}} and {{Computing}} by {{Graph Transformation}}},
  author = {Corradini, A. and Montanari, U. and Rossi, F. and Ehrig, H. and Heckel, R. and L{\"o}we, M.},
  year = {1997},
  month = feb,
  pages = {163--245},
  publisher = {{WORLD SCIENTIFIC}},
  doi = {10.1142/9789812384720_0003},
  collaborator = {Rozenberg, Grzegorz},
  isbn = {978-981-02-2884-2 978-981-238-472-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HB67FMJ6\\Corradini et al. - 1997 - Algebraic Approaches to Graph Transformation, Part.pdf}
}

@inproceedings{corradiniBProVeToolSupport2017,
  title = {{{BProVe}}: {{Tool}} Support for Business Process Verification},
  shorttitle = {{{BProVe}}},
  booktitle = {2017 32nd {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  author = {Corradini, Flavio and Fornari, Fabrizio and Polini, Andrea and Re, Barbara and Tiezzi, Francesco and Vandin, Andrea},
  year = {2017},
  month = oct,
  pages = {937--942},
  publisher = {{IEEE}},
  address = {{Urbana, IL}},
  doi = {10.1109/ASE.2017.8115708},
  abstract = {This demo introduces BProVe, a tool supporting automated verification of Business Process models. BProVe analysis is based on a formal operational semantics defined for the BPMN 2.0 modelling language, and is provided as a freely accessible service that uses open standard formats as input data. Furthermore a plug-in for the Eclipse platform has been developed making available a tool chain supporting users in modelling and visualising, in a friendly manner, the results of the verification. Finally we have conducted a validation through more than one thousand models, showing the effectiveness of our verification tool in practice.},
  isbn = {978-1-5386-2684-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2I65MLLT\\Corradini et al. - 2017 - BProVe Tool support for business process verifica.pdf}
}

@article{corradiniClassificationBPMNCollaborations2018,
  title = {A {{Classification}} of {{BPMN Collaborations}} Based on {{Safeness}} and {{Soundness Notions}}},
  author = {Corradini, Flavio and Muzi, Chiara and Re, Barbara and Tiezzi, Francesco},
  year = {2018},
  month = aug,
  journal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {276},
  pages = {37--52},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.276.5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SNVUVSH4\\Corradini et al. - 2018 - A Classification of BPMN Collaborations based on S.pdf}
}

@article{corradiniConcurrentComputingPetri1995,
  title = {Concurrent {{Computing}}: From {{Petri Nets}} to {{Graph Grammars}}},
  shorttitle = {Concurrent {{Computing}}},
  author = {Corradini, Andrea},
  year = {1995},
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {2},
  pages = {56--70},
  issn = {15710661},
  doi = {10.1016/S1571-0661(05)80181-1},
  abstract = {Petri nets are widely accepted as a speci cation formalism for concurrent and distributed systems. One of the reasons of their success is the fact that they are equipped with a rich theory, including well-understood concurrent semantics they also provide an interesting benchmark for tools and techniques for the description of concurrent systems.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RE3EHYL9\\Corradini - 1995 - Concurrent Computing from Petri Nets to Graph Gra.pdf}
}

@article{corradiniCorrectnessCheckingBPMN2020,
  title = {Correctness Checking for {{BPMN}} Collaborations with Sub-Processes},
  author = {Corradini, Flavio and Morichetta, Andrea and Polini, Andrea and Re, Barbara and Rossi, Lorenzo and Tiezzi, Francesco},
  year = {2020},
  month = aug,
  journal = {Journal of Systems and Software},
  volume = {166},
  pages = {110594},
  issn = {01641212},
  doi = {10.1016/j.jss.2020.110594},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3NR9N7TH\\Corradini et al. - 2020 - Correctness checking for BPMN collaborations with .pdf}
}

@article{corradiniFormalApproachAnalysis2021,
  title = {A Formal Approach for the Analysis of {{BPMN}} Collaboration Models},
  author = {Corradini, Flavio and Fornari, Fabrizio and Polini, Andrea and Re, Barbara and Tiezzi, Francesco and Vandin, Andrea},
  year = {2021},
  month = oct,
  journal = {Journal of Systems and Software},
  volume = {180},
  pages = {111007},
  issn = {01641212},
  doi = {10.1016/j.jss.2021.111007},
  abstract = {BPMN collaboration models have acquired increasing relevance in software development since they shorten the communication gap between domain experts and IT specialists and permit clarifying the characteristics of software systems needed to provide automatic support for the activities of complex organizations. Nonetheless, the lack of effective formal verification capabilities can hinder the full adoption of the BPMN standard by IT specialists, as it prevents precisely check the satisfaction of behavioral properties, with negative impacts on the quality of the software. To address these issues, this paper proposes BProVe, a novel verification approach for BPMN collaborations. This combines both standard model checking techniques, through the MAUDE's LTL model checker, and statistical model checking techniques, through the statistical analyzer MultiVeStA. The latter makes BProVe effective also on those scenarios suffering from the state\textendash space explosion problem, made even more acute by the presence of asynchronous message exchanges. To support the adoption of the BProVe approach, we propose a complete web-based tool-chain that allows for BPMN modeling, verification, and result exploration. The feasibility of BProVe has been validated both on synthetically-generated models and on models retrieved from two public repositories. The performed validation highlighted the importance and complementarity of the two supported verification strategies.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4HNT5GGH\\Corradini et al. - 2021 - A formal approach for the analysis of BPMN collabo.pdf}
}

@inproceedings{costaVerigraphSystemSpecification2016,
  title = {Verigraph: {{A}} System for Specification and Analysis of Graph Grammars},
  booktitle = {Formal Methods: {{Foundations}} and Applications},
  author = {Costa, Andrei and Bezerra, Jonas and Azzi, Guilherme and Rodrigues, Leonardo and Becker, Thiago Rafael and Herdt, Ricardo Gabriel and Machado, Rodrigo},
  editor = {Ribeiro, Leila and Lecomte, Thierry},
  year = {2016},
  pages = {78--94},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  abstract = {Graph grammars are models that allow for a visual representation of both static and dynamic aspects of a system. There are several tools that allow the edition, simulation and analysis of graph grammars, each of them focusing on one kind of analysis technique or graph model. In this paper we present a new tool for simulation and analysis of graph grammars, called Verigraph, built with the following design principles: an implementation as direct as possible of formal concepts (to ease correctness arguments), a generic implementation of core algorithms (to allow its application for several graph models), and a reasonable running time. In this paper we present architectural aspects of Verigraph, together with a comparison with other similar tools in terms of available features.},
  isbn = {978-3-319-49815-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\837LZY5J\\Costa et al. - 2016 - Verigraph A system for specification and analysis.pdf}
}

@inproceedings{cunhaFormalVerificationUML2011,
  title = {Formal {{Verification}} of {{UML Sequence Diagrams}} in the {{Embedded Systems Context}}},
  booktitle = {2011 {{Brazilian Symposium}} on {{Computing System Engineering}}},
  author = {Cunha, E. and Custodio, M. and Rocha, H. and Barreto, R.},
  year = {2011},
  month = nov,
  pages = {39--45},
  publisher = {{IEEE}},
  address = {{Florianopolis, Brazil}},
  doi = {10.1109/SBESC.2011.18},
  abstract = {This paper shows a method for translating UML sequence diagrams to Petri nets and verifying deadlock-freeness, reachability, safety and liveness properties by using a model checker. In this proposed method, the user has not to know about temporal logics to describe the property to be verified. Instead, the user may adopt a high-level properties specification interface, which is automatically translated to a suitable temporal logic. We show the application of the proposed method in an embedded control application that consists of a sensory device mounted on a motorized platform that must detect and track specific objects in the environment.},
  isbn = {978-0-7695-4641-4 978-1-4673-0427-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7I9ZBIJL\\Cunha et al. - 2011 - Formal Verification of UML Sequence Diagrams in th.pdf}
}

@inproceedings{czarneckiClassificationModelTransformation2003,
  title = {Classification of Model Transformation Approaches},
  author = {Czarnecki, K. and Helsen, S.},
  year = {2003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\W2G7TWDS\\Czarnecki og Helsen - Classification of Model Transformation Approaches.pdf}
}

@inproceedings{czyzDeclarativeVisualDebugging2007,
  title = {Declarative and Visual Debugging in {{Eclipse}}},
  booktitle = {Proceedings of the 2007 {{OOPSLA}} Workshop on Eclipse Technology {{eXchange}}  - Eclipse '07},
  author = {Czyz, Jeffrey K. and Jayaraman, Bharat},
  year = {2007},
  pages = {31--35},
  publisher = {{ACM Press}},
  address = {{Montreal, Quebec, Canada}},
  doi = {10.1145/1328279.1328286},
  abstract = {We present a declarative and visual debugging environment for Eclipse called JIVE.1 Traditional debugging is procedural in that a programmer must proceed step-by-step and objectby-object in order to uncover the cause of an error. In contrast, we present a declarative approach to debugging consisting of a flexible set of queries over a program's execution history as well as over individual runtime states. This runtime information is depicted in a visual manner during program execution in order to aid the debugging process. The current state of execution is depicted through an enhanced object diagram, and the history of execution is depicted by a sequence diagram. Our methodology makes use of these diagrams as a means of formulating queries and reporting results in a visual manner. It also supports revisiting past runtime states, either through reverse stepping of the program or through queries that report information from past states. Eclipse serves as an ideal framework for implementing JIVE since, like the JIVE architecture, it makes crucial use of the Java Platform Debugging Architecture (JPDA). This paper presents details of the JIVE architecture and its integration into Eclipse.},
  isbn = {978-1-60558-015-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FWQJR98Y\\Czyz und Jayaraman - 2007 - Declarative and visual debugging in Eclipse.pdf}
}

@article{damConsistentMergingModel2016,
  title = {Consistent Merging of Model Versions},
  author = {Dam, Hoa Khanh and Egyed, Alexander and Winikoff, Michael and Reder, Alexander and {Lopez-Herrejon}, Roberto E.},
  year = {2016},
  month = feb,
  journal = {Journal of Systems and Software},
  volume = {112},
  pages = {137--155},
  issn = {01641212},
  doi = {10.1016/j.jss.2015.06.044},
  abstract = {While many engineering tasks can, and should be, manageable independently, it does place a great burden on explicit collaboration needs\textemdash including the need for frequent and incremental merging of artifacts that software engineers manipulate using these tools. State-of-the-art merging techniques are often limited to textual artifacts (e.g., source code) and they are unable to discover and resolve complex merging issues beyond simple conflicts. This work focuses on the merging of models where we consider not only conflicts but also arbitrary syntactic and semantic consistency issues. Consistent artifacts are merged fully automatically and only inconsistent/conflicting artifacts are brought to the users' attention, together with a systematic proposal of how to resolve them. Our approach is neutral with regard to who made the changes and hence reduces the bias caused by any individual engineer's limited point of view. Our approach also applies to arbitrary design or models, provided that they follow a well-defined metamodel with explicit constraints\textemdash the norm nowadays. The extensive empirical evaluation suggests that our approach scales to practical settings.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5QK67SXD\\Dam et al. - 2016 - Consistent merging of model versions.pdf}
}

@inproceedings{davisMultidomainSuretyModeling1999,
  title = {Multi-Domain Surety Modeling and Analysis for High Assurance Systems},
  booktitle = {Proceedings {{ECBS}}'99. {{IEEE Conference}} and {{Workshop}} on {{Engineering}} of {{Computer-Based Systems}}},
  author = {Davis, J. and Scott, J. and Sztipanovits, J. and Martinez, M.},
  year = {1999},
  pages = {254--260},
  publisher = {{IEEE Comput. Soc}},
  address = {{Nashville, TN, USA}},
  doi = {10.1109/ECBS.1999.755889},
  abstract = {Engineering systems are becoming increasingly complex as state of the art technologies are incorporated into designs. Surety modeling and analysis is an emerging science that permits an engineer to qualitatively and quantitatively predict and assess the completeness and predictability of a design. Surety is a term often used in the Department of Defense (DoD) and Department of Energy (DOE) communities, which refers to the integration of safety, security, reliability and performance aspects of design. Current risk assessment technologies for analyzing complex systems fail to adequately describe the problem, thus making assessment fragmented and non-integrated. To address this problem, we have developed a methodology and extensible software toolset to address model integration and complexity for high consequence systems. The MultiGraph Architecture (MGA) facilitates multi-domain, model-integrated modeling and analyses of complex, high-assurance systems. The MGA modeling environment allows the engineer to customize the modeling environment to match a design paradigm representative of the actual design. Previous modeling tools have a predefined model space that forces the modeler to work in less than optimal environments. Current approaches force the problem to be bounded and constrained by requirements of the modeling tool and not the actual design problem. In some small cases, this is only marginally adequate. The MGA facilitates the implementation of a surety methodology, which is used to represent high assurance systems with respect to safety and reliability. Formal mathematical models are used to correctly describe design safety and reliability functionality and behavior. The functional and behavioral representations of the design are then analyzed using commercial-off-the-shelf (COTS) tools.},
  isbn = {978-0-7695-0028-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8HSQN9FQ\\Davis et al. - 1999 - Multi-domain surety modeling and analysis for high.pdf}
}

@inproceedings{deantoniDebuggingVerificationTools2021,
  title = {Debugging and Verification Tools for {{LINGUA FRANCA}} in {{GEMOC}} Studio},
  booktitle = {2021 Forum on Specification  \& Design Languages ({{FDL}})},
  author = {Deantoni, Julien and Cambeiro, Jo{\~a}o and Bateni, Soroush and Lin, Shaokai and Lohstroh, Marten},
  year = {2021},
  month = sep,
  address = {{Antibes, France}},
  hal_id = {hal-03374955},
  hal_version = {v1},
  pdf = {https://hal.inria.fr/hal-03374955/file/FDL21.pdf},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4ZUKXYY5\\Deantoni et al. - 2021 - Debugging and verification tools for LINGUA FRANCA.pdf}
}

@incollection{deantoniDomainGlobalizationUsing2015,
  title = {Domain {{Globalization}}: {{Using Languages}} to {{Support Technical}} and {{Social Coordination}}},
  shorttitle = {Domain {{Globalization}}},
  booktitle = {Globalizing {{Domain-Specific Languages}}},
  author = {Deantoni, Julien and Brun, C{\'e}dric and Caillaud, Benoit and France, Robert B. and Karsai, Gabor and Nierstrasz, Oscar and Syriani, Eugene},
  editor = {Combemale, Benoit and Cheng, Betty H.C. and France, Robert B. and J{\'e}z{\'e}quel, Jean-Marc and Rumpe, Bernhard},
  year = {2015},
  volume = {9400},
  pages = {70--87},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-26172-0_5},
  abstract = {When a project is realized in a globalized environment, multiple stakeholders from different organizations work on the same system. Depending on the stakeholders and their organizations, various (possibly overlapping) concerns are raised in the development of the system. In this context a Domain Specific Language (DSL) supports the work of a group of stakeholders who are responsible for addressing a specific set of concerns. This chapter identifies the open challenges arising from the coordination of globalized domain-specific languages. We identify two types of coordination: technical coordination and social coordination. After presenting an overview of the current state of the art, we discuss first the open challenges arising from the composition of multiple DSLs, and then the open challenges associated to the collaboration in a globalized environment.},
  isbn = {978-3-319-26171-3 978-3-319-26172-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6XFNZ67W\\Deantoni et al. - 2015 - Domain Globalization Using Languages to Support T.pdf}
}

@inproceedings{deantoniModelingBehavioralSemantics2016,
  title = {Modeling the {{Behavioral Semantics}} of {{Heterogeneous Languages}} and Their {{Coordination}}},
  booktitle = {2016 {{Architecture-Centric Virtual Integration}} ({{ACVI}})},
  author = {Deantoni, Julien},
  year = {2016},
  month = apr,
  pages = {12--18},
  publisher = {{IEEE}},
  address = {{Venice, Italy}},
  doi = {10.1109/ACVI.2016.9},
  abstract = {In the software and system modeling community, research on domain-specific modeling languages (DSMLs) is focused on providing technologies for developing languages and tools that allow domain experts to develop system solutions efficiently. Unfortunately, the current lack of support for explicitly relating concepts expressed in different DSMLs makes it very difficult for software and system engineers to reason about information spread across models describing different system aspects. As a particular challenge, we present in this paper how we dealt with relationships between heterogeneous behavioral models to support their concurrent and coordinated execution. This was achieved by providing dedicated meta-language to define the behavioral semantics of DSMLs and their coordination. The approach made explicit a formal model of the control flow (MoCC); domain-specific actions (DSA) and a well-defined protocol between them (incl., mapping, feedback and callback) reified through explicit domain-specific events (DSE). The protocol is then used to infer a relevant behavioral language interface for specifying coordination patterns to be applied on conforming executable models. As a result, heterogeneous languages and their relationships can be developed in the GEMOC studio, which provides extensive support to run and debug heterogeneous models. This is outlined in the paper on the definition of the Marked Graph language and its coordination with a scenario language.},
  isbn = {978-1-5090-2488-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NBZZPP29\\Deantoni - 2016 - Modeling the Behavioral Semantics of Heterogeneous.pdf}
}

@inproceedings{deantoniRTsimexRetroanalysisExecution2010,
  title = {{{RT-simex}}: Retro-Analysis of Execution Traces},
  shorttitle = {{{RT-simex}}},
  booktitle = {Proceedings of the Eighteenth {{ACM SIGSOFT}} International Symposium on {{Foundations}} of Software Engineering - {{FSE}} '10},
  author = {DeAntoni, Julien and Mallet, Fr{\'e}d{\'e}ric and Thomas, Fr{\'e}d{\'e}ric and Reydet, Gonzague and Babau, Jean-Philippe and Mraidha, Chokri and Gauthier, Ludovic and Rioux, Laurent and Sordon, Nicolas},
  year = {2010},
  pages = {377},
  publisher = {{ACM Press}},
  address = {{Santa Fe, New Mexico, USA}},
  doi = {10.1145/1882291.1882357},
  abstract = {This presentation demonstrates the early results from the French ANR project RT-Simex. RT-Simex proposes a set of tools to analyze timing of parallel embedded code and trace the simulation results back to the initial models from which the code was generated. The whole tool-set relies on standard formats (uml marte, Open Trace Format) to ensure a perennial use. This is achieved through the polychronous logical time model of marte.},
  isbn = {978-1-60558-791-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3HB5SSPY\\DeAntoni et al. - 2010 - RT-simex retro-analysis of execution traces.pdf}
}

@incollection{deantoniTimeSquareTreatYour2012,
  title = {{{TimeSquare}}: {{Treat Your Models}} with {{Logical Time}}},
  shorttitle = {{{TimeSquare}}},
  booktitle = {Objects, {{Models}}, {{Components}}, {{Patterns}}},
  author = {DeAntoni, Julien and Mallet, Fr{\'e}d{\'e}ric},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Furia, Carlo A. and Nanz, Sebastian},
  year = {2012},
  volume = {7304},
  pages = {34--41},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-30561-0_4},
  abstract = {TimeSquare is an Eclipse and model-based environment for the specification, analysis and verification of causal and temporal constraints. It implements the MARTE Time Model and its specification language, the Clock Constraint Specification Language (ccsl). Both MARTE and ccsl heavily rely on logical time, made popular by its use in distributed systems and synchronous languages. Logical Time provides a relaxed form of time that is functional, elastic (can be abstracted or refined) and multiform. TimeSquare is based on the latest model-driven technology so that more than 60\% of its code is automatically generated. It provides an XText-based editor of constraints, a polychronous clock calculus engine able to process a partial order conforming to the set of constraints and it supports several simulation policies. It has been devised to be connected to several back-ends developed as new plugins to produce timing diagrams, animate uml models, or execute Java code amongst others.},
  isbn = {978-3-642-30560-3 978-3-642-30561-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6R3ADXRS\\DeAntoni og Mallet - 2012 - TimeSquare Treat Your Models with Logical Time.pdf}
}

@incollection{delaraComputerAidedMultiparadigm2002,
  title = {Computer {{Aided Multi-paradigm Modelling}} to {{Process Petri-Nets}} and {{Statecharts}}},
  booktitle = {Graph {{Transformation}}},
  author = {{de Lara}, Juan and Vangheluwe, Hans},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Corradini, Andrea and Ehrig, Hartmut and Kreowski, Hans -J{\"o}rg and Rozenberg, Grzegorz},
  year = {2002},
  volume = {2505},
  pages = {239--253},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-45832-8_19},
  abstract = {This paper proposes a Multi-Paradigm approach to the modelling of complex systems. The approach consists of the combination of meta-modelling, multi-formalism modelling, and modelling at multiple levels of abstraction. We implement these concepts in AToM3, A Tool for Multi-formalism, Meta-Modelling. In AToM3, modelling formalisms are modelled in their own right at a meta-level within an appropriate formalism. AToM3 uses the information found in the meta-models to automatically generate tools to process (create, edit, check, optimize, transform and generate simulators for) the models in the described formalism. Model processing is described at a meta-level by means of models in the graph grammar formalism. As an example, meta-models for both syntax and semantics of Statcharts (without hierarchy) and Petri-Nets are presented. This includes a graph grammar modelling the transformation between Statecharts and Petri-Nets.},
  isbn = {978-3-540-44310-0 978-3-540-45832-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\G8VJ28WN\\de Lara og Vangheluwe - 2002 - Computer Aided Multi-paradigm Modelling to Process.pdf}
}

@article{delaraDistributedEventGraphs2005,
  title = {Distributed {{Event Graphs}}: {{Formalizing Component-based Modelling}} and {{Simulation}}},
  shorttitle = {Distributed {{Event Graphs}}},
  author = {{de Lara}, Juan},
  year = {2005},
  month = apr,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {127},
  number = {4},
  pages = {145--162},
  issn = {15710661},
  doi = {10.1016/j.entcs.2004.08.052},
  abstract = {In this work an extension to the classical Event Graphs formalism for discrete-event simulation is presented. The extensions are oriented towards the specification of component-based models. The abstract syntax has been defined through meta-modelling. Several methodological issues are discussed, concerning the use of two different meta-modelling levels or collapsing the language into a single one, where ``instance-of '' relationships are used between processes and their classes. The operational semantics have been defined through graph transformation. This formal definition enables analysis before code is generated from the model. The syntax and semantics of the visual language have been implemented in the multi-paradigm tool AToM3, together with a code generator that produces stand-alone applications able to run the analysed models in real-time.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CYAFAHVC\\de Lara - 2005 - Distributed Event Graphs Formalizing Component-ba.pdf}
}

@incollection{delaraGenericMetamodellingConcepts2010,
  title = {Generic {{Meta-modelling}} with {{Concepts}}, {{Templates}} and {{Mixin Layers}}},
  booktitle = {Model {{Driven Engineering Languages}} and {{Systems}}},
  author = {{de Lara}, Juan and Guerra, Esther},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Petriu, Dorina C. and Rouquette, Nicolas and Haugen, {\O}ystein},
  year = {2010},
  volume = {6394},
  pages = {16--30},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-16145-2_2},
  abstract = {Meta-modelling is a key technique in Model Driven Engineering, where it is used for language engineering and domain modelling. However, mainstream approaches like the OMG's Meta-Object Facility provide little support for abstraction, modularity, reusability and extendibility of (meta-)models, behaviours and transformations.},
  isbn = {978-3-642-16144-5 978-3-642-16145-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AYGPSKTW\\de Lara og Guerra - 2010 - Generic Meta-modelling with Concepts, Templates an.pdf}
}

@inproceedings{demuthDesignSpaceInfrastructureMultiuser2015,
  title = {{{DesignSpace}}: An Infrastructure for Multi-User/Multi-Tool Engineering},
  shorttitle = {{{DesignSpace}}},
  booktitle = {Proceedings of the 30th {{Annual ACM Symposium}} on {{Applied Computing}}},
  author = {Demuth, Andreas and {Riedl-Ehrenleitner}, Markus and N{\"o}hrer, Alexander and Hehenberger, Peter and Zeman, Klaus and Egyed, Alexander},
  year = {2015},
  month = apr,
  pages = {1486--1491},
  publisher = {{ACM}},
  address = {{Salamanca Spain}},
  doi = {10.1145/2695664.2695697},
  abstract = {The engineering and maintenance of large (software) systems is an inherently collaborative process that involves diverse engineering teams, heterogeneous development artifacts, and different engineering tools. While teams have to collaborate continuously and their artifacts are often related, the tools they use are nearly always independent, single-user applications. These tools range from programming to modeling tools and cover a wide range of engineering disciplines. However, relations among the artifacts across these tools often remain undocumented and are handled in an adhoc manner. Keeping these artifacts in sync continues to be a key engineering challenge. In this paper, we present our vision of the DesignSpace, a novel engineering infrastructure for integrating diverse development artifacts and their relations. The DesignSpace supports distributed collaboration, a wide range of tools and development, maintenance , and evolution services including incremental consistency checking and transformation.},
  isbn = {978-1-4503-3196-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\U5KAGEYX\\Demuth et al. - 2015 - DesignSpace an infrastructure for multi-usermult.pdf}
}

@article{dijkmanSemanticsAnalysisBusiness2008,
  title = {Semantics and Analysis of Business Process Models in {{BPMN}}},
  author = {Dijkman, Remco M. and Dumas, Marlon and Ouyang, Chun},
  year = {2008},
  month = nov,
  journal = {Information and Software Technology},
  volume = {50},
  number = {12},
  pages = {1281--1294},
  issn = {09505849},
  doi = {10.1016/j.infsof.2008.02.006},
  abstract = {The Business Process Modelling Notation (BPMN) is a standard for capturing business processes in the early phases of systems development. The mix of constructs found in BPMN makes it possible to create models with semantic errors. Such errors are especially serious, because errors in the early phases of systems development are among the most costly and hardest to correct. The ability to statically check the semantic correctness of models is thus a desirable feature for modelling tools based on BPMN. Accordingly, this paper proposes a mapping from BPMN to a formal language, namely Petri nets, for which efficient analysis techniques are available. The proposed mapping has been implemented as a tool that, in conjunction with existing Petri net-based tools, enables the static analysis of BPMN models. The formalisation also led to the identification of deficiencies in the BPMN standard specification.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JVDUWGBW\\Dijkman et al. - 2008 - Semantics and analysis of business process models .pdf}
}

@incollection{diskinIntermodelingQueriesKleisli2012,
  title = {Intermodeling, {{Queries}}, and {{Kleisli Categories}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {Diskin, Zinovy and Maibaum, Tom and Czarnecki, Krzysztof},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and {de Lara}, Juan and Zisman, Andrea},
  year = {2012},
  volume = {7212},
  pages = {163--177},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-28872-2_12},
  abstract = {Specification and maintenance of relationships between models are vital for MDE. We show that a wide class of such relationships can be specified in a compact and precise manner, if intermodel mappings are allowed to link derived model elements computed by corresponding queries. Composition of such mappings is not straightforward and requires specialized algebraic machinery. We present a formal framework, in which such machinery can be defined generically for a wide class of metamodel definitions. This enables algebraic specification of practical intermodeling scenarios, e.g., model merge.},
  isbn = {978-3-642-28871-5 978-3-642-28872-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IV65FNSZ\\Diskin et al. - 2012 - Intermodeling, Queries, and Kleisli Categories.pdf}
}

@incollection{diskinModelSynchronizationMappings2011,
  title = {Model {{Synchronization}}: {{Mappings}}, {{Tiles}}, and {{Categories}}},
  shorttitle = {Model {{Synchronization}}},
  booktitle = {Generative and {{Transformational Techniques}} in {{Software Engineering III}}},
  author = {Diskin, Zinovy},
  editor = {Fernandes, Jo{\~a}o M. and L{\"a}mmel, Ralf and Visser, Joost and Saraiva, Jo{\~a}o},
  year = {2011},
  volume = {6491},
  pages = {92--165},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-18023-1_3},
  abstract = {The paper presents a novel algebraic framework for specification and design of model synchronization tools. The basic premise is that synchronization procedures, and hence algebraic operations modeling them, are diagrammatic: they take a configuration (diagram) of models and mappings as their input and produce a diagram as the output. Many important synchronization scenarios are based on diagram operations of square shape. Composition of such operations amounts to their tiling, and complex synchronizers can thus be assembled by tiling together simple synchronization blocks. This gives rise to a visually suggestive yet precise notation for specifying synchronization procedures and reasoning about them.},
  isbn = {978-3-642-18022-4 978-3-642-18023-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L2UB2PJM\\Diskin - 2011 - Model Synchronization Mappings, Tiles, and Catego.pdf}
}

@article{diskinMultipleModelSynchronization2019,
  title = {Multiple Model Synchronization with Multiary Delta Lenses with Amendment {{andK-Putput}}},
  author = {Diskin, Zinovy and K{\"o}nig, Harald and Lawford, Mark},
  year = {2019},
  month = nov,
  journal = {Formal Aspects of Computing},
  volume = {31},
  number = {5},
  pages = {611--640},
  issn = {0934-5043, 1433-299X},
  doi = {10.1007/s00165-019-00493-0},
  abstract = {Multiple (more than 2) model synchronization is ubiquitous and important for MDE, but its theoretical underpinning gained much less attention than the binary case. Specifically, the latter was extensively studied by the bx community in the framework of algebraic models for update propagation called lenses. We make a step to restore the balance and propose a notion of multiary delta lens. Besides multiarity, our lenses feature reflective updates, when consistency restoration requires some amendment of the update that violated consistency, and a reasonable PutPut law that requires compatibility of update propagation with update composition for a precisely specified restricted class of composable update pairs. We emphasize the importance of various ways of lens composition for practical applications of the framework, and prove several composition results.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\N856XMCY\\Diskin et al. - 2019 - Multiple model synchronization with multiary delta.pdf}
}

@incollection{domingoEvaluatingBenefitsModelDriven2020,
  title = {Evaluating the {{Benefits}} of {{Model-Driven Development}}: {{Empirical Evaluation Paper}}},
  shorttitle = {Evaluating the {{Benefits}} of {{Model-Driven Development}}},
  booktitle = {Advanced {{Information Systems Engineering}}},
  author = {Domingo, {\'A}frica and Echeverr{\'i}a, Jorge and Pastor, {\'O}scar and Cetina, Carlos},
  editor = {Dustdar, Schahram and Yu, Eric and Salinesi, Camille and Rieu, Dominique and Pant, Vik},
  year = {2020},
  volume = {12127},
  pages = {353--367},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-49435-3_22},
  abstract = {Researchers have been evaluating the benefits of ModelDriven Development (MDD) for more than a decade now. Although some works suggest that MDD decreases development time, other works limit MDD benefits to academic exercises and to developers without experience. To clarify the benefits of MDD, we present the results of our experiment, which compares MDD and Code-centric Development (CcD) in terms of correctness, efficiency, and satisfaction. Our experiment achieves fidelity to real-world settings because the tasks are taken from real-world video game development, and the subjects use domain frameworks as they are used in real-world developments. Our results challenge previous ideas that limit the benefits of MDD to academic exercises and to developers without experience. Furthermore, our results also suggest that understanding the benefits of MDD might require researchers to rethink their experiments to include the social part of software development.},
  isbn = {978-3-030-49434-6 978-3-030-49435-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KV7PE8GU\\Domingo et al. - 2020 - Evaluating the Benefits of Model-Driven Developmen.pdf}
}

@inproceedings{egyedFixingInconsistenciesUML2007,
  title = {Fixing {{Inconsistencies}} in {{UML Design Models}}},
  booktitle = {29th {{International Conference}} on {{Software Engineering}} ({{ICSE}}'07)},
  author = {Egyed, Alexander},
  year = {2007},
  month = may,
  pages = {292--301},
  publisher = {{IEEE}},
  address = {{Minneapolis, MN, USA}},
  issn = {0270-5257},
  doi = {10.1109/ICSE.2007.38},
  abstract = {Changes are inevitable during software development and so are their unintentional side effects. The focus of this paper is on UML design models, where unintentional side effects lead to inconsistencies. We demonstrate that a tool can assist the designer in discovering unintentional side effects, locating choices for fixing inconsistencies, and then in changing the design model. Our techniques are ``on-line,'' applied as the designer works, and non-intrusive, without overwhelming the designer. This is a significant improvement over the state-of-the-art. Our tool is fully integrated with the design tool IBM Rational Rose\texttrademark. It was empirically evaluated on 48 case studies.},
  isbn = {978-0-7695-2828-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DEHI5EZ3\\Egyed - 2007 - Fixing Inconsistencies in UML Design Models.pdf}
}

@article{egyedMaintainingConsistencyEngineering2018,
  title = {Maintaining {{Consistency}} across {{Engineering Artifacts}}},
  author = {Egyed, Alexander and Zeman, Klaus and Hehenberger, Peter and Demuth, Andreas},
  year = {2018},
  month = feb,
  journal = {Computer},
  volume = {51},
  number = {2},
  pages = {28--35},
  issn = {0018-9162},
  doi = {10.1109/MC.2018.1451666},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\382ANKIN\\Egyed et al. - 2018 - Maintaining Consistency across Engineering Artifac.pdf}
}

@book{ehrigFundamentalsAlgebraicGraph2006,
  title = {Fundamentals of Algebraic Graph Transformation (Monographs in Theoretical Computer Science. {{An EATCS}} Series)},
  author = {Ehrig, H. and Ehrig, K. and Prange, U. and Taentzer, G.},
  year = {2006},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  isbn = {3-540-31187-4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BRL5JTDU\\Ehrig - 2006 - Fundamentals of algebraic graph transformation.pdf}
}

@incollection{ehrigGraphGrammarsPetri2004,
  title = {Graph {{Grammars}} and {{Petri Net Transformations}}},
  booktitle = {Lectures on {{Concurrency}} and {{Petri Nets}}},
  author = {Ehrig, Hartmut and Padberg, Julia},
  editor = {Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Desel, J{\"o}rg and Reisig, Wolfgang and Rozenberg, Grzegorz},
  year = {2004},
  volume = {3098},
  pages = {496--536},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-27755-2_14},
  isbn = {978-3-540-22261-3 978-3-540-27755-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\85R9743R\\Ehrig og Padberg - 2004 - Graph Grammars and Petri Net Transformations.pdf}
}

@article{ekerTamingHeterogeneityPtolemy2003,
  title = {Taming Heterogeneity - the {{Ptolemy}} Approach},
  author = {Eker, J. and Janneck, J.W. and Lee, E.A. and {Jie Liu} and {Xiaojun Liu} and Ludvig, J. and Neuendorffer, S. and Sachs, S. and {Yuhong Xiong}},
  year = {2003},
  month = jan,
  journal = {Proceedings of the IEEE},
  volume = {91},
  number = {1},
  pages = {127--144},
  issn = {0018-9219},
  doi = {10.1109/JPROC.2002.805829},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2RB3MCMT\\Eker et al. - 2003 - Taming heterogeneity - the Ptolemy approach.pdf}
}

@inproceedings{elhamlaouiAlignmentViewpointHeterogeneous2016,
  title = {Alignment of Viewpoint Heterogeneous Design Models: {{Emergency}} Department Case Study},
  booktitle = {4th International Workshop on the Globalization of Modeling Languages ({{GEMOC}} 2016) Co-Located with {{ACM}}/{{IEEE MODELS}} 2016},
  author = {El Hamlaoui, Mahmoud and Coulette, Bernard and Ebersold, Sophie and Bennani, Saloua and Nassar, Mahmoud and Anwar, Adil and Beugnard, Antoine and Bach, Jean-Christophe and Jamoussi, Yassine and Tran, Hanh Nhi},
  year = {2016},
  month = oct,
  pages = {pp. 18-27},
  address = {{Saint-Malo, France}},
  hal_id = {hal-01436169},
  hal_local_reference = {17278},
  hal_version = {v1},
  pdf = {https://hal.archives-ouvertes.fr/hal-01436169/file/elhamlaoui{$_1$}7254.pdf},
  keywords = {Correspondences,Heterogeneous meta-models,Partial models,Refinement mechanism,Semantic expression},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3HL8RRZL\\El Hamlaoui et al. - 2016 - Alignment of viewpoint heterogeneous design models.pdf}
}

@article{elhamlaouiModelDrivenApproachAlign2021,
  title = {A {{Model-Driven Approach}} to Align {{Heterogeneous Models}} of a {{Complex System}}.},
  author = {El Hamlaoui, Mahmoud and Ebersold, Sophie and Bennani, Saloua and Anwar, Adil and Dkaki, Taoufiq and Nassar, Mahmoud and Coulette, Bernard},
  year = {2021},
  journal = {The Journal of Object Technology},
  volume = {20},
  number = {2},
  pages = {2:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.2.a2},
  abstract = {To understand and manipulate a complex system, it is necessary to apply the separation of concerns and produce separate models, called viewpoints models. These models represent views on the system that correspond to distinct business domains. They are generally heterogeneous, i.e. conform to different meta-models. The management of the system's global model (a complete view of the system) requires the identification of the existing correspondences among the viewpoints models. However, in practice these correspondences are either incompletely identified or not sufficiently formalized to be maintained when models evolve. This restricts their use and does not allow their full exploitation for managing the global model. To fix this issue, we propose AHM (Alignment of Heterogeneous Models), an approach to organize the source models as a network of models through a virtual global model called M1C (Model of correspondences between models) that conforms to a Meta-Model of Correspondences (MMC). AHM proposes also a process, allowing for both the creation of the global model, and its consistency control. Partial automation of this process is done through a refining mechanism supported by a semantics expression described in a Domain Specific Language (DSL). The application of AHM is illustrated by the example of a conference management system. A prototype of a tool called Heterogeneous Matching and Consistency management Suite (HMCS) has been developed to support this approach.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XHH7HRQ3\\El Hamlaoui et al. - 2021 - A Model-Driven Approach to align Heterogeneous Mod.pdf}
}

@inproceedings{ellisDynamicChangeWorkflow1995,
  title = {Dynamic Change within Workflow Systems},
  booktitle = {Proceedings of Conference on {{Organizational}} Computing Systems  - {{COCS}} '95},
  author = {Ellis, Clarence and Keddara, Karim and Rozenberg, Grzegorz},
  year = {1995},
  pages = {10--21},
  publisher = {{ACM Press}},
  address = {{Milpitas, California, United States}},
  doi = {10.1145/224019.224021},
  abstract = {Dynamic change is a large and pervasive unsolved probing about the organizational purpose of the document being edited. Organizationally aware groupware can polem which surfaces within office systems as well as within software engineering, manufacturing, and numerous other domains. Procedural changes, performed in tentially lead to significantly more powerful and useful systems. One class of organizationally aware groupware is workflow. an ad hoc manner, can cause inefficiencies, inconsistencies, and catastrophic breakdowns within offices. This paper is concerned with dynamic change to procedures in the context of workfiow systems. How can we make workflow systems more flexible and open? We believe that part of the answer lies in the study and solution of the dynamic change problem. In this paper, we use a Petri net formalism to analyze structural change within office procedures. As an example, we define\textasciitilde a class of change called "synthetic cut-over change", and apply our formalism to prove that this class maintains correctness when downsizing occurs.},
  isbn = {978-0-89791-706-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4HX3DSRP\\Ellis et al. - 1995 - Dynamic change within workflow systems.pdf}
}

@inproceedings{elmarzoukiStudyBehavioralStructural2016,
  title = {A Study of Behavioral and Structural Composition Methods and Techniques},
  booktitle = {2016 {{International Conference}} on {{Information Technology}} for {{Organizations Development}} ({{IT4OD}})},
  author = {Elmarzouki, Nisrine and Lakhrissi, Younes and Elmohajir, Mohammed},
  year = {2016},
  month = mar,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Fez, Morocco}},
  doi = {10.1109/IT4OD.2016.7479254},
  abstract = {In Software Engineering as in all other engineering fields, the product to be build is divided into sub-parts that are independently constructed and subsequently assembled. This procedure reduces the complexity and improves the reuse of the developed products. MDE (Model Driven Engineering) is a recent software engineering discipline that focuses this approach. It has allowed several significant improvements in the development of complex software systems by providing the means that enable to switch from one abstraction level into another or from one modeling space into another. However, models management may be tedious and costly. Thus, it is necessary to provide some flexible and reliable tools for automatic management of models and some techniques for their transformations in order to live up to user expectations. In this context, model composition has become an important artifact in the MDE domain that allows constructing and composing an efficient assembly process. In this paper, we present the state of the art of recent works in the model composition methods and techniques by focusing on the various parameters that govern and characterize their behavior.},
  isbn = {978-1-4673-7689-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VJMLXJSK\\Elmarzouki et al. - 2016 - A study of behavioral and structural composition m.pdf}
}

@inproceedings{engelsConsistencyWorkbenchTool2003,
  title = {The Consistency Workbench: {{A}} Tool for Consistency Management in {{UML-Based}} Development},
  booktitle = {{{UML}}},
  author = {Engels, Gregor and Heckel, Reiko and K{\"u}ster, Jochen Malte},
  year = {2003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L733RSTG\\Engels et al. - 2003 - The consistency workbench A tool for consistency .pdf}
}

@article{engelsConsistentInteractionSoftware2002,
  title = {Consistent Interaction of Software Components},
  author = {Engels, Gregor and K{\"u}uster, Jochen M. and Groenwegen, Luuk},
  year = {2002},
  month = dec,
  journal = {Journal of Integrated Design and Process Science},
  volume = {6},
  number = {4},
  pages = {2--22},
  publisher = {{IOS Press}},
  address = {{NLD}},
  issn = {1092-0617},
  abstract = {Constructing complex software systems by integrating different software components is a promising and challenging approach. With the functionality of software components given by models it is possible to ensure consistency of such models before implementation in order to successfully build the system. Models consisting of different submodels, the absence of an overall formal semantics and the numerous possibilities of employing models requires the development of techniques ensuring the consistency. In this paper, we discuss the issue of consistency of models made up of different submodels proposing a concept for the management of consistency. Consistency management relies on a consistency concept and a process for ensuring consistency of models. We introduce a consistency concept for software components modeled in the Unified Modeling Language (UML) and devise suitable consistency checks. On this basis, we propose a process how to locate and resolve inconsistencies, thus ensuring the consistency of models and by that the consistency of component-based systems derived from those models.},
  issue_date = {December 2002},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KFMXFT2Q\\Engels - 2003 - Consistent Interaction of Software Components.pdf;C\:\\Users\\Tim\\Zotero\\storage\\SIC8L9IT\\Engels et al. - 2002 - Consistent interaction of software components.pdf}
}

@incollection{engelsDynamicMetaModeling2000,
  title = {Dynamic {{Meta Modeling}}: {{A Graphical Approach}} to the {{Operational Semantics}} of {{Behavioral Diagrams}} in {{UML}}},
  shorttitle = {Dynamic {{Meta Modeling}}},
  booktitle = {{$\ll$}{{UML}}{$\gg$} 2000 \textemdash{} {{The Unified Modeling Language}}},
  author = {Engels, Gregor and Hausmann, Jan Hendrik and Heckel, Reiko and Sauer, Stefan},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Evans, Andy and Kent, Stuart and Selic, Bran},
  year = {2000},
  volume = {1939},
  pages = {323--337},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-40011-7_23},
  abstract = {In this paper, dynamic meta modeling is proposed as a new approach to the operational semantics of behavioral UML diagrams. The dynamic meta model extends the well-known static meta model by a specification of the system's dynamics by means of collaboration diagrams. In this way, it is possible to define the behavior of UML diagrams within UML.},
  isbn = {978-3-540-41133-8 978-3-540-40011-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UJFD9B8L\\Engels et al. - 2000 - Dynamic Meta Modeling A Graphical Approach to the.pdf}
}

@article{engelsMethodologySpecifyingAnalyzing2001,
  title = {A Methodology for Specifying and Analyzing Consistency of Object-Oriented Behavioral Models},
  author = {Engels, Gregor and K{\"u}ster, Jochem M. and Heckel, Reiko and Groenewegen, Luuk},
  year = {2001},
  month = sep,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {26},
  number = {5},
  pages = {186--195},
  issn = {0163-5948},
  doi = {10.1145/503271.503235},
  abstract = {Object-oriented modeling favors the modeling of object behavior from different viewpoints and the successive refinement of behavioral models in the development process. This gives rise to consistency problems of behavioral models. The absence of a formal semantics for UML models and the numerous possibilities of employing behavioral models within the development process lead to the rise of a number of different consistency notions. In this paper, we discuss the issue of consistency of behavioral models in the UML and present a general methodology how consistency problems can be dealt with. According to the methodology, those aspects of the models relevant to the consistency are mapped to a semantic domain in which precise consistency tests can be formulated. The choice of the semantic domain and the definition of consistency conditions can be used to construct different consistency notions. We show the applicability of our methodology by giving an example of a concrete consistency problem of concurrent object-oriented models.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AH985GBV\\Engels et al. - 2001 - A methodology for specifying and analyzing consist.pdf;C\:\\Users\\Tim\\Zotero\\storage\\D4QU8PVH\\engels.pdf}
}

@inproceedings{engelsRulebasedSpecificationBehavioral2001,
  title = {Rule-Based Specification of Behavioral Consistency Based on the {{UML}} Meta-Model},
  author = {Engels, Gregor and Heckel, Reiko and K{\"u}ster, Jochen},
  year = {2001},
  month = oct,
  series = {{{LNCS}}},
  volume = {2185},
  pages = {272--286},
  doi = {10.1007/3-540-45441-1_21},
  isbn = {978-3-540-42667-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SYQUIW2Z\\Rule-Based_Specification_of_Behavioral_Consistency.pdf}
}

@incollection{eshuisSynthesizingObjectCentricModels2014,
  title = {Synthesizing {{Object-Centric Models}} from {{Business Process Models}}},
  booktitle = {Business {{Process Management Workshops}}},
  author = {Eshuis, Rik and Van Gorp, Pieter},
  editor = {Lohmann, Niels and Song, Minseok and Wohed, Petia},
  year = {2014},
  volume = {171},
  pages = {155--166},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-06257-0_13},
  abstract = {Business process models expressed in UML activity diagrams can specify the flow of multiple stateful business objects among activities. Such business process models implicitly specify not only the life cycles of those objects, but also their communication. This paper presents a semiautomated approach that synthesizes an object-centric system design from a business process model referencing multiple objects. The objectcentric design can be used to perform the process in a flexible way.},
  isbn = {978-3-319-06256-3 978-3-319-06257-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DCAK9FBU\\Eshuis og Van Gorp - 2014 - Synthesizing Object-Centric Models from Business P.pdf}
}

@article{eshuisSynthesizingObjectLife2016,
  title = {Synthesizing Object Life Cycles from Business Process Models},
  author = {Eshuis, Rik and Van Gorp, Pieter},
  year = {2016},
  month = feb,
  journal = {Software \& Systems Modeling},
  volume = {15},
  number = {1},
  pages = {281--302},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-014-0406-4},
  abstract = {Unified modeling language (UML) activity diagrams can model the flow of stateful business objects among activities, implicitly specifying the life cycles of those objects. The actual object life cycles are typically expressed in UML state machines. The implicit life cycles in UML activity diagrams need to be discovered in order to derive the actual object life cycles or to check the consistency with an existing life cycle. This paper presents an automated approach for synthesizing a UML state machine modeling the life cycle of an object that occurs in different states in a UML activity diagram. The generated state machines can contain parallelism, loops, and cross-synchronization. The approach makes life cycles that have been modeled implicitly in activity diagrams explicit. The synthesis approach has been implemented using a graph transformation tool and has been applied in several case studies.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BDKSJEG5\\Eshuis og Van Gorp - 2016 - Synthesizing object life cycles from business proc.pdf}
}

@article{feldmannManagingIntermodelInconsistencies2019,
  title = {Managing Inter-Model Inconsistencies in Model-Based Systems Engineering: {{Application}} in Automated Production Systems Engineering},
  shorttitle = {Managing Inter-Model Inconsistencies in Model-Based Systems Engineering},
  author = {Feldmann, S. and Kernschmidt, K. and Wimmer, M. and {Vogel-Heuser}, B.},
  year = {2019},
  month = jul,
  journal = {Journal of Systems and Software},
  volume = {153},
  pages = {105--134},
  issn = {01641212},
  doi = {10.1016/j.jss.2019.03.060},
  abstract = {To cope with the challenge of managing the complexity of automated production systems, model-based approaches are applied increasingly. However, due to the multitude of different disciplines involved in automated production systems engineering, e.g., mechanical, electrical, and software engineering, several modeling languages are used within a project to describe the system from different perspectives. To ensure that the resulting system models are not contradictory, the necessity to continuously diagnose and handle inconsistencies within and in between models arises. This article proposes a comprehensive approach that allows stakeholders to specify, diagnose, and handle inconsistencies in model-based systems engineering. In particular, to explicitly capture the dependencies and consistency rules that must hold between the disparate engineering models, a dedicated graphical modeling language is proposed. By means of this language, stakeholders can specify, diagnose, and handle inconsistencies in the accompanying inconsistency management framework. The approach is implemented based on the Eclipse Modeling Framework (EMF) and evaluated based on a demonstrator project as well as a small user experiment. First findings indicate that the approach is expressive enough to capture typical dependencies and consistency rules in the automated production system domain and that it requires less effort compared to manually developing inter-model inconsistency management solutions.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9V52TPFU\\Feldmann et al. - 2019 - Managing inter-model inconsistencies in model-base.pdf}
}

@book{fiadeiroCategoriesSoftwareEngineering2005,
  title = {Categories for Software Engineering},
  author = {Fiadeiro, Jos{\'e} Luiz},
  year = {2005},
  publisher = {{Springer-Verlag}},
  address = {{Berlin}},
  isbn = {978-3-540-20909-6},
  langid = {english},
  lccn = {QA76.76.D47 F53 2005},
  keywords = {Categories (Mathematics),Computer software,Development},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TMYSSBGA\\Fiadeiro - 2005 - Categories for software engineering.pdf}
}

@article{finkelsteinVIEWPOINTSFRAMEWORKINTEGRATING1992,
  title = {{{VIEWPOINTS}}: {{A FRAMEWORK FOR INTEGRATING MULTIPLE PERSPECTIVES IN SYSTEM DEVELOPMENT}}},
  shorttitle = {{{VIEWPOINTS}}},
  author = {Finkelstein, A. and Kramer, J. and Nuseibeh, B. and Finkelstein, L. and Goedicke, M.},
  year = {1992},
  month = mar,
  journal = {International Journal of Software Engineering and Knowledge Engineering},
  volume = {02},
  number = {01},
  pages = {31--57},
  issn = {0218-1940, 1793-6403},
  doi = {10.1142/S0218194092000038},
  abstract = {This paper outlines a framework which supports the use of multiple perspectives in system development, and provides a means for developing and applying systems design methods. The framework uses ``viewpoints'' to partition the system specification, the development method and the formal representations used to express the system specifications. This VOSE (viewpoint-oriented systems engineering) framework can be used to support the design of heterogeneous and composite systems. We illustrate the use of the framework with a small example drawn from composite system development and give an account of prototype automated tools based on the framework.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9FNKA96D\\Finkelstein et al. - 1992 - VIEWPOINTS A FRAMEWORK FOR INTEGRATING MULTIPLE P.pdf}
}

@article{forwardModeldrivenRapidPrototyping2012,
  title = {Model-Driven Rapid Prototyping with {{Umple}}: {{MODEL-DRIVEN RAPID PROTOTYPING WITH UMPLE}}},
  shorttitle = {Model-Driven Rapid Prototyping with {{Umple}}},
  author = {Forward, Andrew and Badreddin, Omar and Lethbridge, Timothy C. and Solano, Julian},
  year = {2012},
  month = jul,
  journal = {Software: Practice and Experience},
  volume = {42},
  number = {7},
  pages = {781--797},
  issn = {00380644},
  doi = {10.1002/spe.1155},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YEMUEXI4\\Forward et al. - 2012 - Model-driven rapid prototyping with Umple MODEL-D.pdf}
}

@book{fowlerPatternsEnterpriseApplication2003,
  title = {Patterns of Enterprise Application Architecture},
  author = {Fowler, Martin},
  year = {2003},
  series = {The {{Addison-Wesley}} Signature Series},
  publisher = {{Addison-Wesley}},
  address = {{Boston}},
  isbn = {978-0-321-12742-6},
  langid = {english},
  lccn = {QA76.9.S88 F69 2003},
  keywords = {Application software,Business,Computer architecture,Data processing,Development,System design},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\765KNECL\\Fowler - 2003 - Patterns of enterprise application architecture.pdf}
}

@book{fowlerRefactoringImprovingDesign2019,
  title = {Refactoring: Improving the Design of Existing Code},
  shorttitle = {Refactoring},
  author = {Fowler, Martin},
  year = {2019},
  series = {Addison-{{Wesley}} Signature Series},
  edition = {Second edition},
  publisher = {{Addison-Wesley}},
  address = {{Boston}},
  isbn = {978-0-13-475759-9},
  lccn = {QA76.758 .F682 2019},
  keywords = {Object-oriented programming (Computer science),Software reengineering},
  annotation = {OCLC: on1064139838},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QBUCGS88\\Fowler - 2019 - Refactoring improving the design of existing code.pdf}
}

@inproceedings{franceModeldrivenDevelopmentComplex2007,
  title = {Model-Driven {{Development}} of {{Complex Software}}: {{A Research Roadmap}}},
  shorttitle = {Model-Driven {{Development}} of {{Complex Software}}},
  booktitle = {Future of {{Software Engineering}} ({{FOSE}} '07)},
  author = {France, Robert and Rumpe, Bernhard},
  year = {2007},
  month = may,
  pages = {37--54},
  publisher = {{IEEE}},
  address = {{Minneapolis, MN, USA}},
  doi = {10.1109/FOSE.2007.14},
  abstract = {The term Model-Driven Engineering (MDE) is typically used to describe software development approaches in which abstract models of software systems are created and systematically transformed to concrete implementations. In this paper we give an overview of current research in MDE and discuss some of the major challenges that must be tackled in order to realize the MDE vision of software development. We argue that full realizations of the MDE vision may not be possible in the near to medium-term primarily because of the wicked problems involved. On the other hand, attempting to realize the vision will provide insights that can be used to significantly reduce the gap between evolving software complexity and the technologies used to manage complexity.},
  isbn = {978-0-7695-2829-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KBWK2LVV\\France og Rumpe - 2007 - Model-driven Development of Complex Software A Re.pdf}
}

@book{freundRealLifeBPMNUsing2019,
  title = {Real-{{Life BPMN}}: Using {{BPMN}} and {{DMN}} to Analyze, Improve, and Automate Processes in Your Company},
  shorttitle = {Real-{{Life BPMN}}},
  author = {Freund, Jakob and R{\"u}cker, Bernd},
  translator = {Venis, James and Hannum, Kristen and Venis, Jalynn},
  year = {2019},
  edition = {4th edition},
  publisher = {{Camunda}},
  address = {{Berlin}},
  isbn = {978-1-08-630209-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CB5SLC4U\\Freund og Rucker - Real-Life BPMN (3rd edition) With introductions t.pdf}
}

@phdthesis{fuchsErschliessungDomanenubergreifenderInformationsraume2015,
  title = {{Erschlie\ss ung dom\"anen\"ubergreifender Informationsr\"aume mit Multimodellen: = Access of cross-domain information spaces using multi-models}},
  shorttitle = {{Erschlie\ss ung dom\"anen\"ubergreifender Informationsr\"aume mit Multimodellen}},
  author = {Fuchs, Sebastian},
  year = {2015},
  address = {{Dresden}},
  langid = {german},
  school = {Inst. f\"ur Bauinformatik, Fak. Bauingenieurwesen, TU Dresden},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4A5JT2WX\\Fuchs - 2015 - Erschließung domänenübergreifender Informationsräu.pdf}
}

@article{gadducciGraphRewritingPcalculus2007,
  title = {Graph Rewriting for the {$\pi$}-Calculus},
  author = {Gadducci, Fabio},
  year = {2007},
  journal = {Mathematical Structures in Computer Science},
  volume = {17},
  number = {3},
  pages = {407--437},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/S096012950700610X},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3AMNLE4B\\Gadducci - 2007 - Graph rewriting for the π-calculus.pdf}
}

@article{gammaDesignPatternsElements1994,
  title = {Design {{Patterns}} : {{Elements}} of {{Reusable Object-Oriented Software}}},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  year = {1994},
  pages = {431},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2PEFY8JA\\Gamma et al. - 1994 - Design Patterns  Elements of Reusable Object-Orie.pdf}
}

@inproceedings{garroFormalCyberPhysical2016,
  title = {On Formal Cyber Physical System Properties Modeling: {{A}} New Temporal Logic Language and a {{Modelica-based}} Solution},
  shorttitle = {On Formal Cyber Physical System Properties Modeling},
  booktitle = {2016 {{IEEE International Symposium}} on {{Systems Engineering}} ({{ISSE}})},
  author = {Garro, Alfredo and Tundis, Andrea and Bouskela, Daniel and Jardin, Audrey and Thuy, Nguyen and Otter, Martin and Buffoni, Lena and Fritzson, Peter and Sjolund, Martin and Schamai, Wladimir and Olsson, Hans},
  year = {2016},
  month = oct,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Edinburgh, United Kingdom}},
  doi = {10.1109/SysEng.2016.7753137},
  abstract = {Modeling and Simulation methods, tools and techniques aim at supporting the different phases of the lifecycle of modern systems, going from requirements analysis to system design and operation. However, their effective application requires investigating several aspects such as the formal modeling of system requirements and the binding and automated composition between heterogeneous models (e.g. requirements models, architectural models, behavioral models). In this context, the paper presents a new formal requirement modeling language based on temporal logic, called FORM-L, and a software library, based on the Modelica language, that implements the constructs provided by FORM-L so as to enable the visual modeling of system properties as well as their verification through simulation. The effectiveness of the proposal is shown on a real case study concerning an Intermediate Cooling System.},
  isbn = {978-1-5090-0793-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JXZ3YI2N\\Garro et al. - 2016 - On formal cyber physical system properties modelin.pdf}
}

@inproceedings{geigerEvolutionBPMNSupport2016,
  title = {On the {{Evolution}} of {{BPMN}} 2.0 {{Support}} and {{Implementation}}},
  booktitle = {2016 {{IEEE Symposium}} on {{Service-Oriented System Engineering}} ({{SOSE}})},
  author = {Geiger, Matthias and Harrer, Simon and Lenhard, Jorg and Wirtz, Guido},
  year = {2016},
  month = mar,
  pages = {101--110},
  publisher = {{IEEE}},
  address = {{Oxford}},
  doi = {10.1109/SOSE.2016.39},
  abstract = {The Business Process Model and Notation 2.0 (BPMN) standard has been hailed as a major step in business process modeling and automation. Recently, it has also been accepted as an ISO standard. The expectation is that vendors of business process management systems (BPMS) will switch to the new standard and natively support its execution in process engines.},
  isbn = {978-1-5090-2253-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UYH3BMBC\\Geiger et al. - 2016 - On the Evolution of BPMN 2.0 Support and Implement.pdf}
}

@inproceedings{gestwickiInteractiveVisualizationJava2002,
  title = {Interactive Visualization of {{Java}} Programs},
  booktitle = {Proceedings {{IEEE}} 2002 Symposia on Human Centric Computing Languages and Environments},
  author = {Gestwicki, P. and Jayaraman, B.},
  year = {2002},
  pages = {226--235},
  doi = {10.1109/HCC.2002.1046375},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\W6C9GDIR\\Gestwicki og Jayaraman - 2002 - Interactive visualization of Java programs.pdf}
}

@article{ghamarianModellingAnalysisUsing2012,
  title = {Modelling and Analysis Using {{GROOVE}}},
  author = {Ghamarian, Amir Hossein and {de Mol}, Maarten and Rensink, Arend and Zambon, Eduardo and Zimakova, Maria},
  year = {2012},
  month = feb,
  journal = {International Journal on Software Tools for Technology Transfer},
  volume = {14},
  number = {1},
  pages = {15--40},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s10009-011-0186-x},
  abstract = {In this paper we present case studies that describe how the graph transformation tool groove has been used to model problems from a wide variety of domains. These case studies highlight the wide applicability of groove in particular, and of graph transformation in general. They also give concrete templates for using groove in practice. Furthermore, we use the case studies to analyse the main strong and weak points of groove.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TVEZEYSM\\Ghamarian et al. - 2012 - Modelling and analysis using GROOVE.pdf}
}

@book{gibbonsBidirectionalTransformations2018,
  title = {Bidirectional {{Transformations}}},
  editor = {Gibbons, Jeremy and Stevens, Perdita},
  year = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {9715},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-79108-1},
  isbn = {978-3-319-79107-4 978-3-319-79108-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\B7FHJBJR\\Gibbons und Stevens - 2018 - Bidirectional Transformations.pdf}
}

@incollection{gleitzeFindingUniversalExecution2021,
  title = {Finding a {{Universal Execution Strategy}} for {{Model Transformation Networks}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {Gleitze, Joshua and Klare, Heiko and Burger, Erik},
  editor = {Guerra, Esther and Stoelinga, Mari{\"e}lle},
  year = {2021},
  volume = {12649},
  pages = {87--107},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-71500-7_5},
  abstract = {When using multiple models to describe a (software) system, one can use a network of model transformations to keep the models consistent after changes. No strategy exists, however, to orchestrate the execution of transformations if the network has an arbitrary topology. In this paper, we analyse how often and in which order transformations need to be executed. We argue why linear execution bounds are too restrictive to be useful in practice and prove that there is no upper bound for the number of necessary executions. To avoid non-termination, we propose a conservative strategy that makes execution failures easier to understand. These insights help developers and users of transformation networks to understand under which circumstances their networks can terminate. Additionally, the proposed strategy helps them to find the cause when a network cannot restore consistency.},
  isbn = {978-3-030-71499-4 978-3-030-71500-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JVYRTMRN\\Gleitze et al. - 2021 - Finding a Universal Execution Strategy for Model T.pdf}
}

@inproceedings{gogollaApplicationModelsFilmstrip2014,
  title = {From Application Models to Filmstrip Models: {{An}} Approach to Automatic Validation of Model Dynamics},
  booktitle = {Modellierung 2014},
  author = {Gogolla, Martin and Hamann, Lars and Hilken, Frank and Kuhlmann, Mirco and France, Robert},
  editor = {Fill, Hans-Georg and Karagiannis, Dimitris and Reimer, Ulrich},
  year = {2014},
  pages = {273--288},
  publisher = {{Gesellschaft f\"ur Informatik e.V.}},
  address = {{Bonn}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ETKC8MJC\\Gogolla et al. - 2014 - From application models to filmstrip models An ap.pdf}
}

@article{gorlaUnifiedApproachEncodability2010,
  title = {Towards a Unified Approach to Encodability and Separation Results for Process Calculi},
  author = {Gorla, Daniele},
  year = {2010},
  month = sep,
  journal = {Information and Computation},
  volume = {208},
  number = {9},
  pages = {1031--1053},
  issn = {08905401},
  doi = {10.1016/j.ic.2010.05.002},
  abstract = {We present a unified approach to evaluate the relative expressive power of process calculi. In particular, we identify a small set of criteria (that have already been somehow presented in the literature) that an encoding should satisfy to be considered a valid means for language comparison. We argue that the combination of such criteria is a valid proposal by noting that: (i) several well-known encodings appeared in the literature satisfy them; (ii) this notion is not trivial, because some known encodings do not satisfy all the criteria we have proposed; (iii) several well-known separation results can be formulated in terms of our criteria; and (iv) some widely believed (but never formally proved) separation results can be proved by using the criteria we propose. Moreover, the criteria defined induce general proof-techniques for separation results that can be easily instantiated to cover known case-studies.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YBCK9F4P\\Gorla - 2010 - Towards a unified approach to encodability and sep.pdf}
}

@article{gotterbarnSoftwareEngineeringCode1997,
  title = {Software Engineering Code of Ethics},
  author = {Gotterbarn, Don and Miller, Keith and Rogerson, Simon},
  year = {1997},
  month = nov,
  journal = {Communications of the ACM},
  volume = {40},
  number = {11},
  pages = {110--118},
  issn = {0001-0782},
  doi = {10.1145/265684.265699},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E6S9R5C4\\Gotterbarn et al. - 1997 - Software engineering code of ethics.pdf}
}

@incollection{gotterbarnSoftwareEngineeringEthics2002,
  title = {Software {{Engineering Ethics}}},
  booktitle = {Encyclopedia of {{Software Engineering}}},
  author = {Gotterbarn, Donald},
  year = {2002},
  publisher = {{John Wiley \& Sons, Ltd}},
  doi = {10.1002/0471028959.sof314},
  abstract = {Software engineering ethics can be approached from three directions: (1) it can describe the activity of software engineers making practical choices that affect other people in significant ways; (2) it can be used to describe a collection of principles, guidelines, or ethical imperatives that guide or legislative action; and (3) it can be used to name a discipline that studies the relationship between the other two senses of ethics. Software engineering ethics is clearly both an activity and a body of principles. The discipline of software engineering ethics that studies this activity and formalizes these principles, however, is in its infancy. Principle of ethics, the discipline of software engineering ethics, models and professional ethics are detailed.},
  isbn = {978-0-471-02895-6},
  langid = {english},
  keywords = {discipline,ethics,model,principles,professional ethics},
  annotation = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/0471028959.sof314},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FPJEU4Y2\\Gotterbarn - 2002 - Software Engineering Ethics.pdf}
}

@article{gronerSurveyRelevancePerformance2021,
  title = {A {{Survey}} on the {{Relevance}} of the {{Performance}} of {{Model Transformations}}.},
  author = {Groner, Raffaela and Juhnke, Katharina and G{\"o}tz, Stefan and Tichy, Matthias and Becker{\textdagger}, Steffen and Vijayshree, Vijayshree and Frank, Sebastian},
  year = {2021},
  journal = {The Journal of Object Technology},
  volume = {20},
  number = {2},
  pages = {1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.2.a5},
  abstract = {In Model-Driven Engineering (MDE) model transformation languages are used to describe important operations on models. Such domain-specific languages are specially developed to describe transformation rules, according to which an output model should be generated from an input model. In comparison to these domain-specific languages, techniques to analyze and improve the performance of programs written in a general-purpose language, such as Java or C, are well known. However, are such techniques also needed for model transformation languages? Problem. Since these languages are only used in certain domains; the first question is whether performance is at all relevant for model transformations and whether techniques similar to those used to analyze and improve the performance of general-purpose languages are needed. Research in the performance of model transformations focuses mainly on comparing the performance of different languages or different definition styles or optimizing the engine that executes the transformation. However, it is not clear to what extent these efforts can mitigate or prevent performance issues, and there is also a lack of studies that examine to what extend the performance of transformations is relevant. Method. In order to close this gap and to answer the initial question about the relevance of performance, we conducted an online survey. For this purpose, we developed a questionnaire and identified 649 authors as potential participants based on a Systematic Literature Review (SLR) on a selection of model transformation languages. Additionally, we were able to acquire four further potential participants by advertising our study. In total, 84 participants took part in our survey. We used statistical tests such as Kendall's {$\tau$}c, the Kruskal-Wallis-Test and the Mann-Whitney-U-Test to evaluate our hypotheses on relevant factors for the performance of model transformations. Results. The results show that specific performance is desired and that there is a willingness to improve performance. In this regard, we identified a need for insights necessary to better understand how a transformation is performed in order to be able to improve its performance. Furthermore, we investigated with the help of hypotheses tests the possible influencing factors that cause participants to try to analyze or improve the performance of model transformations. The main results of the hypotheses tests are that the satisfaction with the execution time, the size of the models used, the relevance of whether a specific execution time is not exceeded in the average case, and the knowledge of how a transformation engine executes a transformation are relevant factors.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3QNGWT67\\Groner et al. - 2021 - A Survey on the Relevance of the Performance of Mo.pdf}
}

@article{gronmoUMLSequenceDiagrams2011,
  title = {From {{UML}} 2 {{Sequence Diagrams}} to {{State Machines}} by {{Graph Transformation}}.},
  author = {Gr{\o}nmo, Roy and {M{\o}ller-Pedersen}, Birger},
  year = {2011},
  journal = {The Journal of Object Technology},
  volume = {10},
  pages = {8:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2011.10.1.a8},
  abstract = {Algebraic graph transformation has been promoted by several authors as a means to specify model transformations. This paper explores how we can specify graph transformation-based rules for a classical problem of transforming from sequence diagrams to state machines. The specification of the transformation rules is based on the concrete syntax of sequence diagrams and state machines. We introduce tailored transformation support for sequence diagrams and a novel graphical operator to match and transform combined fragments.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PM7F4A45\\Grønmo og Møller-Pedersen - 2011 - From UML 2 Sequence Diagrams to State Machines by .pdf}
}

@inproceedings{grosse-rhodeAlgebraTransformationSystems1998,
  title = {Algebra Transformation Systems and Their Composition},
  booktitle = {Fundamental Approaches to Software Engineering},
  author = {{Gro{\ss}e-Rhode}, Martin},
  editor = {Astesiano, Egidio},
  year = {1998},
  pages = {107--122},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {Algebra transformation systems are introduced as formal models of components of open distributed systems. They are given by a transition graph modelling the control flow and partial algebras and method expressions modelling the data states and their transformations. According to this two-level structure they cover both labelled transition systems and rule based specification approaches, corresponding to information, computation and engineering viewpoint models. Different composition operations for algebra transformation systems are investigated. Limits and colimits model parallel and sequential composition of components, signature morphisms yield appropriate syntactical support for such compositions. The most important compositionality properties known from algebraic specification, like colimits of signatures and amalgamation of models, also hold for the framework of algebra transformation systems.},
  isbn = {978-3-540-69723-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3YYMGPUT\\Grofle-Rhode - Algebra transformation systems and their compositi.pdf}
}

@book{guerraGraphTransformation12th2019,
  title = {Graph {{Transformation}}: 12th {{International Conference}}, {{ICGT}} 2019, {{Held}} as {{Part}} of {{STAF}} 2019, {{Eindhoven}}, {{The Netherlands}}, {{July}} 15\textendash 16, 2019, {{Proceedings}}},
  shorttitle = {Graph {{Transformation}}},
  editor = {Guerra, Esther and Orejas, Fernando},
  year = {2019},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {11629},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-23611-3},
  isbn = {978-3-030-23610-6 978-3-030-23611-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MR8DRSK9\\Guerra und Orejas - 2019 - Graph Transformation 12th International Conferenc.pdf}
}

@article{gummUniversalCoalgebraIntroductory,
  title = {Universal {{Coalgebra}} - {{An Introductory Tutorial}}},
  author = {Gumm, H Peter},
  journal = {Fuzzy Systems},
  pages = {367},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YDEANB2E\\Gumm - Universal Coalgebra - An Introductory Tutorial.pdf}
}

@incollection{habelAdhesiveTransformationSystems2012,
  title = {M, {{N}} -{{Adhesive Transformation Systems}}},
  booktitle = {Graph {{Transformations}}},
  author = {Habel, Annegret and Plump, Detlef},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Ehrig, Hartmut and Engels, Gregor and Kreowski, Hans-J{\"o}rg and Rozenberg, Grzegorz},
  year = {2012},
  volume = {7562},
  pages = {218--233},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-33654-6_15},
  isbn = {978-3-642-33653-9 978-3-642-33654-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7QD5ZC3T\\Ross - 1966 - The University of York.pdf}
}

@incollection{habelComputationalCompletenessProgramming2001,
  title = {Computational {{Completeness}} of {{Programming Languages Based}} on {{Graph Transformation}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Habel, Annegret and Plump, Detlef},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Honsell, Furio and Miculan, Marino},
  year = {2001},
  volume = {2030},
  pages = {230--245},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-45315-6_15},
  isbn = {978-3-540-41864-1 978-3-540-45315-4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JT5L2Y8L\\Habel og Plump - 2001 - Computational Completeness of Programming Language.pdf}
}

@inproceedings{hansonSimpleExtensibleGraphical1997,
  title = {A Simple and Extensible Graphical Debugger},
  booktitle = {Proceedings of the Annual Conference on {{USENIX}} Annual Technical Conference},
  author = {Hanson, David R. and Korn, Jeffrey L.},
  year = {1997},
  series = {{{ATEC}} '97},
  pages = {13},
  publisher = {{USENIX Association}},
  address = {{USA}},
  abstract = {deet is a simple but powerful debugger for ANSIC and Java. It differs from conventional debuggers in that it is machine-independent, graphical, programmable, distributed, extensible, and small. Low-level operations are performed by communicating with a "nub," which is a small set of machine-dependent functions that are embedded in the target program at compile-time, or are implemented on top of existing debuggers. deet has a set of commands that communicate with the target's nub. The target and deet communicate by passing messages through a pipe or socket, so they can be on a different machines. deet is implemented in tksh, an extension of the Korn shell that provides the graphical facilities of Tcl/Tk. Users can browse source files, set breakpoints, watch variables, and examine data structures by pointing and clicking. Additional facilities, like conditional breakpoints, can be written in either Tcl or the shell. Most debuggers are large and complicated, deet is less than 1,500 lines of shell plus a few hundred lines of machine-specific nub code. It is thus easy to understand, modify, and extend. We describe an implementation of the nub API for Java and an implementation that is layered on top of gdb. We have also implemented a version of gdb using the nub API, which demonstrates the modularity of the design.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HGDCK8FG\\Hanson og Korn - A Simple and Extensible Graphical Debugger.pdf}
}

@book{harariHomoDeusBrief2016,
  title = {Homo {{Deus}}: A Brief History of Tomorrow},
  shorttitle = {Homo {{Deus}}},
  author = {Harari, Yuval Noa{\d h}},
  year = {2016},
  series = {Vintage {{Popular}} Science},
  publisher = {{Harvill Secker}},
  address = {{London}},
  isbn = {978-1-910701-87-4 978-1-910701-88-1},
  langid = {english}
}

@book{harelComeLetPlay2003,
  title = {Come, {{Let}}'s {{Play}}},
  author = {Harel, David and Marelly, Rami},
  year = {2003},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-19029-2},
  isbn = {978-3-642-62416-2 978-3-642-19029-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L2CEVAT2\\Harel und Marelly - 2003 - Come, Let’s Play.pdf}
}

@inproceedings{harelExecutableObjectModeling1996,
  title = {Executable Object Modeling with Statecharts},
  booktitle = {Proceedings of the 18th International Conference on Software Engineering},
  author = {Harel, David and Gery, Eran},
  year = {1996},
  series = {{{ICSE}} '96},
  pages = {246--257},
  publisher = {{IEEE Computer Society}},
  address = {{USA}},
  abstract = {This paper reports on an effort to develop an integrated set of diagrammatic languages for modeling object-oriented systems, and to construct a supporting tool. The goal is for models to be intuitive and well-structured, yet fully executable and analyzable, enabling automatic synthesis of usable and efficient code in object-oriented languages such as C++. At the heart of the modeling method is the language of statecharts for specifying object behavior, and a hierarchical OMT-like language for describing the structure of classes and their inter-relationships, that we call O-charts. Objects can interact by event generation, or by direct invocation of operations. In the interest of keeping the exposition manageable, we leave out some technically involved topics, such as multiple-thread concurrency and active objects.},
  isbn = {0-8186-7246-3},
  keywords = {active objects,C++,diagrammatic languages,direct invocation,executable object modeling,hierarchical OMT-like language,integrated set,multiple-thread concurrency,O-charts,object-oriented languages,object-oriented programming,object-oriented systems,software tools,statecharts},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3IWM77AC\\Harel und Gery - 1996 - Executable object modeling with statecharts.pdf}
}

@article{harelPlayinPlayoutApproach,
  title = {The {{Play-in}}/{{Play-out Approach}} and {{Tool}}: {{Specifying}} and {{Executing Behavioral Requirements}}},
  author = {Harel, David and Kugler, Hillel and Marelly, Rami},
  pages = {5},
  abstract = {This leaves us with having to construct the LSCs manually, which is problematic, because despite the visuality, LSCs constitute a formal language, which will not always be appropriate for the people involved in the early stages of requirements capture. Towards the end of [2], this problem was addressed, and a higher-level approach to the problem of specifying scenario-based behavior, termed play-in scenarios, was proposed and briefly sketched. The details of this play-in methodology and the play-engine tool we have built to support it are given in [10]. The same paper also describes playout, a complementary idea to play-in, which, rather surprisingly, makes it possible to execute the requirements directly without having to build or synthesize an intra-object model of the system. In [11], smart play-out is introduced, which strengthens the `naive' play-out algorithms by using analytic techniques from the field of formal verification, mainly model checking.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PKN9H7KR\\Harel et al. - The Play-inPlay-out Approach and Tool Specifying.pdf}
}

@inproceedings{harrandThingMLLanguageCode2016,
  title = {{{ThingML}}: A Language and Code Generation Framework for Heterogeneous Targets},
  shorttitle = {{{ThingML}}},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 19th {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Harrand, Nicolas and Fleurey, Franck and Morin, Brice and Husa, Knut Eilif},
  year = {2016},
  month = oct,
  pages = {125--135},
  publisher = {{ACM}},
  address = {{Saint-malo France}},
  doi = {10.1145/2976767.2976812},
  abstract = {One of the selling points of Model-Driven Software Engineering (MDSE) is the increase in productivity offered by automatically generating code from models. However, the practical adoption of code generation remains relatively slow and limited to niche applications. Tooling issues are often pointed out but more fundamentally, experience shows that: (i) models and modeling languages used for other purposes are not necessarily well suited for code generation and (ii) code generators are often seen as black-boxes which are not easy to trust and produce sub-optimal code. This paper presents and discusses our experiences applying the ThingML approach to different domains. ThingML includes a modeling language and tool designed for supporting code generation and a highly customizable multi-platform code generation framework. The approach is implemented in an open-source tool providing a family of code generators targeting heterogeneous platforms. It has been evaluated through several case studies and is being used for in the development of a commercial ambient assisted living system.},
  isbn = {978-1-4503-4321-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MJ2BHL6X\\Harrand et al. - 2016 - ThingML a language and code generation framework .pdf}
}

@book{heckelGraphTransformationSoftware2020,
  title = {Graph {{Transformation}} for {{Software Engineers}}: {{With Applications}} to {{Model-Based Development}} and {{Domain-Specific Language Engineering}}},
  shorttitle = {Graph {{Transformation}} for {{Software Engineers}}},
  author = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2020},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-43916-3},
  isbn = {978-3-030-43915-6 978-3-030-43916-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4XQDPL2F\\Heckel og Taentzer - 2020 - Graph Transformation for Software Engineers With .pdf}
}

@book{heckelGraphTransformationSpecifications2018,
  title = {Graph {{Transformation}}, {{Specifications}}, and {{Nets}}: {{In Memory}} of {{Hartmut Ehrig}}},
  shorttitle = {Graph {{Transformation}}, {{Specifications}}, and {{Nets}}},
  editor = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {10800},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-75396-6},
  isbn = {978-3-319-75395-9 978-3-319-75396-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q5H5SPSG\\Heckel og Taentzer - 2018 - Graph Transformation, Specifications, and Nets In.pdf}
}

@article{heckmanSystematicLiteratureReview2011,
  title = {A Systematic Literature Review of Actionable Alert Identification Techniques for Automated Static Code Analysis},
  author = {Heckman, Sarah and Williams, Laurie},
  year = {2011},
  month = apr,
  journal = {Information and Software Technology},
  volume = {53},
  number = {4},
  pages = {363--387},
  issn = {09505849},
  doi = {10.1016/j.infsof.2010.12.007},
  abstract = {Objective: The goal of this work is to synthesize available research results to inform evidence-based selection of actionable alert identification techniques (AAIT). Method: Relevant studies about AAITs were gathered via a systematic literature review. Results: We selected 21 peer-reviewed studies of AAITs. The techniques use alert type selection; contextual information; data fusion; graph theory; machine learning; mathematical and statistical models; or dynamic detection to classify and prioritize actionable alerts. All of the AAITs are evaluated via an example with a variety of evaluation metrics. Conclusion: The selected studies support (with varying strength), the premise that the effective use of ASA is improved by supplementing ASA with an AAIT. Seven of the 21 selected studies reported the precision of the proposed AAITs. The two studies with the highest precision built models using the subject program's history. Precision measures how well a technique identifies true actionable alerts out of all predicted actionable alerts. Precision does not measure the number of actionable alerts missed by an AAIT or how well an AAIT identifies unactionable alerts. Inconsistent use of evaluation metrics, subject programs, and ASAs in the selected studies preclude meta-analysis and prevent the current results from informing evidence-based selection of an AAIT. We propose building on an actionable alert identification benchmark for comparison and evaluation of AAIT from literature on a standard set of subjects and utilizing a common set of evaluation metrics.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ABVJNI24\\Heckman og Williams - 2011 - A systematic literature review of actionable alert.pdf}
}

@article{hermannsPerformanceEvaluationProcess,
  title = {Performance {{Evaluation}} := ({{Process Algebra}} + {{Model Checking}}) \texttimes{} {{Markov Chains}}},
  author = {Hermanns, Holger and Katoen, Joost-Pieter},
  pages = {23},
  abstract = {Markov chains are widely used in practice to determine system performance and reliability characteristics. The vast majority of applications considers continuous-time Markov chains (CTMCs). This tutorial paper shows how successful model specification and analysis techniques from concurrency theory can be applied to performance evaluation. The specification of CTMCs is supported by a stochastic process algebra, while the quantitative analysis of these models is tackled by means of model checking. Process algebra provides: (i) a high-level specification formalism for describing CTMCs in a precise, modular and constraint-oriented way, and (ii) means for the automated generation and aggregation of CTMCs. Temporal logic model checking provides: (i) a formalism to specify complex measures-of-interest in a lucid, compact and flexible way, (ii) automated means to quantify these measures over CTMCs, and (iii) automated measure-driven aggregation (lumping) of CTMCs. Combining process algebra and model checking constitutes a coherent framework for performance evaluation based on CTMCs.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6NGK6DGH\\Hermanns og Katoen - Performance Evaluation = (Process Algebra + Model.pdf}
}

@article{hevnerDesignScienceInformation2004,
  title = {Design Science in Information Systems Research},
  author = {Hevner, Alan R. and March, Salvatore T. and Park, Jinsoo and Ram, Sudha},
  year = {2004},
  journal = {MIS Quarterly},
  volume = {28},
  number = {1},
  pages = {75--105},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/misq/HevnerMPR04.bib},
  timestamp = {Fri, 15 May 2020 17:12:47 +0200},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UJYVMPRE\\Hevner et al. - Design Science in Information Systems Research.pdf}
}

@article{hevnerThreeCycleView2007,
  title = {A {{Three Cycle View}} of {{Design Science Research}}.},
  author = {Hevner, Alan R.},
  year = {2007},
  journal = {Scandinavian Journal of Information Systems},
  volume = {19},
  number = {2},
  pages = {4},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/sjis/Hevner07.bib},
  timestamp = {Mon, 02 Mar 2020 16:32:38 +0100},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FQP3NBIN\\Hevner - 2007 - A Three Cycle View of Design Science Research.pdf}
}

@inproceedings{hilkenCatalogStructuralBehavioral2016,
  title = {Towards a Catalog of Structural and Behavioral Verification Tasks for {{UML}}/{{OCL}} Models},
  booktitle = {Modellierung},
  author = {Hilken, Frank and Niemann, P. and Gogolla, M. and Wille, R.},
  year = {2016},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E2ALWTMW\\Hilken et al. - Towards a Catalog of Structural and Behavioral Ver.pdf}
}

@incollection{hilkenFilmstrippingUnrollingComparison2014,
  title = {Filmstripping and {{Unrolling}}: {{A Comparison}} of {{Verification Approaches}} for {{UML}} and {{OCL Behavioral Models}}},
  shorttitle = {Filmstripping and {{Unrolling}}},
  booktitle = {Tests and {{Proofs}}},
  author = {Hilken, Frank and Niemann, Philipp and Gogolla, Martin and Wille, Robert},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Kobsa, Alfred and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Terzopoulos, Demetri and Tygar, Doug and Weikum, Gerhard and Seidl, Martina and Tillmann, Nikolai},
  year = {2014},
  volume = {8570},
  pages = {99--116},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-09099-3_8},
  isbn = {978-3-319-09098-6 978-3-319-09099-3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z6XSWRPE\\Hilken et al. - 2014 - Filmstripping and Unrolling A Comparison of Verif.pdf}
}

@article{hinkelChangePropagationBidirectionality2019,
  title = {Change Propagation and Bidirectionality in Internal Transformation {{DSLs}}},
  author = {Hinkel, Georg and Burger, Erik},
  year = {2019},
  month = feb,
  journal = {Software \& Systems Modeling},
  volume = {18},
  number = {1},
  pages = {249--278},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-017-0617-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6EGAYVW5\\Hinkel und Burger - 2019 - Change propagation and bidirectionality in interna.pdf}
}

@book{hohpeEnterpriseIntegrationPatterns2004,
  title = {Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions},
  shorttitle = {Enterprise Integration Patterns},
  author = {Hohpe, Gregor and Woolf, Bobby},
  year = {2004},
  series = {The {{Addison-Wesley}} Signature Series},
  publisher = {{Addison-Wesley}},
  address = {{Boston}},
  isbn = {978-0-321-20068-6},
  lccn = {TK5102.5 .H5882 2004},
  keywords = {Management information systems,Message processing,Telecommunication},
  annotation = {OCLC: ocm52901145},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8P99GEGQ\\woolfbrown2.pdf;C\:\\Users\\Tim\\Zotero\\storage\\L2WBGJIS\\Enterprise Integration Patterns Designing, Building and Deploying Messaging Solutions A Martin Fowler Signature Book - Addison-Wesley Pearson by Hohpe G., Woolf B., (2005) (z-lib.org).pdf}
}

@article{holzmannModelCheckerSPIN1997,
  title = {The Model Checker {{SPIN}}},
  author = {Holzmann, G.J.},
  year = {1997},
  month = may,
  journal = {IEEE Transactions on Software Engineering},
  volume = {23},
  number = {5},
  pages = {279--295},
  issn = {00985589},
  doi = {10.1109/32.588521},
  abstract = {SPIN is an efficient verification system for models of distributed software systems. It has been used to detect design errors in applications ranging from high-level descriptions of distributed algorithms to detailed code for controlling telephone exchanges. This paper gives an overview of the design and structure of the verifier, reviews its theoretical foundation, and gives an overview of significant practical applications.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\F5X2RJ2A\\Holzmann - 1997 - The model checker SPIN.pdf}
}

@inproceedings{houhouFirstOrderLogicSemantics2019,
  title = {A {{First-Order Logic Semantics}} for {{Communication-Parametric BPMN Collaborations}}},
  booktitle = {Business {{Process Management}}},
  author = {Houhou, Sara and Baarir, Souheib and Poizat, Pascal and Qu{\'e}innec, Philippe},
  editor = {Hildebrandt, Thomas and {van Dongen}, Boudewijn F. and R{\"o}glinger, Maximilian and Mendling, Jan},
  year = {2019},
  pages = {52--68},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-26619-6_6},
  abstract = {BPMN is suitable to model not only intra-organization workflows but also inter-organization collaborations. There has been a great effort in providing a formal semantics for BPMN, and then in building verification tools on top of this semantics. However, communication aspects are often discarded in the literature. This is an issue since BPMN has gained interest outside its original scope, e.g., for the IoT, where the configuration of communication modes plays an important role. In this paper, we propose a formal semantics for a subset of BPMN, taking into account inter-process communication and parametric verification with reference to communication modes. As opposed to transformational approaches, that map BPMN into some formal model such as transition systems or Petri nets, we give a direct formalization in First-Order Logic that is then implemented in TLA\$\$\^+\$\$to enable formal verification. Our approach is tool supported. The tool, as well as the TLA\$\$\^+\$\$theories, and experiment models are available online.},
  isbn = {978-3-030-26619-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8DRB7V3Z\\Houhou et al. - 2019 - A First-Order Logic Semantics for Communication-Pa.pdf}
}

@article{houhouFirstOrderLogicVerification2022,
  title = {A {{First-Order Logic}} Verification Framework for Communication-Parametric and Time-Aware {{BPMN}} Collaborations},
  author = {Houhou, Sara and Baarir, Souheib and Poizat, Pascal and Qu{\'e}innec, Philippe and Kahloul, La{\"i}d},
  year = {2022},
  month = feb,
  journal = {Information Systems},
  volume = {104},
  pages = {101765},
  issn = {03064379},
  doi = {10.1016/j.is.2021.101765},
  abstract = {The BPMN standard notation allows business process designers to model both intra-organizational processes and inter-organizational collaborations. A great effort has been devoted in proposing formal semantics for BPMN, and, fewer, in providing dedicated verification tools. Still, some advanced features of BPMN, namely communication or time-related constructs, are often set aside. This becomes an issue as BPMN gains interest outside of its original scope, e.g., for the IoT where communication and time play an important role. In this paper, we propose a formal semantics for a subset of BPMN. This semantics takes into account not only the usual gateways, but also sub-processes, inter-process communication, and time-related constructs. In contrast to transformational approaches, which give a semantics to BPMN by mapping it to some formal model (e.g., transition systems or Petri nets), our approach is based on a direct formalization in first-order logic that is then realized in a straightforward way into the TLA+ formal language. We build on the TLA+ model-checker, TLC, to provide process designers with a verification framework, fbpmn, that one may use to check BPMN and workflow specific properties. Our tools and our model database are open source and freely available online.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8IE8PXV3\\Houhou et al. - 2022 - A First-Order Logic verification framework for com.pdf}
}

@incollection{huzarConsistencyProblemsUMLBased2005,
  title = {Consistency {{Problems}} in {{UML-Based Software Development}}},
  booktitle = {{{UML Modeling Languages}} and {{Applications}}},
  author = {Huzar, Zbigniew and Kuzniarz, Ludwik and Reggio, Gianna and Sourrouille, Jean Louis},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Jardim Nunes, Nuno and Selic, Bran and {Rodrigues da Silva}, Alberto and Toval Alvarez, Ambrosio},
  year = {2005},
  volume = {3297},
  pages = {1--12},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-31797-5_1},
  isbn = {978-3-540-25081-4 978-3-540-31797-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LPNSCT6F\\Huzar et al. - 2005 - Consistency Problems in UML-Based Software Develop.pdf}
}

@inproceedings{idaniMeeduseToolBuild2020,
  title = {Meeduse: {{A}} Tool to Build and Run Proved {{DSLs}}},
  booktitle = {Integrated Formal Methods},
  author = {Idani, Akram},
  editor = {Dongol, Brijesh and Troubitsyna, Elena},
  year = {2020},
  pages = {349--367},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  abstract = {Executable Domain-Specific Languages (DSLs) are a promising paradigm in software systems development because they are aiming at performing early analysis of a system's behavior. They can be simulated and debugged by existing Model-Driven Engineering (MDE) tools leading to a better understanding of the system before its implementation. However, as the quality of the resulting system is closely related to the quality of the DSL, there is a need to ensure the correctness of the DSL and apply execution engines with a high level of trust. To this aim we developed Meeduse, a tool in which the MDE paradigm is mixed with a formal method assisted by automated reasoning tools such as provers and model-checkers. Meeduse assists the formal definition of the DSL static semantics by translating its meta-model into an equivalent formal B specification. The dynamic semantics can be defined using proved B operations that guarantee the correctness of the DSL's behavior with respect to its safety invariant properties. Regarding execution, Meeduse applies the ProB animator in order to animate underlying domain-specific scenarios.},
  isbn = {978-3-030-63461-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SD55YKCI\\Idani - 2020 - Meeduse A tool to build and run proved DSLs.pdf}
}

@misc{IntroductionCoAlgebra,
  title = {An Introduction to (Co)Algebra and (Co)Induction}
}

@inproceedings{iqbalTimeSemanticsExecutable2020,
  title = {Time Semantics of Executable Activity Diagrams for Relativized Conformance Testing},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Iqbal, Junaid and Truscan, Dragos and Vain, J{\"u}ri},
  year = {2020},
  month = oct,
  pages = {1--6},
  publisher = {{ACM}},
  address = {{Virtual Event Canada}},
  doi = {10.1145/3417990.3421399},
  abstract = {The executable subset of UML provides the ability to execute and simulate design models prior to implementation. In this paper, we introduce time semantics and relativized time input/output conformance rtioco relation for executable UML activity diagrams. The aforementioned features are essential and viable to perform online conformance testing. We present a tool support by extending the fUML execution engine, and demonstrate the approach on an example.},
  isbn = {978-1-4503-8135-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7QQIWJSD\\Iqbal et al. - 2020 - Time semantics of executable activity diagrams for.pdf}
}

@inproceedings{jacobsInteractiveVisualDebugging2003,
  title = {Interactive Visual Debugging with {{UML}}},
  booktitle = {Proceedings of the 2003 {{ACM}} Symposium on {{Software}} Visualization  - {{SoftVis}} '03},
  author = {Jacobs, Timothy and Musial, Benjamin},
  year = {2003},
  pages = {115},
  publisher = {{ACM Press}},
  address = {{San Diego, California}},
  doi = {10.1145/774833.774850},
  isbn = {978-1-58113-642-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HFEQBNWX\\Jacobs und Musial - Interactive Visual Debugging with UML.pdf}
}

@book{jacobsIntroductionCoalgebraMathematics2017,
  title = {Introduction to {{Coalgebra}}: {{Towards Mathematics}} of {{States}} and {{Observation}}},
  shorttitle = {Introduction to {{Coalgebra}}},
  author = {Jacobs, Bart},
  year = {2017},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9781316823187},
  isbn = {978-1-316-82318-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\USZCNZAE\\Jacobs - 2017 - Introduction to Coalgebra Towards Mathematics of .pdf}
}

@misc{JavaVisualizerIntelliJ,
  title = {Java {{Visualizer}} - {{IntelliJ IDEs Plugin}} | {{Marketplace}}},
  journal = {JetBrains Marketplace},
  abstract = {A tool to visualize the call stack and objects on the heap (as a box and       pointer diagram) while debugging Java applications.},
  howpublished = {https://plugins.jetbrains.com/plugin/11512-java-visualizer}
}

@article{jayaramanCompactVisualizationJava2017,
  title = {Compact Visualization of {{Java}} Program Execution},
  shorttitle = {Compact Visualization of {{Java}} Program Execution},
  author = {Jayaraman, S. and Jayaraman, B. and Lessa, D.},
  year = {2017},
  month = feb,
  journal = {Software: Practice and Experience},
  volume = {47},
  number = {2},
  pages = {163--191},
  issn = {00380644},
  doi = {10.1002/spe.2411},
  abstract = {The context of this work is a practical, open-source visualization system, called JIVE, that supports two forms of runtime visualizations of Java programs \textendash{} object diagrams and sequence diagrams. They capture, respectively, the current execution state and execution history of a Java program. These diagrams are similar to those found in the UML for specifying design\textendash time decisions. In our work, we construct these diagrams at execution time, thereby ensuring continuity of notation from design to execution. In so doing, a few extensions to the UML notation are proposed in order to better represent runtime behavior. As sequence diagrams can become long and unwieldy, we present techniques for their compact representation. A key result in this paper is a novel labeling scheme based upon regular expressions to compactly represent long sequences and an O r2 algorithm for computing these labels, where r is the length of the input sequence, based upon the concept of `tandem repeats' in a sequence. Horizontal compaction greatly helps minimize the extent of white space in sequence diagrams by the elimination of object lifelines and also by grouping lifelines together. We propose a novel extension to the sequence diagram to deal with out-of-model calls when the lifelines of certain classes of objects are filtered out of the visualization, but method calls may occur between in-model and out-of-model calls. The paper also presents compaction techniques for multithreaded Java execution with different forms of synchronization. Finally, we present experimental results from compacting the runtime visualizations of a variety of Java programs and execution trace sizes in order to demonstrate the practicality and efficacy of our techniques. Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\U6NEA9HR\\Jayaraman et al. - 2017 - Compact visualization of Java program execution C.pdf}
}

@inproceedings{jepsenEventCoordinationNotation2015,
  title = {The Event Coordination Notation: {{Behaviour}} Modelling beyond Mickey Mouse},
  booktitle = {Behavior Modeling \textendash{} Foundations and Applications},
  author = {Jepsen, Jesper and Kindler, Ekkart},
  editor = {Roubtsova, Ella and McNeile, Ashley and Kindler, Ekkart and Gerth, Christian},
  year = {2015},
  pages = {133--164},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  abstract = {The Event Coordination Notation (ECNO) allows modelling the desired behaviour of a software system on top of any object-oriented software. Together with existing technologies from Model-based Software Engineering (MBSE) for automatically generating the software for the structural parts, ECNO allows generating fully functional software from a combination of class diagrams and ECNO models. What is more, software generated from ECNO models, integrates with existing software and software generated by other technologies.},
  isbn = {978-3-319-21912-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\B4DMI28J\\Jepsen og Kindler - 2015 - The event coordination notation Behaviour modelli.pdf;C\:\\Users\\Tim\\Zotero\\storage\\CGPMQMXU\\Roubtsova et al. - 2015 - Behavior Modeling -- Foundations and Applications.pdf;C\:\\Users\\Tim\\Zotero\\storage\\ULWYMHT5\\Jepsen - Realizing a Workow Engine with the Event Coordina.pdf}
}

@techreport{jerdingUsingVisualizationFoster1994,
  title = {Using Visualization to Foster Object-Oriented Program Understanding},
  author = {Jerding, Dean F. and Stasko, John T.},
  year = {1994},
  institution = {{Georgia Institute of Technology}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4L3DT3YQ\\Jerding og Stasko - 1994 - Using visualization to foster object-oriented prog.pdf}
}

@misc{JIVEJavaInteractive,
  title = {{{JIVE}}: {{Java Interactive Visualization Environment}}},
  howpublished = {https://cse.buffalo.edu/jive/}
}

@article{johnsonUnifyingSetBasedDeltaBased,
  title = {Unifying {{Set-Based}}, {{Delta-Based}} and {{Edit-Based Lenses}}},
  author = {Johnson, Michael},
  pages = {13},
  abstract = {There are many different types of lenses, but largely they fall into the three classes of the title: set-based, delta-based and edit-based lenses. This paper develops some of the general relationships between those classes. The main results are that a category of set-based lenses is a full subcategory of a category of delta-based lenses determined by sending sets to codiscrete categories; that symmetric set-based lenses can similarly be seen as symmetric delta-based lenses; that symmetric editbased lenses are able to be represented as symmetric delta-based lenses, although not as a subcategory; and that symmetric edit-based lenses can also be seen as spans of a new notion of asymmetric edit-based lenses. The importance of the paper is that it provides a substantial unification with concrete inter-conversions developed among the three main approaches to lenses in both their symmetric and asymmetric forms.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8SWVP2NB\\Johnson - Unifying Set-Based, Delta-Based and Edit-Based Len.pdf}
}

@misc{JVMEcosystemReport2021,
  title = {{{JVM Ecosystem Report}} 2021 | {{Snyk}}},
  year = {2021},
  month = jun,
  abstract = {This report presents the results of the largest annual survey on the state of the JVM ecosystem.},
  howpublished = {https://snyk.io/jvm-ecosystem-report-2021/},
  langid = {american},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QIHTSDDJ\\2021 - JVM Ecosystem Report 2021  Snyk.pdf}
}

@article{k.p.FiniteStateModel2021,
  title = {Finite-state Model Extraction and Visualization from {{Java}} Program Execution},
  author = {K. P., Jevitha and Jayaraman, Swaminathan and Jayaraman, Bharat and M, Sethumadhavan},
  year = {2021},
  month = feb,
  journal = {Software: Practice and Experience},
  volume = {51},
  number = {2},
  pages = {409--437},
  issn = {0038-0644, 1097-024X},
  doi = {10.1002/spe.2910},
  abstract = {Finite-state models are extensively used for discrete systems and they have also been adopted for the analysis and verification of concurrent systems. Programs that have a repetitive cycle, such as event-driven servers and controllers, lend themselves to finite-state modeling. In this article, we use the term model extraction to refer to the construction of a finite-state model from an execution trace of a Java program and a set of key attributes, that is, a subset of the fields of the objects in the program execution. By choosing different sets of attributes, different finite-state models (or views) of the execution can be obtained. Such models aid program comprehension and they can also be used in debugging a program. We present algorithms for model extraction and also for model abstraction in order to reduce the size of the extracted models so that they are amenable to visualization. For long executions, we show how to minimize the overhead of execution trace collection through a bytecode instrumentation technique; and, for large models, which are not amenable to visualization, we show how key properties of the extracted model can be checked against declarative specifications. We have implemented our techniques in the context of JIVE, an Eclipse plugin that supports runtime visualization and analysis of Java program executions. We illustrate our techniques through a collection of case studies of varying size and complexity, from classic problems of concurrency control to a medium-size protocol for authorization (OAuth2.0 protocol) to a large-scale software that underlies web applications (Apache Tomcat server).},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TILJ9YTR\\K. P. et al. - 2021 - Finite‐state model extraction and visualization fr.pdf}
}

@article{kahaniSynthesisStateMachine2020,
  title = {Synthesis of {{State Machine Models}}},
  author = {Kahani, Nafiseh and Bagherzadeh, Mojtaba and Cordy, James R},
  year = {2020},
  pages = {11},
  abstract = {The automated synthesis of behavioural models in the form of state machines (SMs) from higher-level specifications has a high potential impact on the efficiency and accuracy of software development using models. In this paper, inspired by program synthesis techniques, we propose a model synthesis approach that takes as input a structural model of a system and its desired system properties, and automatically synthesizes executable SMs for its components. To this end, we first generate a synthesis formula for each component, consistent with the system properties, and then perform a State Space Exploration (SSE) of each component, based on its synthesis formula. The result of the SSE is saved in a Labeled Transition System (LTS), for which we then synthesize detailed actions for each of its transitions. Finally, we transform the LTSs into UML-RT (UML real-time profile) SMs, and integrate them with the original structural models. We assess the applicability, performance, and scalability of our approach using several different use cases extracted from the literature.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z3SKK9PU\\Kahani et al. - 2020 - Synthesis of State Machine Models.pdf}
}

@inproceedings{kastenbergModelCheckingDynamic2006,
  title = {Model Checking Dynamic States in {{GROOVE}}},
  booktitle = {Model Checking Software},
  author = {Kastenberg, Harmen and Rensink, Arend},
  editor = {Valmari, Antti},
  year = {2006},
  pages = {299--305},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {Much research has been done in the field of model-checking complex systems (either hardware or software). Approaches that use explicit state modelling mostly use bit vectors to represent the states of such systems. Unfortunately, that kind of representation does not extend smoothly to systems in which the states contain values from a domain other than primitive types, such as reference values commonly used in object-oriented systems.},
  isbn = {978-3-540-33103-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\85ZPAA2Q\\Kastenberg og Rensink - 2006 - Model checking dynamic states in GROOVE.pdf}
}

@article{kerkoucheUMLColoredPetri2010,
  title = {A {{UML}} and {{Colored Petri Nets Integrated Modeling}} and {{Analysis Approach}} Using {{Graph Transformation}}.},
  author = {Kerkouche, Elhillali and Chaoui, Algeria Allaoua and Bourennane, El Bay and Labbani, Ouassila},
  year = {2010},
  journal = {The Journal of Object Technology},
  volume = {9},
  number = {4},
  pages = {25},
  issn = {1660-1769},
  doi = {10.5381/jot.2010.9.4.a2},
  abstract = {Nowadays, UML is considered to be the standardized language for object-oriented modeling and analysis. However, UML cannot be used for automatic analyses and simulation. In this paper, we propose an approach for transforming UML statechart and collaboration diagrams to Colored Petri net models. This transformation aims to bridge the gap between informal notation (UML diagrams) and more formal notation (Colored Petri net models) for analysis purposes. It produces highlystructured, graphical, and rigorously-analyzable models that facilitate early detection of errors such as deadlock and livelock. The approach is based on graph transformations where the input and output of the transformation process are graphs. The meta-modeling tool AToM3 is used. A case study is presented to illustrate our approach.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AQE9XWV9\\Kerkouche et al. - 2010 - A UML and Colored Petri Nets Integrated Modeling a.pdf}
}

@inproceedings{kherboucheUsingModelChecking2013,
  title = {Using Model Checking to Control the Structural Errors in {{BPMN}} Models},
  booktitle = {{{IEEE}} 7th {{International Conference}} on {{Research Challenges}} in {{Information Science}} ({{RCIS}})},
  author = {Kherbouche, Oussama Mohammed and Ahmad, Adeel and Basson, Henri},
  year = {2013},
  month = may,
  pages = {1--12},
  publisher = {{IEEE}},
  address = {{Paris, France}},
  doi = {10.1109/RCIS.2013.6577723},
  abstract = {The emergence of BPMN as a standard notation to express the business processes is based on its simplicity of notations and its exhaustive expressiveness. Nevertheless the lack of formal semantics in the BPMN can cause syntactic and structural errors. The former requires less effort to be checked, while the later usually requires attention to prove some properties, like deadlockfreedom and livelock-freedom. In this paper, we address the issue of detecting the structural errors with an approach based on model checking. It verifies the soundness of business process model and helps the business modelers to avoid the deadlocks, livelocks, and multiple terminations errors.},
  isbn = {978-1-4673-2914-9 978-1-4673-2912-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8NDJVFA5\\Kherbouche et al. - 2013 - Using model checking to control the structural err.pdf}
}

@article{kienzleUnifyingFrameworkHomogeneous2019,
  title = {A Unifying Framework for Homogeneous Model Composition},
  author = {Kienzle, J{\"o}rg and Mussbacher, Gunter and Combemale, Benoit and Deantoni, Julien},
  year = {2019},
  month = oct,
  journal = {Software \& Systems Modeling},
  volume = {18},
  number = {5},
  pages = {3005--3023},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00707-8},
  abstract = {The growing use of models for separating concerns in complex systems has lead to a proliferation of model composition operators. These composition operators have traditionally been defined from scratch following various approaches differing in formality, level of detail, chosen paradigm, and styles. Due to the lack of proper foundations for defining model composition (concepts, abstractions, or frameworks), it is difficult to compare or reuse composition operators. In this paper, we stipulate the existence of a unifying framework that reduces all structural composition operators to structural merging, and all composition operators acting on discrete behaviors to event scheduling. We provide convincing evidence of this hypothesis by discussing how structural and behavioral homogeneous model composition operators (i.e., weavers) can be mapped onto this framework. Based on this discussion, we propose a conceptual model of the framework and identify a set of research challenges, which, if addressed, lead to the realization of this framework to support rigorous and efficient engineering of model composition operators for homogeneous and eventually heterogeneous modeling languages.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BF729HHA\\Kienzle et al. - 2019 - A unifying framework for homogeneous model composi.pdf}
}

@inproceedings{kindlerCoordinatingInteractionsEvent2014,
  title = {Coordinating Interactions: {{The}} Event Coordination Notation},
  author = {Kindler, E.},
  year = {2014},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WKGEGBFP\\Kindler - 2014 - Coordinating interactions The event coordination .pdf}
}

@inproceedings{kindlerIntegratingBehaviourSoftware2011,
  title = {Integrating Behaviour in Software Models: An Event Coordination Notation -- Concepts and Prototype},
  shorttitle = {Integrating Behaviour in Software Models},
  booktitle = {Proceedings of the {{Third Workshop}} on {{Behavioural Modelling}} - {{BM-FA}} '11},
  author = {Kindler, Ekkart},
  year = {2011},
  pages = {41--48},
  publisher = {{ACM Press}},
  address = {{Birmingham, United Kingdom}},
  doi = {10.1145/1993956.1993962},
  isbn = {978-1-4503-0617-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2TBHDLVH\\Kindler - Integrating behaviour in software models an event.pdf}
}

@incollection{kindlerModelBasedSoftwareEngineering2009,
  title = {Model-{{Based Software Engineering}} and {{Process-Aware Information Systems}}},
  booktitle = {Transactions on {{Petri Nets}} and {{Other Models}} of {{Concurrency II}}},
  author = {Kindler, Ekkart},
  editor = {Jensen, Kurt and {van der Aalst}, Wil M. P.},
  year = {2009},
  volume = {5460},
  pages = {27--45},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-00899-3_2},
  isbn = {978-3-642-00898-6 978-3-642-00899-3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4Q3I7BF6\\Kindler - 2009 - Model-Based Software Engineering and Process-Aware.pdf}
}

@inproceedings{kindlerModelbasedSoftwareEngineering2010,
  title = {Model-Based Software Engineering: The Challenges of Modelling Behaviour},
  shorttitle = {Model-Based Software Engineering},
  booktitle = {Proceedings of the {{Second International Workshop}} on {{Behaviour Modelling Foundation}} and {{Applications}} - {{BM-FA}} '10},
  author = {Kindler, Ekkart},
  year = {2010},
  pages = {1--8},
  publisher = {{ACM Press}},
  address = {{Paris, France}},
  doi = {10.1145/1811147.1811151},
  isbn = {978-1-60558-961-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EINESLHW\\Kindler - Model-based software engineering the challenges o.pdf}
}

@incollection{kindlerModellingLocalGlobal2012,
  title = {Modelling {{Local}} and {{Global Behaviour}}: {{Petri Nets}} and {{Event Coordination}}},
  shorttitle = {Modelling {{Local}} and {{Global Behaviour}}},
  booktitle = {Transactions on {{Petri Nets}} and {{Other Models}} of {{Concurrency VI}}},
  author = {Kindler, Ekkart},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Jensen, Kurt and {van der Aalst}, Wil M. and Ajmone Marsan, Marco and Franceschinis, Giuliana and Kleijn, Jetty and Kristensen, Lars Michael},
  year = {2012},
  volume = {7400},
  pages = {71--93},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-35179-2_4},
  isbn = {978-3-642-35178-5 978-3-642-35179-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3FIVSUNH\\Kindler - 2012 - Modelling Local and Global Behaviour Petri Nets a.pdf}
}

@misc{kitchenhamGuidelinesPerformingSystematic2007,
  title = {Guidelines for Performing Systematic Literature Reviews in Software Engineering},
  author = {Kitchenham, B. and Charters, S},
  year = {2007},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\J89PQ7SV\\Kitchenham og Charters - 2007 - Guidelines for performing systematic literature re.pdf}
}

@article{kitchenhamSystematicLiteratureReviews2009,
  title = {Systematic Literature Reviews in Software Engineering \textendash{} {{A}} Systematic Literature Review},
  author = {Kitchenham, Barbara and Pearl Brereton, O. and Budgen, David and Turner, Mark and Bailey, John and Linkman, Stephen},
  year = {2009},
  month = jan,
  journal = {Information and Software Technology},
  volume = {51},
  number = {1},
  pages = {7--15},
  issn = {09505849},
  doi = {10.1016/j.infsof.2008.09.009},
  abstract = {Background: In 2004 the concept of evidence-based software engineering (EBSE) was introduced at the ICSE04 conference. Aims: This study assesses the impact of systematic literature reviews (SLRs) which are the recommended EBSE method for aggregating evidence. Method: We used the standard systematic literature review method employing a manual search of 10 journals and 4 conference proceedings. Results: Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs addressed cost estimation. The quality of SLRs was fair with only three scoring less than 2 out of 4. Conclusions: Currently, the topic areas covered by SLRs are limited. European researchers, particularly those at the Simula Laboratory appear to be the leading exponents of systematic literature reviews. The series of cost estimation SLRs demonstrate the potential value of EBSE for synthesising evidence and making it available to practitioners.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XUFL5GLR\\Kitchenham et al. - 2009 - Systematic literature reviews in software engineer.pdf}
}

@inproceedings{klareCommonalitiesPreservingConsistency2019,
  title = {Commonalities for {{Preserving Consistency}} of {{Multiple Models}}},
  booktitle = {2019 {{ACM}}/{{IEEE}} 22nd {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems Companion}} ({{MODELS-C}})},
  author = {Klare, Heiko and Gleitze, Joshua},
  year = {2019},
  month = sep,
  pages = {371--378},
  publisher = {{IEEE}},
  address = {{Munich, Germany}},
  doi = {10.1109/MODELS-C.2019.00058},
  abstract = {Models are used to describe different properties of a software system. Those models often share information that is represented redundantly and, thus, has to be kept consistent. Defining model transformations between the involved metamodels is a common means to preserve the consistency of their instances. Such transformations specify the relations between instances of metamodels and how to enforce them. However, redundancies are often caused by different models containing representations of the same concept. We propose to make such common, duplicated concepts explicit instead of encoding them in transformations implicitly. We achieve this by defining an additional concept metamodel and the relations between it and the existing metamodels, which we call the Commonalities approach. We describe a language that allows to define both a concept metamodel and its relations to existing metamodels in one place, in order to achieve conciseness comparable to a direct transformation between the metamodels. Additionally, our approach allows hierarchical composition of concept metamodels to keep multiple models consistent. The expected benefits of our approach are an improved understandability of relations between metamodels by making the information about commonalities explicit, reduced errors in comparison to the combination of several transformations to keep multiple models consistent, and improved reusability because metamodels are not related directly, but only through concept metamodels.},
  isbn = {978-1-72815-125-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7T63S6TU\\Klare og Gleitze - 2019 - Commonalities for Preserving Consistency of Multip.pdf}
}

@misc{kluteHOWYOUCAN2017,
  title = {{{HOW YOU CAN MODEL YOUR SOFTWARE USING STATE MACHINES}}},
  author = {Klute, Rainer},
  year = {2017},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q5CFK6D2\\Whitepaper Statemachines EN.pdf}
}

@incollection{knappMultiviewConsistencyUML2018,
  title = {Multi-View {{Consistency}} in {{UML}}: {{A Survey}}},
  shorttitle = {Multi-View {{Consistency}} in {{UML}}},
  booktitle = {Graph {{Transformation}}, {{Specifications}}, and {{Nets}}},
  author = {Knapp, Alexander and Mossakowski, Till},
  editor = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2018},
  volume = {10800},
  pages = {37--60},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-75396-6_3},
  isbn = {978-3-319-75395-9 978-3-319-75396-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A7G48DGS\\Knapp og Mossakowski - 2018 - Multi-view Consistency in UML A Survey.pdf}
}

@inproceedings{kochGraphicalDebuggingDistributed2015,
  title = {Graphical Debugging of Distributed Applications - Using {{UML}} Object Diagrams to Visualize the State of Distributed Applications at Runtime},
  booktitle = {Proceedings of the 3rd International Conference on Model-Driven Engineering and Software Development},
  author = {Koch, Andreas and Z{\"u}ndorf, Albert},
  year = {2015},
  series = {{{MODELSWARD}} 2015},
  pages = {223--230},
  publisher = {{SCITEPRESS - Science and Technology Publications, Lda}},
  address = {{Setubal, PRT}},
  doi = {10.5220/0005233202230230},
  abstract = {While debugging is one of the most time consuming tasks software developers perform, the tool support, especially for distributed applications, is lacking according to many professional developers. The Visual Debugger is an approach to provide an easy-to-use tool which gives software developers an abstract view on the current state of their application in debugging sessions. While similar tools for non distributed applications already exist, the Visual Debugger addresses the more complex debugging scenarios in distributed applications. Therefore, several views with different levels of abstraction of the current state of an application are provided. Although the approach may be adapted to other object oriented programming languages, the current target of the Visual Debugger is languages running on the Java Virtual Machine with the focus on Java.},
  isbn = {978-989-758-083-3},
  keywords = {Debug,Distributed,Eclipse,Objectdiagram,Tool,UML2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\U8CIBU9Z\\2015 - Graphical Debugging of Distributed Applications - .pdf}
}

@article{kollingBlueJSystemIts2003,
  title = {The {{BlueJ}} System and Its Pedagogy},
  author = {K{\"o}lling, Michael and Quig, Bruce and Patterson, Andrew and {John Rosenberg}},
  year = {2003},
  journal = {Computer Science Education},
  volume = {13},
  number = {4},
  eprint = {https://doi.org/10.1076/csed.13.4.249.17496},
  pages = {249--268},
  publisher = {{Routledge}},
  doi = {10.1076/csed.13.4.249.17496},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RVNE37BM\\Kölling et al. - 2003 - The BlueJ system and its pedagogy.pdf}
}

@inproceedings{kollingObjectorientedProgramDevelopment1996,
  title = {An Object-Oriented Program Development Environment for the First Programming Course},
  booktitle = {Proceedings of the Twenty-Seventh {{SIGCSE}} Technical Symposium on Computer Science Education},
  author = {K{\"o}lling, Michael and Rosenberg, John},
  year = {1996},
  series = {{{SIGCSE}} '96},
  pages = {83--87},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/236452.236514},
  abstract = {Over the last ten years there has been a major shift in programming language design from procedural languages to object-oriented languages. Most universities have adopted an object-oriented language for their first programming course. However, far less consideration has been given to the program development environment. In this paper we argue that the environment is possibly more important than the language and existing environments fail to fully support the object-oriented paradigm. We describe a new program development environment and show how it has been specifically designed to support object-oriented design and programming.},
  isbn = {0-89791-757-X},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RIACM848\\Kölling og Rosenberg - 1996 - An object-oriented program development environment.pdf}
}

@inproceedings{kolovosDifferentModelsModel2009,
  title = {Different Models for Model Matching: {{An}} Analysis of Approaches to Support Model Differencing},
  shorttitle = {Different Models for Model Matching},
  booktitle = {2009 {{ICSE Workshop}} on {{Comparison}} and {{Versioning}} of {{Software Models}}},
  author = {Kolovos, Dimitrios S. and Di Ruscio, Davide and Pierantonio, Alfonso and Paige, Richard F.},
  year = {2009},
  month = may,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Vancouver, BC, Canada}},
  doi = {10.1109/CVSM.2009.5071714},
  abstract = {Calculating differences between models is an important and challenging task in Model Driven Engineering. Model differencing involves a number of steps starting with identifying matching model elements, calculating and representing their differences, and finally visualizing them in an appropriate way. In this paper, we provide an overview of the fundamental steps involved in the model differencing process and summarize the advantages and shortcomings of existing approaches for identifying matching model elements. To assist potential users in selecting one of the existing methods for the problem at stake, we investigate the trade-offs these methods impose in terms of accuracy and effort required to implement each one of them.},
  isbn = {978-1-4244-3714-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EJGIZ7ID\\Kolovos et al. - 2009 - Different models for model matching An analysis o.pdf}
}

@article{kongSpecifyingBehavioralSemantics2009,
  title = {Specifying Behavioral Semantics of {{UML}} Diagrams through Graph Transformations},
  author = {Kong, Jun and Zhang, Kang and Dong, Jing and Xu, Dianxiang},
  year = {2009},
  month = feb,
  journal = {Journal of Systems and Software},
  volume = {82},
  number = {2},
  pages = {292--306},
  issn = {01641212},
  doi = {10.1016/j.jss.2008.06.030},
  abstract = {The Unified Modeling Language (UML) has been widely accepted as a standard for modeling software systems from various perspectives. The intuitive notations of UML diagrams greatly improve the communication among developers. However, the lack of a formal semantics makes it difficult to automate analysis and verification. This paper offers a graphical yet formal approach to specifying the behavioral semantics of statechart diagrams using graph transformation techniques. It supports many advanced features of statecharts, such as composite states, firing priority, history, junction, and choice. In our approach, a graph grammar is derived automatically from a state machine to summarize the hierarchy of states. Based on the graph grammar, the execution of a set of non-conflict state transitions is interpreted by a sequence of graph transformations. This facilitates verifying a design model against system requirements. To demonstrate our approach, we present a case study on a toll-gate system.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4HPX888B\\Kong et al. - 2009 - Specifying behavioral semantics of UML diagrams th.pdf}
}

@article{konigDynamicChangeProcess2009,
  title = {Dynamic Change in Process Management Systems},
  author = {K{\"o}nig, Harald},
  year = {2009},
  month = aug,
  journal = {Forschungsberichet der FHDW Hannover},
  volume = {2009},
  pages = {1--20},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\N3M7LTWT\\König - 2009 - Dynamic change in process management systems.pdf}
}

@inproceedings{konigGraphRewritingSemantics2000,
  title = {A Graph Rewriting Semantics for the Polyadic Calculus},
  booktitle = {{{ICALP}} Workshops 2000, Proceedings of the Satelite Workshops of the 27th International Colloquium on Automata, Languages and Programming, Geneva, Switzerland, July 9-15, 2000},
  author = {K{\"o}nig, Barbara},
  editor = {Rolim, Jos{\'e} D. P. and Broder, Andrei Z. and Corradini, Andrea and Gorrieri, Roberto and Heckel, Reiko and Hromkovic, Juraj and Vaccaro, Ugo and Wells, J. B.},
  year = {2000},
  pages = {451--458},
  publisher = {{Carleton Scientific, Waterloo, Ontario, Canada}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/icalp/Konig00a.bib},
  timestamp = {Sat, 04 Apr 2020 17:15:23 +0200},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8EVCUTH2\\Ko - A Graph Rewriting Semantics for the Polyadic π-Cal.pdf}
}

@inproceedings{konigSinglePushoutRewriting2020,
  title = {Single {{Pushout Rewriting}} in {{Comprehensive Systems}}},
  booktitle = {Graph {{Transformation}}},
  author = {K{\"o}nig, Harald and St{\"u}nkel, Patrick},
  editor = {Gadducci, Fabio and Kehrer, Timo},
  year = {2020},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {91--108},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-51372-6_6},
  abstract = {The elegance of the single-pushout (SPO) approach to graph transformations arises from substituting total morphisms by partial ones in the underlying category. Thus, SPO's applicability depends on the durability of pushouts after this transition. There is a wide range of work on the question when pushouts exist in categories with partial morphisms starting with the pioneering work of L\"owe and Kennaway and ending with an essential characterisation in terms of an exactness property (for the interplay between pullbacks and pushouts) and an adjointness condition (w.r.t. inverse image functions) by Hayman and Heindel.Triple graphs and graph diagrams are frameworks to synchronize two or more updatable data sources by means of internal mappings, which identify common sub-structures. Comprehensive systems generalise these frameworks, treating the network of data sources and their structural inter-relations as a homogeneous comprehensive artifact, in which partial maps identify commonalities. Although this inherent partiality produces amplified complexity, Heindel's characterisation still yields cocompleteness of the category of comprehensive systems equipped with closed partial morphisms and thus enables computing by SPO graph transformation.},
  isbn = {978-3-030-51372-6},
  langid = {english},
  keywords = {Category theory,Comprehensive system,Hereditary pushout,Partial morphism,Single Pushout Rewriting,Upper adjoint},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EVXCVZI6\\König und Stünkel - 2020 - Single Pushout Rewriting in Comprehensive Systems.pdf}
}

@article{konigWellstructuredGraphTransformation2017,
  title = {Well-Structured Graph Transformation Systems},
  author = {K{\"o}nig, Barbara and St{\"u}ckrath, Jan},
  year = {2017},
  month = feb,
  journal = {Information and Computation},
  volume = {252},
  pages = {71--94},
  issn = {08905401},
  doi = {10.1016/j.ic.2016.03.005},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\43YB92T4\\König and Stückrath - 2017 - Well-structured graph transformation systems.pdf}
}

@article{kouznetsovaUsingBlueJBlackjack2007,
  title = {Using {{BlueJ}} and Blackjack to Teach Object-Oriented Design Concepts in {{CS1}}},
  author = {Kouznetsova, Svetlana},
  year = {2007},
  month = apr,
  journal = {J. Comput. Sci. Coll.},
  volume = {22},
  number = {4},
  pages = {49--55},
  publisher = {{Consortium for Computing Sciences in Colleges}},
  address = {{Evansville, IN, USA}},
  issn = {1937-4771},
  abstract = {This paper describes a sequence of Java programming assignments for the CS1 course which can be used to reinforce the basic concepts of object-oriented design in a logical, consistent way. By using the BlueJ environment, even programming novices are able to develop, over the course of four assignments, a working implementation of the card game Blackjack. Because the concepts are presented in the context of a fun and familiar application, the assignment increases their level of engagement. In addition, since students are allowed to discover for themselves the advantages of object-oriented design, they develop a better understanding of the material.},
  issue_date = {April 2007},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JTHLHS6S\\Kouznetsova - 2007 - USING BLUEJ AND BLACKJACK TO TEACH OBJECT- ORIENTE.pdf}
}

@inproceedings{krauterBehavioralConsistencyHeterogeneous2021,
  title = {Towards Behavioral Consistency in Heterogeneous Modeling Scenarios},
  booktitle = {2021 {{ACM}}/{{IEEE}} International Conference on Model Driven Engineering Languages and Systems Companion ({{MODELS-C}})},
  author = {Kr{\"a}uter, Tim},
  year = {2021},
  pages = {666--671},
  doi = {10.1109/MODELS-C53483.2021.00107},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\S5XWFGF6\\Kräuter - Towards Behavioral Consistency in Heterogeneous Mo.pdf}
}

@article{krauterBehavioralConsistencyMultimodeling2022,
  title = {Towards Behavioral Consistency in Multi-Modeling},
  author = {Kr{\"a}uter, Tim and K{\"o}nig, Harald and Rutle, Adrian and Lamo, Yngve and St{\"u}nkel, Patrick},
  year = {2022},
  journal = {Submitted for review to the 18th European Conference on Modelling Foundations and Applications},
  doi = {https://github.com/timKraeuter/ECMFA-2022},
  abstract = {Multiple interacting systems are needed to realize the requirements of complex domains. Describing the interactions between these systems and checking their global behavioral consistency is a general, well-known challenge in software engineering. To address this challenge, model-driven software engineering utilizes abstract representations of the constituting systems and their interactions, resulting in a multi-model representing the overall software. In such a multi-modeling setting, global consistency rules must be satisfied by a set of heterogeneously typed models to guarantee a desired global behavior. In this paper, we propose a novel approach for behavioral consistency management of heterogeneous multi-models. The approach introduces a workflow in which we (i) align the individual models and specify their interactions, (ii) generate a global execution semantics for the multi-model, and finally, (iii) define and check global properties which should be satisfied by the multi-model. Although our approach is independent of a particular formalism as an underlying global execution semantics, the current implementation utilizes graph transformations for this purpose.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5E7GN6Z8\\Kräuter et al. - Towards behavioral consistency in multi-modeling.pdf}
}

@article{krauterEntwicklungSemantikZur,
  title = {{Entwicklung einer Semantik zur Ausf\"uhrung von Produktionsabl\"aufen f\"ur das Produktionsmanagement in der POSY-OutputFactory der SET GmbH}},
  author = {Kr{\"a}uter, Tim},
  pages = {95},
  langid = {german},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z98838M6\\Kräuter - Entwicklung einer Semantik zur Ausführung von Prod.pdf}
}

@article{krauterHeterogeneousBehavioralModel,
  title = {Towards Heterogeneous Behavioral Model Composition},
  author = {Krauter, Tim and Rutle, Adrian and Lamo, Yngve},
  pages = {4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZBHUZ23A\\Krauter et al. - Towards heterogeneous behavioral model composition.pdf}
}

@article{krauterIntegratingBehavioralModels,
  title = {Integrating Behavioral Models into Multi Modelling},
  author = {Kr{\"a}uter, Tim},
  pages = {13},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KUD9FZX8\\Kräuter - Integrating behavioral models into multi modelling.pdf}
}

@article{krauterRoleDefectsPhotoconversion2022,
  title = {The Role of Defects in the Photoconversion of 2-Propanol on Rutile Titania: {{Operando}} Spectroscopy Combined with Elementary Studies},
  shorttitle = {The Role of Defects in the Photoconversion of 2-Propanol on Rutile Titania},
  author = {Kr{\"a}uter, Jessica and Franz, Evanie and Waidhas, Fabian and Brummel, Olaf and {J\"org Libuda} and {Al-Shamery}, Katharina},
  year = {2022},
  month = feb,
  journal = {Journal of Catalysis},
  volume = {406},
  pages = {134--144},
  issn = {00219517},
  doi = {10.1016/j.jcat.2021.12.025},
  abstract = {Previous studies on the reaction chemistry of 2-propanol at rutile powders in liquid phase as well as at TiO2(1 1 0) surfaces under UHV conditions, both with low reduction degree, exhibited that partial photo oxidation is observable in the presence of oxygen, however, with low yields. Here, we show that at highly reduced surfaces a partial photo oxidation of 2-propanol is not only possible in the presence of oxygen but also in coadsorption with water or even without coadsorbates below room temperature. Thermally, only the conversion towards propane and propene was observed at temperatures above 550 K. Liquid Phase experiments further showed that the coadsorbate influences the acetone yield of the partial photo oxidation. While in the presence of oxygen an increasing acetone conversion was observed, the acetone yield is reduced in the presence of water in accordance with the hypothesis of an active site blocking by water.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UYICXBNP\\Kräuter et al. - 2022 - The role of defects in the photoconversion of 2-pr.pdf}
}

@misc{krauterVisualDebuggerIntelliJ2022,
  title = {Visual {{Debugger IntelliJ Plugin Source}}},
  author = {Kr{\"a}uter, Tim},
  year = {2022},
  month = feb,
  abstract = {https://plugins.jetbrains.com/plugin/16851-visual-debugger},
  copyright = {GPL-3.0},
  howpublished = {https://github.com/timKraeuter/VisualDebugger}
}

@article{kuechlerTheoryDevelopmentDesign2008,
  title = {On Theory Development in Design Science Research: Anatomy of a Research Project},
  shorttitle = {On Theory Development in Design Science Research},
  author = {Kuechler, Bill and Vaishnavi, Vijay},
  year = {2008},
  month = oct,
  journal = {European Journal of Information Systems},
  volume = {17},
  number = {5},
  pages = {489--504},
  issn = {0960-085X, 1476-9344},
  doi = {10.1057/ejis.2008.40},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5NVZG7RX\\Kuechler og Vaishnavi - 2008 - On theory development in design science research .pdf}
}

@incollection{kuglerTemporalLogicScenarioBased2005,
  title = {Temporal {{Logic}} for {{Scenario-Based Specifications}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Kugler, Hillel and Harel, David and Pnueli, Amir and Lu, Yuan and Bontemps, Yves},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Halbwachs, Nicolas and Zuck, Lenore D.},
  year = {2005},
  volume = {3440},
  pages = {445--460},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-31980-1_29},
  abstract = {We provide semantics for the powerful scenario-based language of live sequence charts (LSCs). We show how the semantics of live sequence charts can be captured using temporal logic. This is done by studying various subsets of the LSC language and providing an explicit translation into temporal logic. We show how a kernel subset of the LSC language (which omits variables, for example) can be embedded within the temporal logic CTL{${_\ast}$}. For this kernel subset the embedding is a strict inclusion. We show that existential charts can be expressed using the branching temporal logic CTL while universal charts are in the intersection of linear temporal logic and branching temporal logic LTL {$\cap$} CTL. Since our translations are efficient, the work described here may be used in the development of tools for analyzing and executing scenario-based requirements and for verifying systems against such requirements.},
  isbn = {978-3-540-25333-4 978-3-540-31980-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FV3S4PU6\\Kugler et al. - 2005 - Temporal Logic for Scenario-Based Specifications.pdf}
}

@article{kuhneMattersMetaModeling2006,
  title = {Matters of ({{Meta-}}) {{Modeling}}},
  author = {K{\"u}hne, Thomas},
  year = {2006},
  month = nov,
  journal = {Software \& Systems Modeling},
  volume = {5},
  number = {4},
  pages = {369--385},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-006-0017-9},
  abstract = {With the recent trend to model driven engineering a common understanding of basic notions such as ``model'' and ``metamodel'' becomes a pivotal issue. Even though these notions have been in widespread use for quite a while, there is still little consensus about when exactly it is appropriate to use them. The aim of this article is to start establishing a consensus about generally acceptable terminology. Its main contributions are the distinction between two fundamentally different kinds of model roles, i.e. ``token model'' versus ``type model'' (The terms ``type'' and ``token'' have been introduced by C.S. Peirce, 1839\textendash 1914.), a formal notion of ``metaness'', and the consideration of ``generalization'' as yet another basic relationship between models. In particular, the recognition of the fundamental difference between the above mentioned two kinds of model roles is crucial in order to enable communication among the model driven engineering community that is free of both unnoticed misunderstandings and unnecessary disagreement.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\V9KEYN4X\\Kühne - 2006 - Matters of (Meta-) Modeling.pdf}
}

@book{kunzeBehaviouralModelsModelling2016,
  title = {Behavioural Models: From Modelling Finite Automata to Analysing Business Processes},
  shorttitle = {Behavioural Models},
  author = {Kunze, Matthias and Weske, Mathias},
  year = {2016},
  publisher = {{Springer}},
  address = {{Cham}},
  isbn = {978-3-319-44960-9 978-3-319-44958-6},
  langid = {english},
  annotation = {OCLC: 964659270},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5QQNY8MI\\Kunze und Weske - 2016 - Behavioural models from modelling finite automata.pdf;C\:\\Users\\Tim\\Zotero\\storage\\EZ3LDG4Z\\bsim.pdf}
}

@inproceedings{kuskeFormalSemanticsUML2001,
  title = {A Formal Semantics of {{UML}} State Machines Based on Structured Graph Transformation},
  booktitle = {{$\ll$}{{UML}}{$\gg$} 2001 \textemdash{} {{The}} Unified Modeling Language. {{Modeling}} Languages, Concepts, and Tools},
  author = {Kuske, Sabine},
  editor = {Gogolla, Martin and Kobryn, Cris},
  year = {2001},
  pages = {241--256},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML state machines are quite popular and useful to specify dynamic components of software systems. They have a formal static semantics but their execution semantics is described only informally. Graph transformation, on the other hand, constitutes a well-studied area with many theoretical results and practical application domains. In this paper, an operational semantics for a subset of UML state machines is proposed which is based on graph transformation. In more detail, a UML state machine is described as a structured graph transformation system in such a way that the wellformedness rules of UML state machines are satisfied and the firing of a (maximum) set of enabled non-conflicting transitions corresponds to the application of a graph transformation rule. The presented approach uses the concept of transformation units, a recently developed modularization concept for graph transformation systems.},
  isbn = {978-3-540-45441-0},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HVMJWH28\\2001_Book_UML2001TheUnifiedModelingLangu-255-270.pdf}
}

@article{kuskeIntegratedGraphbasedSemantics2009,
  title = {Towards an Integrated Graph-Based Semantics for {{UML}}},
  author = {Kuske, Sabine and Gogolla, Martin and Kreowski, Hans-J{\"o}rg and Ziemann, Paul},
  year = {2009},
  month = jul,
  journal = {Software \& Systems Modeling},
  volume = {8},
  number = {3},
  pages = {403--422},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-008-0101-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\N4HYQL2R\\Kuske et al. - 2009 - Towards an integrated graph-based semantics for UM.pdf}
}

@incollection{kusterConsistencyManagementModelBased2004,
  title = {Consistency {{Management}} within {{Model-Based Object-Oriented Development}} of {{Components}}},
  booktitle = {Formal {{Methods}} for {{Components}} and {{Objects}}},
  author = {K{\"u}ster, Jochen M. and Engels, Gregor},
  editor = {{de Boer}, Frank S. and Bonsangue, Marcello M. and Graf, Susanne and {de Roever}, Willem-Paul},
  year = {2004},
  volume = {3188},
  pages = {157--176},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-30101-1_7},
  abstract = {The Unified Modeling Language (UML) favors the construction of models composed of several submodels, modeling the system components under development at different levels of abstraction and from different viewpoints. Currently, consistency of object-oriented models expressed in the UML is not defined in the UML language specification. This allows the construction of inconsistent UML models. Defining consistency of UML models is complicated by the fact that UML models are applied differently, depending on the application domain and development process. As a consequence, a form of consistency management is required that allows the software engineer to define, establish and manage consistency, tailored specifically to the development context. In recent years, we have developed a general methodology and tool support to overcome this problem. The methodology is based on a thorough study of the notion of consistency and has led to a generic definition of the notion of consistency. Our methodology itself aims at a step-wise systematic construction of a consistency management process, by providing a number of activities to be performed by the software engineer. It is complemented by a tool called Consistency Workbench which supports the software engineer in performing the methodology. In this paper, we provide an overview and summary of our approach.},
  isbn = {978-3-540-22942-1 978-3-540-30101-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SMHVE6GT\\Küster og Engels - 2004 - Consistency Management within Model-Based Object-O.pdf}
}

@inproceedings{kusterExplicitBehavioralConsistency2003,
  title = {Towards Explicit Behavioral Consistency Concepts in the {{UML}}},
  booktitle = {Proceedings of 2nd {{ICSE}} Workshop on Scenarios and State Machines: {{Models}}, Algorithms, and Tools (Portland, {{USA}})},
  author = {K{\"u}ster, Jochen and Stehr, Jan},
  year = {2003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GR6DV8XA\\Kuster and Stehr - Towards Explicit Behavioral Consistency Concepts i.pdf}
}

@article{kusterInconsistencyHandlingObjectOriented2004,
  title = {Towards {{Inconsistency Handling}} of {{Object-Oriented Behavioral Models}}},
  author = {K{\"u}ster, Jochen M.},
  year = {2004},
  month = dec,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {109},
  pages = {57--69},
  issn = {15710661},
  doi = {10.1016/j.entcs.2004.02.056},
  abstract = {With the Unified Modeling Language being used in diverse contexts, the ability of defining and checking customized consistency conditions is of increasing importance. Often, consistency checks rely on existing formal analysis tools such as model checkers and require the translation of models into input languages of these tools.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YUZM45IE\\Küster - 2004 - Towards Inconsistency Handling of Object-Oriented .pdf}
}

@incollection{kwantesComplianceVerificationGlobal2015,
  title = {Towards {{Compliance Verification Between Global}} and {{Local Process Models}}},
  booktitle = {Graph {{Transformation}}},
  author = {Kwantes, Pieter M. and Van Gorp, Pieter and Kleijn, Jetty and Rensink, Arend},
  editor = {{Parisi-Presicce}, Francesco and Westfechtel, Bernhard},
  year = {2015},
  volume = {9151},
  pages = {221--236},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21145-9_14},
  isbn = {978-3-319-21144-2 978-3-319-21145-9},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XLXCZ5RT\\Kwantes et al. - 2015 - Towards Compliance Verification Between Global and.pdf}
}

@incollection{lamConsistencyCheckingSequence2005,
  title = {Consistency {{Checking}} of {{Sequence Diagrams}} and {{Statechart Diagrams Using}} the {$\pi$}-{{Calculus}}},
  booktitle = {Integrated {{Formal Methods}}},
  author = {Lam, Vitus S. W. and Padget, Julian},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Romijn, Judi and Smith, Graeme and {van de Pol}, Jaco},
  year = {2005},
  volume = {3771},
  pages = {347--365},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11589976_20},
  abstract = {UML 2.0, like UML 1.x, provides only a set of notations for specifying different aspects of a system. The problem of checking consistency between various types of models in software development is still not fully addressed. In this paper, we suggest the use of an algebraic approach for verifying whether consistency between sequence diagrams and statechart diagrams is preserved. First, statechart diagrams are encoded in the {$\pi$}-calculus. Then, each object in a sequence diagram is translated into its equivalent {$\pi$}-calculus definitions and verified against the corresponding statechart diagram represented in the {$\pi$}-calculus using the Mobility Workbench. The applicability of the proposed approach is illustrated with an agent-based payment protocol.},
  isbn = {978-3-540-30492-0 978-3-540-32240-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A79FVKZN\\Lam og Padget - 2005 - Consistency Checking of Sequence Diagrams and Stat.pdf}
}

@inproceedings{larsenModeldrivenBasedEnvironment2015,
  title = {A Model-Driven Based Environment for Automatic Model Coordination},
  author = {Larsen, M.E.V. and DeAntoni, J. and Combemale, B. and Mallet, F.},
  year = {2015},
  series = {{{CEUR Workshop Proceedings}}},
  volume = {1554},
  pages = {44--47},
  document_type = {Conference Paper},
  source = {Scopus},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SVFGIA3D\\Larsen et al. - A Model-Driven Based Environment for Automatic Mod.pdf}
}

@article{leblebiciInterModelConsistencyChecking,
  title = {Inter-{{Model Consistency Checking}} and {{Restoration}} with {{Triple Graph Grammars}}},
  author = {Leblebici, Erhan},
  pages = {185},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3M3KK74J\\Leblebici - Inter-Model Consistency Checking and Restoration w.pdf;C\:\\Users\\Tim\\Zotero\\storage\\EAQNNBT9\\TGG.pdf}
}

@article{ledecziComposingDomainspecificDesign2001,
  title = {Composing Domain-Specific Design Environments},
  author = {Ledeczi, A. and Bakay, A. and Maroti, M. and Volgyesi, P. and Nordstrom, G. and Sprinkle, J. and Karsai, G.},
  year = {Nov./2001},
  journal = {Computer},
  volume = {34},
  number = {11},
  pages = {44--51},
  issn = {00189162},
  doi = {10.1109/2.963443},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IL8DENZC\\Ledeczi et al. - 2001 - Composing domain-specific design environments.pdf}
}

@inproceedings{leeDisciplinedHeterogeneousModeling2010,
  title = {Disciplined Heterogeneous Modeling},
  booktitle = {Proceedings of the 13th International Conference on Model Driven Engineering Languages and Systems: {{Part II}}},
  author = {Lee, Edward A.},
  year = {2010},
  series = {{{MODELS}}'10},
  pages = {273--287},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  abstract = {Complex systems demand diversity in the modeling mechanisms. One way to deal with a diversity of requirements is to create flexible modeling frameworks that can be adapted to cover the field of interest. The downside of this approach is a weakening of the semantics of the modeling frameworks that compromises interoperability, understandability, and analyzability of the models. An alternative approach is to embrace heterogeneity and to provide mechanisms for a diversity of models to interact. This paper reviews an approach that achieves such interaction between diverse models using an abstract semantics, which is a deliberately incomplete semantics that cannot by itself define a useful modeling framework. It instead focuses on the interactions between diverse models, reducing the nature of those interactions to a minimum that achieves a well-defined composition. An example of such an abstract semantics is the actor semantics, which can handle many heterogeneous models that are built today, and some that are not common today. The actor abstract semantics and many concrete semantics have been implemented in Ptolemy II, an open-source software framework distributed under a BSD-style license.},
  isbn = {3-642-16128-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\R7H8D7NY\\Lee - 2010 - Disciplined heterogeneous modeling.pdf}
}

@article{liCompositionAADLComponents2013,
  title = {Composition of {{AADL}} Components by Transformation to Interface Automata},
  author = {Li, J. and Zhao, J. and Sun, Q. and Huang, X. and Zhang, Y. and Zhang, T.},
  year = {2013},
  journal = {Communications in Computer and Information Science},
  volume = {320},
  pages = {522--529},
  doi = {10.1007/978-3-642-35795-4_66},
  document_type = {Conference Paper},
  source = {Scopus},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PKSN9JLR\\Li et al. - 2013 - Composition of AADL components by transformation t.pdf}
}

@article{linDSMDiffDifferentiationTool2007,
  title = {{{DSMDiff}}: A Differentiation Tool for Domain-Specific Models},
  shorttitle = {{{DSMDiff}}},
  author = {Lin, Yuehua and Gray, Jeff and Jouault, Fr{\'e}d{\'e}ric},
  year = {2007},
  month = aug,
  journal = {European Journal of Information Systems},
  volume = {16},
  number = {4},
  pages = {349--361},
  issn = {0960-085X, 1476-9344},
  doi = {10.1057/palgrave.ejis.3000685},
  abstract = {Model differentiation techniques, which provide the capability to identify mappings and differences between models, are essential to many model development and management practices. There has been initial research toward model differentiation applied to UML diagrams, but differentiation of domain-specific models has not been explored deeply in the modeling community. Traditional modeling practice using the UML relies on a single fixed generalpurpose language (i.e., all UML diagrams conform to a single metamodel). In contrast, DomainSpecific Modeling (DSM) is an emerging model-driven paradigm in which multiple metamodels are used to define various modeling languages that represent the key concepts and abstractions for particular domains. Therefore, domain-specific models may conform to various metamodels, which requires model differentiation algorithms be metamodel-independent and able to apply to multiple domain-specific modeling languages. This paper presents metamodel-independent algorithms and associated tools for detecting mappings and differences between domain-specific models, with facilities for graphical visualization of the detected differences.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YGMQZIAD\\Lin et al. - 2007 - DSMDiff a differentiation tool for domain-specifi.pdf}
}

@inproceedings{liuFormalSemanticsComplete2013,
  title = {A Formal Semantics for Complete {{UML}} State Machines with Communications},
  booktitle = {Integrated Formal Methods},
  author = {Liu, Shuang and Liu, Yang and Andr{\'e}, {\'E}tienne and Choppy, Christine and Sun, Jun and Wadhwa, Bimlesh and Dong, Jin Song},
  editor = {Johnsen, Einar Broch and Petre, Luigia},
  year = {2013},
  pages = {331--346},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML is a widely used notation, and formalizing its semantics is an important issue. Here, we concentrate on formalizing UML state machines, used to express the dynamic behaviour of software systems. We propose a formal operational semantics covering all features of the latest version (2.4.1) of UML state machines specification. We use labelled transition systems as the semantic model, so as to use automatic verification techniques like model checking. Furthermore, our proposed semantics includes synchronous and asynchronous communications between state machines. We implement our approach in USM2C, a model checker supporting editing, simulation and automatic verification of UML state machines. Experiments show the effectiveness of our approach.},
  isbn = {978-3-642-38613-8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BBCQ4MLT\\Liu et al. - 2013 - A formal semantics for complete UML state machines.pdf}
}

@inproceedings{lohrJANJavaAnimation2003,
  title = {{{JAN}} - {{Java}} Animation for Program Understanding},
  booktitle = {{{IEEE Symposium}} on {{Human Centric Computing Languages}} and {{Environments}}, 2003. {{Proceedings}}. 2003},
  author = {Lohr, K.-P. and Vratislavsky, A.},
  year = {2003},
  pages = {67--75},
  publisher = {{IEEE}},
  address = {{Auckland, New Zealand}},
  doi = {10.1109/HCC.2003.1260205},
  abstract = {JAN is a system for aniniated execution of Java programs. Its application area is program understanding rather than debugging. To this end, the aniniation can be customired, both by annotating the code with visua1i:ation directives and by interactively adapting the visiial appearance to the user's personal taste. Object diagrams and sequence diagranis are supported. Scalability is achieved by recogniring object composition: object aggregates are displayed in a nested farhion; mechanism for collapsing and exploding aggregates are provided. JAN has been applied to itseK producing an animation of its visualization back-end.},
  isbn = {978-0-7803-8225-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UU5VTSJT\\Lohr og Vratislavsky - 2003 - JAN - Java animation for program understanding.pdf}
}

@article{loweAlgebraicApproachSinglepushout1993,
  title = {Algebraic Approach to Single-Pushout Graph Transformation},
  author = {L{\"o}we, Michael},
  year = {1993},
  month = mar,
  journal = {Theoretical Computer Science},
  volume = {109},
  number = {1-2},
  pages = {181--224},
  issn = {03043975},
  doi = {10.1016/0304-3975(93)90068-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IYC2SQ79\\Löwe - 1993 - Algebraic approach to single-pushout graph transfo.pdf}
}

@article{loweAlgebraicGraphTransformations2015,
  title = {Algebraic Graph Transformations with Inheritance and Abstraction},
  author = {L{\"o}we, Michael and K{\"o}nig, Harald and Schulz, Christoph and Schultchen, Marius},
  year = {2015},
  month = sep,
  journal = {Science of Computer Programming},
  volume = {107--108},
  pages = {2--18},
  issn = {01676423},
  doi = {10.1016/j.scico.2015.02.004},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ATBS6VS6\\Löwe et al. - 2015 - Algebraic graph transformations with inheritance a.pdf}
}

@article{loweRefactoringInformationSystems2011,
  title = {Refactoring Information Systems: Association Folding and Unfolding},
  shorttitle = {Refactoring Information Systems},
  author = {L{\"o}we, Michael},
  year = {2011},
  month = aug,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {36},
  number = {4},
  pages = {1--7},
  issn = {0163-5948},
  doi = {10.1145/1988997.1989011},
  abstract = {In a former paper [14], we introduced a mechanism for objectoriented model evolution with automatic instance migration: Models are just graphs, typed instances (i. e. object worlds) are modelled as comma categories 'under' these models, and the evolution/migration mechanism is formalised by functors between these comma categories. In this paper, we carefully revise the mechanism: We characterise refactorings as model evolutions the induced migrations of which do not change the information contained in any conforming object world. And we carefully review, adapt, and correct model evolutions and instance migrations presented in [14] so that they become real and practical applicable refactorings in the precise sense introduced here.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SYNNH3KJ\\Löwe - REFACTORING INFORMATION SYSTEMS.pdf}
}

@article{loweRefactoringInformationSystems2019,
  title = {Refactoring {{Information Systems}} - {{Association Folding}} and {{Unfolding Revisited}}},
  author = {L{\"o}we, Michael},
  year = {2019},
  month = nov,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IJQB5QUA\\Löwe - 2011 - Refactoring information systems association foldi.pdf}
}

@article{lucasSystematicReviewUML2009,
  title = {A Systematic Review of {{UML}} Model Consistency Management},
  author = {Lucas, Francisco J. and Molina, Fernando and Toval, Ambrosio},
  year = {2009},
  month = dec,
  journal = {Information and Software Technology},
  volume = {51},
  number = {12},
  pages = {1631--1645},
  issn = {09505849},
  doi = {10.1016/j.infsof.2009.04.009},
  abstract = {Information System (IS) development has been beset by consistency problems since its infancy. These problems are greater still in UML software development, and are principally caused by the existence of multiple views (models) for the same system, and may involve potentially contradictory system specifications. Since a considerable amount of work takes place within the scope of model consistency management, this paper presents a systematic literature review (SLR) which was carried out to discover the various current model consistency conceptions, proposals, problems and solutions provided. To do this, a total of 907 papers related to UML model consistency published in literature and extracted from the most relevant scientific sources (IEEE Computer Society, ACM Digital Library, Google Scholar, ScienceDirect, and the SCOPUS Database) were considered, of which 42 papers were eventually analyzed. This systematic literature review resulted in the identification of the current state-of-the-art with regard to UML model consistency management research along with open issues, trends and future research within this scope. A formal approach for the handling of inconsistency problems which fulfils the identified limitations is also briefly presented.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\T2BG9Y7N\\Lucas et al. - 2009 - A systematic review of UML model consistency manag.pdf}
}

@article{luReprogrammingRecoverYouthful2020,
  title = {Reprogramming to Recover Youthful Epigenetic Information and Restore Vision},
  author = {Lu, Yuancheng and Brommer, Benedikt and Tian, Xiao and Krishnan, Anitha and Meer, Margarita and Wang, Chen and Vera, Daniel L. and Zeng, Qiurui and Yu, Doudou and Bonkowski, Michael S. and Yang, Jae-Hyun and Zhou, Songlin and Hoffmann, Emma M. and Karg, Margarete M. and Schultz, Michael B. and Kane, Alice E. and Davidsohn, Noah and Korobkina, Ekaterina and Chwalek, Karolina and Rajman, Luis A. and Church, George M. and Hochedlinger, Konrad and Gladyshev, Vadim N. and Horvath, Steve and Levine, Morgan E. and {Gregory-Ksander}, Meredith S. and Ksander, Bruce R. and He, Zhigang and Sinclair, David A.},
  year = {2020},
  month = dec,
  journal = {Nature},
  volume = {588},
  number = {7836},
  pages = {124--129},
  publisher = {{Nature Publishing Group}},
  issn = {1476-4687},
  doi = {10.1038/s41586-020-2975-4},
  abstract = {Ageing is a degenerative process that leads to tissue dysfunction and death. A proposed cause of ageing is the accumulation of epigenetic noise that disrupts gene expression patterns, leading to decreases in tissue function and regenerative capacity1\textendash 3. Changes to DNA methylation patterns over time form the basis of ageing clocks4, but whether older individuals retain the\&nbsp;information needed\&nbsp;to restore these patterns\textemdash and, if so, whether this could improve tissue function\textemdash is not known. Over time, the central nervous system (CNS) loses function and regenerative capacity5\textendash 7. Using the eye as a model CNS tissue, here we show that ectopic expression of Oct4 (also known as Pou5f1), Sox2 and Klf4 genes (OSK) in mouse retinal ganglion cells restores youthful DNA methylation patterns and transcriptomes, promotes axon regeneration after injury, and reverses vision loss in a mouse model of glaucoma and in aged mice. The beneficial effects of OSK-induced reprogramming in axon regeneration and vision require the DNA demethylases TET1 and TET2. These data indicate that mammalian tissues retain a record of youthful epigenetic information\textemdash encoded in part by DNA methylation\textemdash that can be accessed to improve tissue function and promote regeneration in vivo. Expression of three Yamanaka transcription factors in mouse retinal ganglion cells restores youthful DNA methylation patterns, promotes axon regeneration after injury, and reverses vision loss in a mouse model of glaucoma and in aged mice, suggesting that mammalian tissues retain a record of youthful epigenetic information that can be accessed to improve tissue function.},
  copyright = {2020 The Author(s), under exclusive licence to Springer Nature Limited},
  langid = {english},
  keywords = {Ageing,DNA methylation,Regeneration and repair in the nervous system,Reprogramming,Retina},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KYLM3GPR\\Lu et al. - 2020 - Reprogramming to recover youthful epigenetic infor.pdf}
}

@article{macedoComposingLeastchangeLenses2013,
  title = {Composing {{Least-change Lenses}}},
  author = {Macedo, Nuno and Pacheco, Hugo and Cunha, Alcino and Oliveira, Jos{\'e} Nuno},
  year = {2013},
  month = sep,
  journal = {Electronic Communications of the EASST},
  pages = {Volume 57: Bidirectional Transformations 2013},
  publisher = {{European Association of Software Science and Technology}},
  doi = {10.14279/TUJ.ECEASST.57.868},
  abstract = {Non-trivial bidirectional transformations (BXs) are inherently ambiguous, as there are in general many different ways to consistently translate an update from one side to the other. Existing BX languages and frameworks typically satisfy fundamental first principles which ensure acceptable and stable (well-behaved) translation. Unfortunately, these give little insight about how a particular update translation is chosen among the myriad possible. From the user perspective, such unpredictability may hinder the adoption of BX frameworks.    The problem can be remedied by imposing a ``principle of least change'' which, in a state-based framework, amounts to translating each update in a way such that its result is as close as possible to the original state, according to some distance measure.    Starting by formalizing such BXs focusing on the particular framework of lenses, this paper discusses whether such least-change lenses can be defined by composition, an essential construct of BX frameworks. For sequential composition, two (dual) update translation alternatives are presented: a classical deterministic one and a nondeterministic. A key ingredient of the approach is the elegant formalization of the main concepts in relation algebra, which exposes several similarities and dualities.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\C535TRHM\\Macedo et al. - 2013 - Composing Least-change Lenses.pdf}
}

@article{macedoFeatureBasedClassificationModel2017,
  title = {A {{Feature-Based Classification}} of {{Model Repair Approaches}}},
  author = {Macedo, Nuno and Jorge, Tiago and Cunha, Alcino},
  year = {2017},
  month = jul,
  journal = {IEEE Transactions on Software Engineering},
  volume = {43},
  number = {7},
  pages = {615--640},
  issn = {0098-5589, 1939-3520},
  doi = {10.1109/TSE.2016.2620145},
  abstract = {Consistency management, the ability to detect, diagnose and handle inconsistencies, is crucial during the development process in Model-driven Engineering (MDE). As the popularity and application scenarios of MDE expanded, a variety of different techniques were proposed to address these tasks in specific contexts. Of the various stages of consistency management, this work focuses on inconsistency handling in MDE, particularly in model repair techniques. This paper proposes a feature-based classification system for model repair techniques, based on an systematic literature review of the area. We expect this work to assist developers and researchers from different disciplines in comparing their work under a unifying framework, and aid MDE practitioners in selecting suitable model repair approaches.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VQ67KNRG\\Macedo et al. - 2017 - A Feature-Based Classification of Model Repair App.pdf}
}

@inproceedings{macedoModelRepairTransformation2013,
  title = {Model Repair and Transformation with {{Echo}}},
  booktitle = {2013 28th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  author = {Macedo, Nuno and Guimaraes, Tiago and Cunha, Alcino},
  year = {2013},
  month = nov,
  pages = {694--697},
  publisher = {{IEEE}},
  address = {{Silicon Valley, CA, USA}},
  doi = {10.1109/ASE.2013.6693135},
  isbn = {978-1-4799-0215-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3JMUVKMP\\Macedo et al. - 2013 - Model repair and transformation with Echo.pdf}
}

@article{macedoRelationalApproachBidirectional,
  title = {A {{Relational Approach}} to {{Bidirectional Transformation}}},
  author = {Macedo, Nuno},
  pages = {265},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TSHHN7ZL\\Macedo - A Relational Approach to Bidirectional Transformat.pdf}
}

@article{machadoRulebasedTransformationGraph2015,
  title = {Rule-Based Transformation of Graph Rewriting Rules: {{Towards}} Higher-Order Graph Grammars},
  shorttitle = {Rule-Based Transformation of Graph Rewriting Rules},
  author = {Machado, Rodrigo and Ribeiro, Leila and Heckel, Reiko},
  year = {2015},
  month = aug,
  journal = {Theoretical Computer Science},
  volume = {594},
  pages = {1--23},
  issn = {03043975},
  doi = {10.1016/j.tcs.2015.01.034},
  abstract = {Higher-order functions \textendash{} the ones which manipulate other functions \textendash{} have a fundamental role in Computer Science, specially in areas such as functional programming and theory of computation. Graph transformation \textendash{} the rule-based modification of graphs \textendash{} is also an important approach used in many contexts, as for instance, the definition of syntax and semantics of visual languages and the modelling and analysis of concurrent and non-deterministic systems. Although the algebraic double-pushout (DPO) approach to graph transformation has a vast theory, it does not present a notion of higher-order transformation, i.e., transformation of graph rewriting rules themselves. Higher-order would be required, for instance, to ease the modelling of dynamic systems through graph transformation systems, and to describe model transformations that modify graph rewriting rules. The main contribution of this work is a notion of double-pushout transformation for graph rewriting rules, where the result of the rewriting is a valid graph rule. We use DPO diagrams in the category of graph spans to describe rule transformations, and negative application conditions (NACs) in the second-order rules to enforce preservation of the rule structure. We define a model named second-order graph grammars, capable of first- and secondorder derivations. Finally, we discuss alternative ways of defining second-order transformations.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZDFQ9MRS\\Machado et al. - 2015 - Rule-based transformation of graph rewriting rules.pdf}
}

@article{maciasMultilevelCoupledModel2019,
  title = {Multilevel Coupled Model Transformations for Precise and Reusable Definition of Model Behaviour},
  author = {Mac{\'i}as, Fernando and Wolter, Uwe and Rutle, Adrian and Dur{\'a}n, Francisco and {Rodriguez-Echeverria}, Roberto},
  year = {2019},
  month = aug,
  journal = {Journal of Logical and Algebraic Methods in Programming},
  volume = {106},
  pages = {167--195},
  issn = {23522208},
  doi = {10.1016/j.jlamp.2018.12.005},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\STTGDS23\\Macıas et al. - Multilevel Coupled Model Transformations for Preci.pdf}
}

@phdthesis{maciasMultilevelModellingDomainSpecific2019,
  title = {Multilevel {{Modelling}} and {{Domain-Specific Languages}}},
  author = {Mac{\'i}as, Fernando},
  year = {2019},
  langid = {english},
  school = {University of Oslo},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NFBJIQIF\\Macías - Multilevel Modelling and Domain-Specific Languages.pdf}
}

@book{maclaneCategoriesWorkingMathematician1998,
  title = {Categories for the Working Mathematician},
  author = {MacLane, Saunders},
  year = {1998},
  publisher = {{Springer-Verlag}},
  address = {{New York}},
  keywords = {CategoryTheory},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZBQYTSEQ\\Mac Lane - Categories for the Working Mathematician.pdf}
}

@article{marchDesignNaturalScience1995,
  title = {Design and Natural Science Research on Information Technology},
  author = {March, Salvatore T. and Smith, Gerald F.},
  year = {1995},
  journal = {Decision Support Systems},
  volume = {15},
  number = {4},
  pages = {251--266},
  issn = {0167-9236},
  doi = {10.1016/0167-9236(94)00041-2},
  abstract = {Research in IT must address the design tasks faced by practitioners. Real problems must be properly conceptualized and represented, appropriate techniques for their solution must be constructed, and solutions must be implemented and evaluated using appropriate criteria. If significant progress is to be made, IT research must also develop an understanding of how and why IT systems work or do not work. Such an understanding must tie together natural laws governing IT systems with natural laws governing the environments in which they operate. This paper presents a two dimensional framework for research in information technology. The first dimension is based on broad types of design and natural science research activities: build, evaluate, theorize, and justify. The second dimension is based on broad types of outputs produced by design research: representational constructs, models, methods, and instantiations. We argue that both design science and natural science activities are needed to insure that IT research is both relevant and effective.},
  keywords = {Design science,Information system research,Information technology,Natural science},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E7E3XWD8\\March og Smith - 1995 - Design and natural science research on information.pdf}
}

@inproceedings{mateescuQuantifyingParallelismBPMN2014,
  title = {Quantifying the Parallelism in {{BPMN}} Processes Using Model Checking},
  booktitle = {Proceedings of the 17th International {{ACM Sigsoft}} Symposium on {{Component-based}} Software Engineering - {{CBSE}} '14},
  author = {Mateescu, Radu and Sala{\"u}n, Gwen and Ye, Lina},
  year = {2014},
  pages = {159--168},
  publisher = {{ACM Press}},
  address = {{Marcq-en-Bareul, France}},
  doi = {10.1145/2602458.2602473},
  abstract = {A business process is a set of structured, related activities that aims at fulfilling a specific organizational goal for a customer or market. An important metric when developing a business process is its degree of parallelism, i.e., the maximum number of tasks that are executable in parallel in that process. The degree of parallelism determines the peak demand on tasks, providing a valuable guide for the problem of resource allocation in business processes. In this paper, we investigate how to automatically measure the degree of parallelism for business processes, described using the BPMN standard notation. We first present a formal model for BPMN processes in terms of Labelled Transition Systems, which are obtained through process algebra encodings. We then propose an approach for automatically computing the degree of parallelism by using model checking techniques and dichotomic search. We implemented a tool for automating this check and we applied it successfully to more than one hundred BPMN processes.},
  isbn = {978-1-4503-2577-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FBTV6T7B\\Mateescu et al. - 2014 - Quantifying the parallelism in BPMN processes usin.pdf}
}

@inproceedings{mcneilePrincipleComprehensiveModelling2014,
  title = {The {{Principle}} of {{Comprehensive Modelling Applied}} to {{Data}} and {{Behaviour}}},
  booktitle = {Proceedings of the 2014 {{Workshop}} on {{Behaviour Modelling-Foundations}} and {{Applications}} - {{BM-FA}} '14},
  author = {McNeile, Ashley},
  year = {2014},
  pages = {1--5},
  publisher = {{ACM Press}},
  address = {{York, United Kingdom}},
  doi = {10.1145/2630768.2630773},
  isbn = {978-1-4503-2791-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\24VMYLP6\\McNeile - The Principle of Comprehensive Modelling Applied t.pdf}
}

@article{mendez-acunaLeveragingSoftwareProduct2016,
  title = {Leveraging {{Software Product Lines Engineering}} in the Development of External {{DSLs}}: {{A}} Systematic Literature Review},
  shorttitle = {Leveraging {{Software Product Lines Engineering}} in the Development of External {{DSLs}}},
  author = {{M{\'e}ndez-Acu{\~n}a}, David and Galindo, Jos{\'e} A. and Degueule, Thomas and Combemale, Beno{\^i}t and Baudry, Beno{\^i}t},
  year = {2016},
  month = nov,
  journal = {Computer Languages, Systems \& Structures},
  volume = {46},
  pages = {206--235},
  issn = {14778424},
  doi = {10.1016/j.cl.2016.09.004},
  abstract = {The use of domain-specific languages (DSLs) has become a successful technique in the development of complex systems. Consequently, nowadays we can find a large variety of DSLs for diverse purposes. However, not all these DSLs are completely different; many of them share certain commonalities coming from similar modeling patterns \textendash{} such as state machines or petri nets \textendash{} used for several purposes. In this scenario, the challenge for language designers is to take advantage of the commonalities existing among similar DSLs by reusing, as much as possible, formerly defined language constructs. The objective is to leverage previous engineering efforts to minimize implementation from scratch. To this end, recent research in software language engineering proposes the use of product line engineering, thus introducing the notion of language product lines. Nowadays, there are several approaches that result useful in the construction of language product lines. In this article, we report on an effort for organizing the literature on language product line engineering. More precisely, we propose a definition for the life-cycle of language product lines, and we use it to analyze the capabilities of current approaches. In addition, we provide a mapping between each approach and the technological space it supports.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XUAPDD28\\Méndez-Acuña et al. - 2016 - Leveraging Software Product Lines Engineering in t.pdf}
}

@inproceedings{mengCoalgebraicSemanticFramework2008,
  title = {A {{Coalgebraic Semantic Framework}} for {{Reasoning}} about {{UML Sequence Diagrams}}},
  booktitle = {2008 {{The Eighth International Conference}} on {{Quality Software}}},
  author = {Meng, Sun and Barbosa, Lu{\'i}s S.},
  year = {2008},
  month = aug,
  pages = {17--26},
  publisher = {{IEEE}},
  address = {{Oxford, United Kingdom}},
  doi = {10.1109/QSIC.2008.13},
  abstract = {If, as a well-known aphorism states, modelling is for reasoning , this paper is an attempt to define and apply a formal semantics to UML sequence diagrams in order to enable rigourous reasoning about them. Actually, model transformation plays a fundamental role in the process of software development, in general, and in model driven engineering in particular. Being a de facto standard in this area, UML is no exception, even if the number and diversity of diagrams expressing UML models makes it difficult to base its semantics on a single framework. This paper builds on previous attempts to base UML semantics in a coalgebraic setting and illustrates the application of the proposed framework to reason about composition and refactoring of sequence diagrams.},
  isbn = {978-0-7695-3312-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TBHEIA62\\Meng und Barbosa - 2008 - A Coalgebraic Semantic Framework for Reasoning abo.pdf}
}

@article{mettlerUseExperimentsDesign2014,
  title = {On the {{Use}} of {{Experiments}} in {{Design Science Research}}: {{A Proposition}} of an {{Evaluation Framework}}},
  shorttitle = {On the {{Use}} of {{Experiments}} in {{Design Science Research}}},
  author = {Mettler, Tobias and Eurich, Markus and Winter, Robert},
  year = {2014},
  journal = {Communications of the Association for Information Systems},
  volume = {34},
  number = {10},
  issn = {15293181},
  doi = {10.17705/1CAIS.03410},
  abstract = {Although experiments are considered a valid scientific method for evaluating the outcome of design science research (DSR), only minimal procedural guidelines or standards exist that help researchers in the setup and conduct. To take advantage of and encourage researchers to include design experiments as an inherent part of their build and test cycle, this study proposes a set of guidelines. In order to get a broad overview of how researchers currently apply the experimental method in DSR and to detect potential drawbacks, an extensive review of the extant literature was conducted. On this basis, we propose an evaluation framework that complements the general design science research guidelines of Hevner and colleagues. The purpose of this framework is to assist researchers, reviewers, editors, and readers in understanding possible pitfalls as well as to ask the right questions which need to be answered in the conduct of design experiments.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\H6J3BKFS\\Mettler et al. - 2014 - On the Use of Experiments in Design Science Resear.pdf}
}

@article{micskeiManyMeaningsUML2011,
  title = {The Many Meanings of {{UML}} 2 {{Sequence Diagrams}}: A Survey},
  shorttitle = {The Many Meanings of {{UML}} 2 {{Sequence Diagrams}}},
  author = {Micskei, Zolt{\'a}n and Waeselynck, H{\'e}l{\`e}ne},
  year = {2011},
  month = oct,
  journal = {Software \& Systems Modeling},
  volume = {10},
  number = {4},
  pages = {489--514},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-010-0157-9},
  abstract = {Scenario languages are widely used in software development. Typical usage scenarios, forbidden behaviors, test cases, and many more aspects can be depicted with graphical scenarios. Scenario languages were introduced into the Uni ed Modeling Language (UML) under the name of Sequence Diagrams. The 2.0 version of UML changed Sequence Diagrams signi cantly and the expressiveness of the language was highly increased. However, the complexity of the language (and the diversity of the goals Sequence Diagrams are used for) yields several possible choices in its semantics. This paper collects and categorizes the semantic choices in the language, surveys the formal semantics proposed for Sequence Diagrams, and presents how these approaches handle the various semantic choices.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DV26CP9V\\Micskei og Waeselynck - 2011 - The many meanings of UML 2 Sequence Diagrams a su.pdf}
}

@article{milewskiCategoryTheoryProgrammers2019,
  title = {Category {{Theory}} for {{Programmers}}},
  author = {Milewski, Bartosz},
  year = {2019},
  pages = {498},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BKA5JPX6\\Milewski - Category Theory for Programmers.pdf}
}

@book{milnerCalculusCommunicatingSystems1980,
  title = {A Calculus of Communicating Systems},
  author = {Milner, Robin},
  year = {1980},
  series = {Lecture Notes in Computer Science},
  number = {92},
  publisher = {{Springer}},
  address = {{Berlin}},
  isbn = {978-3-540-10235-9 978-0-387-10235-1},
  langid = {english},
  annotation = {OCLC: 6649199},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3RYL3RVB\\Milner - 1980 - A calculus of communicating systems.pdf}
}

@book{milnerCommunicatingMobileSystems2010,
  title = {Communicating and Mobile Systems: The Pi-Calculus},
  shorttitle = {Communicating and Mobile Systems},
  author = {Milner, Robin},
  year = {2010},
  edition = {7. print},
  publisher = {{Cambridge Univ. Press}},
  address = {{Cambridge}},
  isbn = {978-0-521-65869-0 978-0-521-64320-7},
  langid = {english},
  annotation = {OCLC: 844961838},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QYRJW63Z\\Milner - 2010 - Communicating and mobile systems the pi-calculus.pdf}
}

@article{misbhauddinUMLModelRefactoring2015,
  title = {{{UML}} Model Refactoring: A Systematic Literature Review},
  shorttitle = {{{UML}} Model Refactoring},
  author = {Misbhauddin, Mohammed and Alshayeb, Mohammad},
  year = {2015},
  month = feb,
  journal = {Empirical Software Engineering},
  volume = {20},
  number = {1},
  pages = {206--251},
  issn = {1382-3256, 1573-7616},
  doi = {10.1007/s10664-013-9283-7},
  abstract = {Model-driven engineering, an emerging trend in software engineering, has enabled the use of refactoring to UML models. Numerous approaches to model refactoring, problem detection, consistency management, and tool support to automate and verify refactoring are discussed and distributed across numerous research literatures. This paper provides a systematic overview of existing research in the field of model refactoring. A total of 3,295 articles, related to the field of UML model refactoring, were extracted from wellknown electronic databases. A multi-stage selection process was used to ensure proper inclusion of relevant studies for review and analysis. Ninety-four primary studies were eventually selected and analyzed based on a number of different criteria: UML models considered for refactoring, formalisms used to support refactoring at the model level, important to consider when building refactoring tool support, and the effect of refactoring on model quality. The results of this review indicate that UML model refactoring is a highly active area of research. Quite a few quality techniques and approaches have been proposed in this area, but it still has some important open issues and limitations to be addressed in future work.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MK2BEYEF\\Misbhauddin und Alshayeb - 2015 - UML model refactoring a systematic literature rev.pdf}
}

@unpublished{MITStateMachines,
  title = {{{MIT State}} Machines},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KHAWS2MP\\MIT6_01SCS11_chap04.pdf}
}

@incollection{mollerModelSynchronizationConcurrent2018,
  title = {Model {{Synchronization}} and {{Concurrent Simulation}} of {{Multiple Formalisms Based}} on {{Reference Nets}}},
  booktitle = {Transactions on {{Petri Nets}} and {{Other Models}} of {{Concurrency XIII}}},
  author = {M{\"o}ller, Pascale and Haustermann, Michael and Mosteller, David and Schmitz, Dennis},
  editor = {Koutny, Maciej and Kristensen, Lars Michael and Penczek, Wojciech},
  year = {2018},
  volume = {11090},
  pages = {93--115},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-58381-4_5},
  isbn = {978-3-662-58380-7 978-3-662-58381-4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AHVRQ24X\\Möller et al. - 2018 - Model Synchronization and Concurrent Simulation of.pdf}
}

@incollection{montanariHistoryDependentAutomataIntroduction2005,
  title = {History-{{Dependent Automata}}: {{An Introduction}}},
  shorttitle = {History-{{Dependent Automata}}},
  booktitle = {Formal {{Methods}} for {{Mobile Computing}}},
  author = {Montanari, Ugo and Pistore, Marco},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Bernardo, Marco and Bogliolo, Alessandro},
  year = {2005},
  volume = {3465},
  pages = {1--28},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11419822_1},
  abstract = {In this paper we give an overview of History Dependent Automata, an extension of ordinary automata that overcomes their limitations in dealing with named calculi. In a named calculus, the observations labelling the transitions of a system may contain names which represent features such as communication channels, node identifiers, or the locations of the system. An example of named calculus is {$\pi$}-calculus, which has the ability of sending channel names as messages and thus of dynamically reconfiguring process acquaintances and of modeling agents and code mobility. We show that History-Dependent Automata allow for a compact representation of {$\pi$}-calculus processes which is suitable both for theoretical investigations and for practical purposes such as verification.},
  isbn = {978-3-540-25697-7 978-3-540-32021-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LPJCQBJB\\Montanari og Pistore - 2005 - History-Dependent Automata An Introduction.pdf}
}

@article{mossakowskiModularHeterogeneousLogical,
  title = {Modular and Heterogeneous Logical Theories in {{DOL}}},
  author = {Mossakowski, Till},
  journal = {Model theory},
  pages = {107},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\N2MA2TMU\\Mossakowski - Modular and heterogeneous logical theories in DOL.pdf}
}

@article{mukherjeaVisualDebuggingIntegrating1994,
  title = {Toward Visual Debugging: Integrating Algorithm Animation Capabilities within a Source-Level Debugger},
  shorttitle = {Toward Visual Debugging},
  author = {Mukherjea, Sougata and Stasko, John T.},
  year = {1994},
  month = sep,
  journal = {ACM Transactions on Computer-Human Interaction},
  volume = {1},
  number = {3},
  pages = {215--244},
  issn = {1073-0516, 1557-7325},
  doi = {10.1145/196699.196702},
  abstract = {Much of the recent research in software visualization has been polarized toward two opposite domains. In one domain that we call               data structure and program visualization               , low-level canonical views of program structures are generated automatically. These types of views, which do not require programmer input or intervention, can be useful for testing and debugging software. Often, however, their generic, low-level views are not expressive enough to convey adequately how a program functions. In the second domain called               algorithm animation               , designers handcraft abstract, application-specific views that are useful for program understanding and teaching. Unfortunately, since algorithm animation development typically requires time-consuming design with a   graphics package, it will not be used for debugging, where timeliness is a necessity. However, we speculate that the application-specific nature of algorithm animation views could be a valuable debugging aid for software developers as well, if only the views could be easy and rapid to create. We have developed a system called               Lens               that occupies a unique niche between the two domains discussed above and explores the capabilities that such a system may offer. Lens allows programmers to build rapidly (in minutes) algorithm animation-style program views without requiring any sophisticated graphics knowledge and without using textual coding. Lens also is integrated with a system debugger to promote iterative design and exploration.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\X5B6IJ8Y\\Mukherjea og Stasko - 1994 - Toward visual debugging integrating algorithm ani.pdf}
}

@article{mukhiyaGraphQLApproachHealthcare2019,
  title = {A {{GraphQL}} Approach to {{Healthcare Information Exchange}} with {{HL7 FHIR}}},
  author = {Mukhiya, Suresh Kumar and Rabbi, Fazle and I Pun, Violet Ka and Rutle, Adrian and Lamo, Yngve},
  year = {2019},
  journal = {Procedia Computer Science},
  volume = {160},
  pages = {338--345},
  issn = {18770509},
  doi = {10.1016/j.procs.2019.11.082},
  abstract = {Abstract Interoperability is accepted as a fundamental necessity for the successful realization of Healthcare Information Systems. It can be aInctheireovpeedrabbyiluittyiliizsinagccceopntseidstaesntasftuannddaamrdesndteafil nniencgesssyintytafcotricthaendsuscecmeasnsftuicl mreeaalinziantgioonfothf eHienaflotrhmcaarteioInnfboerimngateixocnhSaynsgteedm. sH. LIt7cFaHn IbRe iaschoineeveodf sbuycuhtiolipzeinngstcaonndsairsdtesnftosrtaHnedaalrtdhsIndfeofirnminagtiosynnEtaxccthicanagned (sHemIEa)n.tWic hmileeanHinLg7oFfHthIRe isnufpoprmorattsioRnebpereinsegnetxatcihoannagl eSdt.atHeLT7raFnHsfIeRr (isRoEnSeTo)fasrucchhiteocpteunrestaannddaSredrsvifcoer-HoreieanltthedInAforrcmhiatteicotnurEex(cShOanAg)ef(oHr IsEea).mWlehsisleinHfoLr7mFatHioInR esxucphpaonrgtse,RietpirnehseernittsattihoenailnflSetaxtiebiTlirtaynsafnedr c(RomESpTle)xaitrychaistseocctuiarteedanwditShetrhveicRe-EoSriTenfuteldapAprrcohaicthec. tGurreap(hSQOLA)isfoarqsueearmy lleasnsgiunafgoermdeavtieolnopeexdchbaynFgaec, eitboinohketrhitasttphreovinidfleesxipbriolimtyisainngd tceocmhnpilqexuietsytaossoovceiractoemd ewtihthestheeisRsuEeSsT. fIunltahpisprpoaapcehr., GwreapexhpQlLoitisthaequuseeryoflaGngraupahgQe LdeavnedloHpeLd7bFyHFIaRcefbooroHkItEh;apt rpersoevnitdeasn parlogmoriisthinmg ttoecmhnaipquHeLs 7toFoHvIeRrcroemsoeutrhceessetoisasuGesr.apInhQthLisspchapemer,a,waendexcprleoaittetdhea upsroetooftyGperaipmhpQlLemaenndtaHtiLon7 oFfHtIhRe faoprprHoIaEc;hparnedsecnotmanpaarlegoitriwthimth atoRmEaSpTHfuLl 7apFpHroIRachre.sOouurrceexspteoriamGenrataplhrQesLulstcshienmdiac,aatendthcartetahteedcoampbrointoattyiopneoimf GplreampheQntLataionnd oHfLth7eFaHpIpRro-baacsheadnwdecbomAPpaIsrefoitr wHiItEh iasRpEerSfoTrfmulaanpt,pcrooastc-he.ffOecutriveex,psecraimlabenletaalnrdesfluelxtsibinleditcoamteetehtawt tehbeacnodmmbionbaitlieoncloiefnGtsrarepqhuQirLemanedntHs.L7 FHIR-based web APIs for HIE is performant, cost-effective, scalable and flexible to meet web and mobile clients requirements.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GTPSRFHU\\Mukhiya et al. - 2019 - A GraphQL approach to Healthcare Information Excha.pdf}
}

@article{munozModelingObjectsUncertain2021,
  title = {Modeling {{Objects}} with {{Uncertain Behaviors}}.},
  author = {Mu{\~n}oz, Paula and Karkhanis, Priyanka and {van den Brand}, Mark},
  year = {2021},
  journal = {The Journal of Object Technology},
  volume = {20},
  number = {3},
  pages = {8:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.3.a8},
  abstract = {Modeling the behavior of complex systems that operate in real environments, deal with physical elements, or interact with humans is a challenging task. It involves the explicit representation of aspects of behavioral uncertainty that are inherent in the system, but generally neglected in software models. In this paper, we focus on the explicit representation of the behavior of objects of complex systems, considering their motivations, randomness, and the different types of underlying uncertainty that affect their actions. We show how such uncertain behaviors can be effectively modeled in UML and OCL, and how the specifications produced can be used to simulate and analyze these systems.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y97Z6RFQ\\Muñoz et al. - 2021 - Modeling Objects with Uncertain Behaviors..pdf}
}

@article{muramSystematicReviewSoftware2017,
  title = {Systematic {{Review}} of {{Software Behavioral Model Consistency Checking}}},
  author = {ul Muram, Faiz and Tran, Huy and Zdun, Uwe},
  year = {2017},
  month = jun,
  journal = {ACM Computing Surveys},
  volume = {50},
  number = {2},
  pages = {1--39},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3037755},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HE7WHWA6\\Muram et al. - 2017 - Systematic Review of Software Behavioral Model Con.pdf}
}

@article{narayananAlleviatingStatespaceExplosion,
  title = {Alleviating {{State-space Explosion}} in {{Component-based Systems}} with {{Distributed}}, {{Parallel Reachability Analysis Algorithm}}},
  author = {Narayanan, Vasumathi},
  pages = {16},
  abstract = {In this work, we alleviate the well-known State-Space Explosion (SSE) problem in Component Based Systems (CBS). We consider CBS that can be specified as a system of n Communicating Finite State Machines (CFSMs) interacting by rendezvous/handshake method. In order to avoid the SSE incurred by the traditional product machine composition of the given input CFSMs based on interleaving semantics, weconstructa sum machine composition based on state-oriented partial-order semantics. The sum machine consists of a set of n unfolded CFSMs. By storing statically, just a small subset of global state vectors at synchronizationpoints, called the synchronousenvironment vectors and generating the rest of the global-state vectors dynamically on need basis depending on the reachability to be verified, the sum machine alleviates the SSE of the product machine. We demonstrate the implementation of checking the reachability of global state vector from the checking of local reachabilities of the components of the given state vector, through a parallel, distributed algorithm. Parallel and distributed algorithms to generate the sum machine and verifying the reachability in it both without exponential complexity are the contributions of this work.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\G49SMBAR\\Narayanan - Alleviating State-space Explosion in Component-bas.pdf}
}

@misc{NorwegianNationalResearch2016,
  title = {The {{Norwegian National Research Ethics Committees}}. {{Guidelines}} for {{Research Ethics}} in {{Science}} and {{Technology}}},
  year = {2016},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\36TWVM47\\general-guidelines.pdf;C\:\\Users\\Tim\\Zotero\\storage\\EYYC4YFF\\60126_fek_guidelines_nent_digital.pdf}
}

@incollection{oberValidationUMLModels2004,
  title = {Validation of {{UML Models}} via a {{Mapping}} to {{Communicating Extended Timed Automata}}},
  booktitle = {Model {{Checking Software}}},
  author = {Ober, Iulian and Graf, Susanne and Ober, Ileana},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Graf, Susanne and Mounier, Laurent},
  year = {2004},
  volume = {2989},
  pages = {127--145},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-24732-6_9},
  abstract = {We present a technique and a tool for model-checking operational UML models based on a mapping of object oriented UML models into a framework of communicating extended timed automata - in the IF format - and the use of the existing model-checking and simulation tools for this format.},
  isbn = {978-3-540-21314-7 978-3-540-24732-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ITDX2JRG\\Ober et al. - 2004 - Validation of UML Models via a Mapping to Communic.pdf}
}

@misc{ObjectDiagramModeler2022,
  title = {Object Diagram Modeler},
  year = {2022},
  month = mar,
  copyright = {MIT},
  howpublished = {https://github.com/timKraeuter/object-diagram-modeler}
}

@misc{objectmanagementgroupBusinessProcessModel2013,
  title = {Business {{Process Model}} and {{Notation}} ({{BPMN}}), {{Version}} 2.0.2},
  author = {{Object Management Group}},
  year = {2013},
  month = dec,
  howpublished = {https://www.omg.org/spec/BPMN/},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IJDC5IEQ\\Business Process Model and Notation (BPMN), Versio.pdf}
}

@misc{objectmanagementgroupObjectConstraintLanguage2020,
  title = {About the {{Object Constraint Language Specification}}, {{Version}} 2.4},
  author = {{Object Management Group}},
  year = {2020},
  month = nov,
  howpublished = {https://www.omg.org/spec/OCL},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6KL4N6LK\\Object Constraint Language 2.4.pdf}
}

@misc{objectmanagementgroupOMGMetaObject2021,
  title = {{{OMG Meta Object Facility}} ({{MOF}}) {{Core Specification}} ,{{Version}} 2.5.1},
  author = {{Object Management Group}},
  year = {2021},
  month = sep,
  howpublished = {https://www.omg.org/spec/MOF},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HZYHZUQV\\Object Management Group (OMG) - 2021 - OMG Meta Object Facility (MOF) Core Specification .pdf}
}

@misc{objectmanagementgroupomgSemanticsFoundationalSubset2021,
  title = {Semantics of a {{Foundational Subset}} for {{Executable UML Models}} ({{fUML}}), {{Version}} 1.5},
  author = {{Object Management Group (OMG)}},
  year = {2021},
  month = sep,
  howpublished = {https://www.omg.org/spec/FUML},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VSY2JBSH\\Object Management Group (OMG) - 2021 - Semantics of a Foundational Subset for Executable .pdf}
}

@misc{objectmanagementgroupUnifiedModelingLanguage2017,
  title = {Unified {{Modeling Language}}, {{Version}} 2.5.1},
  author = {{Object Management Group}},
  year = {2017},
  month = dec,
  howpublished = {https://www.omg.org/spec/UML},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SQ5UNSNX\\Unified Modeling Language, v2.5.1.pdf}
}

@article{odellDebuggingMindsetUnderstanding2017,
  title = {The {{Debugging Mindset}}: {{Understanding}} the {{Psychology}} of {{Learning Strategies Leads}} to {{Effective Problem-Solving Skills}}.},
  author = {O'Dell, Devon H.},
  year = {2017},
  month = feb,
  journal = {Queue},
  volume = {15},
  number = {1},
  pages = {71--90},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  issn = {1542-7730},
  doi = {10.1145/3055301.3068754},
  abstract = {Software developers spend 35-50 percent of their time validating and debugging software. The cost of debugging, testing, and verification is estimated to account for 50-75 percent of the total budget of software development projects, amounting to more than \$100 billion annually. While tools, languages, and environments have reduced the time spent on individual debugging tasks, they have not significantly reduced the total time spent debugging, nor the cost of doing so. Therefore, a hyperfocus on elimination of bugs during development is counterproductive; programmers should instead embrace debugging as an exercise in problem solving.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\93EXGN6A\\O'Dell - 2017 - The Debugging Mindset Understanding the Psycholog.pdf}
}

@inproceedings{oechsleJAVAVISAutomaticProgram2002,
  title = {{{JAVAVIS}}: {{Automatic}} Program Visualization with Object and Sequence Diagrams Using the Java Debug Interface ({{JDI}})},
  booktitle = {Software Visualization},
  author = {Oechsle, Rainer and Schmitt, Thomas},
  editor = {Diehl, Stephan},
  year = {2002},
  pages = {176--190},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {The goal of the JAVAVIS system is to help students understand what is happening in a Java program during execution. The primary focus of the first release is on sequential Java programs, although there is some support for visualizing concurrent threads. The system uses the Java Debug Interface (JDI), so there are no modifications needed in the Java source code for the extraction of information. The system shows the dynamic behavior of a running program by displaying several object diagrams and a single sequence diagram. There is one object diagram for each active method on the call stack. All modifications in the diagrams are done by smooth transitions.},
  isbn = {978-3-540-45875-3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EAED7LSW\\Oechsle og Schmitt - JAVAVIS Automatic Program Visualization with Obje.pdf}
}

@book{olveczkyDesigningReliableDistributed2017,
  title = {Designing {{Reliable Distributed Systems}}},
  author = {{\"O}lveczky, Peter Csaba},
  year = {2017},
  series = {Undergraduate {{Topics}} in {{Computer Science}}},
  publisher = {{Springer London}},
  address = {{London}},
  doi = {10.1007/978-1-4471-6687-0},
  isbn = {978-1-4471-6686-3 978-1-4471-6687-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UP3CA2X5\\Ölveczky - 2017 - Designing Reliable Distributed Systems.pdf}
}

@article{panachnavarreteEvaluatingModelDrivenDevelopment2018,
  title = {Evaluating {{Model-Driven Development Claims}} with Respect to {{Quality}}: {{A Family}} of {{Experiments}}},
  shorttitle = {Evaluating {{Model-Driven Development Claims}} with Respect to {{Quality}}},
  author = {Panach Navarrete, Jose Ignacio and Dieste, Oscar and Marin, Beatriz and Espana, Sergio and Vegas, Sira and Pastor, Oscar and Juristo, Natalia},
  year = {2018},
  journal = {IEEE Transactions on Software Engineering},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2018.2884706},
  abstract = {Context: There is a lack of empirical evidence on the differences between model-driven development (MDD), where code is automatically derived from conceptual models, and traditional software development method, where code is manually written. In our previous work, we compared both methods in a baseline experiment concluding that quality of the software developed following MDD was significantly better only for more complex problems (with more function points). Quality was measured through test cases run on a functional system. Objective: This paper reports six replications of the baseline to study the impact of problem complexity on software quality in the context of MDD. Method: We conducted replications of two types: strict replications and object replications. Strict replications were similar to the baseline, whereas we used more complex experimental objects (problems) in the object replications. Results: MDD yields better quality independently of problem complexity with a moderate effect size. This effect is bigger for problems that are more complex. Conclusions: Thanks to the bigger size of the sample after aggregating replications, we discovered an effect that the baseline had not revealed due to the small sample size. The baseline results hold, which suggests that MDD yields better quality for more complex problems.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FGUR5X7F\\Panach Navarrete et al. - 2018 - Evaluating Model-Driven Development Claims with re.pdf}
}

@inproceedings{pangIEC61499Models2015,
  title = {Towards {{IEC}} 61499 Models of Computation in {{Ptolemy II}}},
  booktitle = {{{IECON}} 2015 - 41st {{Annual Conference}} of the {{IEEE Industrial Electronics Society}}},
  author = {Pang, Cheng and Dai, Wenbin and Vyatkin, Valeriy},
  year = {2015},
  month = nov,
  pages = {001988--001993},
  publisher = {{IEEE}},
  address = {{Yokohama}},
  doi = {10.1109/IECON.2015.7392392},
  abstract = {The prospects of cyber-physical systems (CPS) have been well disseminated and recognized in diverse industries. In industrial automation domain, continuous research on CPS technologies has been funded strategically and globally. One important research challenge in industrial CPS is the modelling of physical processes in continuous domains connected with control systems in discrete domains. Such co-modelling must leverage state-of-the-art standards and tools for practicality. One feasible combination is the IEC 61499 standard for event-driven control and the Ptolemy II platform for heterogeneous model composition. Furthermore, by implementing the computational models of IEC 61499 in Ptolemy II, the behavioural discrepancies of the same IEC 61499 application under different execution semantics can be analysed. As a foundation work towards these goals, this paper investigates the principles of modelling basic IEC 61499 elements using existing Ptolemy II structures. It is aimed to provide some initial insights for engineering industrial CPS based on IEC 61499 and Ptolemy II.},
  isbn = {978-1-4799-1762-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z57HP5CJ\\Pang et al. - 2015 - Towards IEC 61499 models of computation in Ptolemy.pdf}
}

@inproceedings{patelHeterogeneousBehavioralHierarchy2006,
  title = {Heterogeneous {{Behavioral Hierarchy}} for {{System Level Designs}}},
  booktitle = {Proceedings of the {{Design Automation}} \& {{Test}} in {{Europe Conference}}},
  author = {Patel, H.D. and Shukla, S.K. and Bergamaschi, R.A.},
  year = {2006},
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Munich, Germany}},
  doi = {10.1109/DATE.2006.243955},
  abstract = {Enhancing productivity for designing complex embedded systems requires system level design methodology and language support for capturing complex design in high level models. For an effective methodology, efficiency of simulation and a sound refinement based implementation path are also necessary. Although some of the recent system level design languages for system level abstractions, several essential ingredients are missing from these. We consider (i) explicit support for multiple models of computation (MoCs) or heterogeneity; (ii) the ability to build complex behaviors by hierarchically composing simpler behaviors; and (iii) hierarchical composition of behaviors that belong to distinct models of computation, as essential for successful SLDLs. These render an SLDL with modeling fidelity that exploits both heterogeneity and hierarchy and allows for simpler modeling and efficient simulation. One important requirement for such an SLDL should be that the simulation semantics be also compositional, and hence no flattening of hierarchically composed behaviors be needed for simulation. In this paper we show how we designed SystemC extensions to provide facilities for heterogeneous behavioral hierarchy, compositional simulation semantics, and implemented a simulation kernel which we show experimentally as up to 50\% more efficient than standard SystemC simulation.},
  isbn = {978-3-9810801-1-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Z4KH5QIH\\Patel et al. - 2006 - Heterogeneous Behavioral Hierarchy for System Leve.pdf}
}

@inproceedings{pavlovicCompositionRefinementBehavioral2001,
  title = {Composition and Refinement of Behavioral Specifications},
  booktitle = {Proceedings 16th {{Annual International Conference}} on {{Automated Software Engineering}} ({{ASE}} 2001)},
  author = {Pavlovic, D. and Smith, D.R.},
  year = {2001},
  pages = {157--165},
  publisher = {{IEEE Comput. Soc}},
  address = {{San Diego, CA, USA}},
  doi = {10.1109/ASE.2001.989801},
  abstract = {This paper presents a mechanizable framework for specifying, developing, and reasoning about complex systems. The framework combines features from algebraic specifications, abstract state machines, and refinement calculus, all couched in a categorical setting. In particular, we show how to extend algebraic specifications to evolving specifications (especs) in such a way that composition and refinement operations extend to capture the dynamics of evolving, adaptive, and self-adaptive software development, while remaining efficiently computable. The framework is partially implemented in the Epoxi system.},
  isbn = {978-0-7695-1426-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TNRFDJ2A\\Pavlovic og Smith - 2001 - Composition and refinement of behavioral specifica.pdf}
}

@book{popperLogicScientificDiscovery2002,
  title = {{The logic of scientific discovery}},
  author = {Popper, Karl R},
  year = {2002},
  publisher = {{Routledge}},
  address = {{London; New York}},
  abstract = {When first published in 1959, this book revolutionized contemporary thinking about science and knowledge. It remains the one of the most widely read books about science to come out of the twentieth century.},
  isbn = {978-0-203-99462-7 978-0-415-27843-0 978-0-415-27844-7},
  langid = {Translated from the German},
  annotation = {OCLC: 62269119},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CC5F2TNQ\\Popper - 2002 - The logic of scientific discovery.pdf}
}

@article{ProblemThreads,
  title = {The Problem with Threads},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\C4U9G38P\\EECS-2006-1.pdf}
}

@book{ptolemaeusSystemDesignModeling2014,
  title = {System Design, Modeling, and Simulation: Using {{Ptolemy II}}},
  shorttitle = {System Design, Modeling, and Simulation},
  editor = {Ptolemaeus, Claudius},
  year = {2014},
  edition = {1. ed., version 1.02},
  publisher = {{UC Berkeley EECS Dept}},
  address = {{Berkeley, Calif}},
  isbn = {978-1-304-42106-7},
  langid = {english},
  annotation = {OCLC: 935837595},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FAM4A3H8\\Ptolemaeus - 2014 - System design, modeling, and simulation using Pto.pdf}
}

@article{rabbiModelDrivenEngineering2018,
  title = {A Model Driven Engineering Approach for Heterogeneous Model Composition},
  author = {Rabbi, F. and Lamo, Y. and Kristensen, L.M.},
  year = {2018},
  journal = {Communications in Computer and Information Science},
  volume = {880},
  pages = {198--221},
  doi = {10.1007/978-3-319-94764-8_9},
  document_type = {Conference Paper},
  source = {Scopus},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UTLYI6RE\\Rabbi et al. - 2018 - A model driven engineering approach for heterogene.pdf}
}

@article{raedtsTransformationBPMNModels2007,
  title = {Transformation of {{BPMN}} Models for Behaviour Analysis.},
  author = {Raedts, Ivo and Petkovic, Marija and Usenko, Yaroslav S and {van der Werf}, Jan Martijn EM and Groote, Jan Friso and Somers, Lou J},
  year = {2007},
  journal = {MSVVEIS},
  volume = {2007},
  pages = {126--137},
  publisher = {{Citeseer}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GATSTZVT\\Raedts og Petkovi - Transformation of BPMN models for Behaviour Analys.pdf}
}

@inproceedings{reggioWhatAreUsed2013,
  title = {What Are the Used {{UML}} Diagrams? {{A}} Preliminary Survey},
  booktitle = {{{EESSMOD}}@{{MoDELS}}},
  author = {Reggio, G. and Leotta, M. and Ricca, F. and Clerissi, Diego},
  year = {2013},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HBMQZQBK\\Reggio et al. - What are the used UML diagrams A Preliminary Surv.pdf}
}

@incollection{rensinkExplicitStateModel2008,
  title = {Explicit State Model Checking for Graph Grammars},
  booktitle = {Concurrency, Graphs and Models: {{Essays}} Dedicated to Ugo Montanari on the Occasion of His 65th Birthday},
  author = {Rensink, Arend},
  editor = {Degano, Pierpaolo and De Nicola, Rocco and Meseguer, Jos{\'e}},
  year = {2008},
  pages = {114--132},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-68679-8₈},
  abstract = {In this paper we present the philosophy behind the GROOVE project, in which graph transformation is used as a modelling formalism on top of which a model checking approach to software verification is being built. We describe the basic formalism, the current state of the project, and (current and future) challenges.},
  isbn = {978-3-540-68679-8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SCYQ55HX\\Rensink - 2008 - Explicit state model checking for graph grammars.pdf}
}

@inproceedings{rensinkGROOVESimulatorTool2004,
  title = {The {{GROOVE}} Simulator: {{A}} Tool for State Space Generation},
  booktitle = {Applications of Graph Transformations with Industrial Relevance},
  author = {Rensink, Arend},
  editor = {Pfaltz, John L. and Nagl, Manfred and B{\"o}hlen, Boris},
  year = {2004},
  pages = {479--485},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {The tool described here is the first part of a tool set called GROOVE (GRaph-based Object-Oriented VErification) for software model checking of object-oriented systems. The special feature of GROOVE, which sets it apart from other model checking approaches, is that it is based on graph transformations. It uses graphs to represent state snapshots; transitions arise from the application of graph production rules. This yields so-called Graph Transition Systems (GTS's) as computational models.},
  isbn = {978-3-540-25959-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\W437PLPF\\Rensink - 2004 - The GROOVE Simulator A Tool for State Space Gener.pdf}
}

@inproceedings{rensinkNestedQuantificationGraph2006,
  title = {Nested {{Quantification}} in {{Graph Transformation Rules}}},
  booktitle = {Graph {{Transformations}}},
  author = {Rensink, Arend},
  editor = {Corradini, Andrea and Ehrig, Hartmut and Montanari, Ugo and Ribeiro, Leila and Rozenberg, Grzegorz},
  year = {2006},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--13},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11841883_1},
  abstract = {In this paper we describe a way to integrate Taentzer's rule amalgamation with the recently proposed notions of nested graph conditions. The resulting so-called quantified graph transformation rules include (universally and existentially) quantified sub-structures in a flexible way. This can be used for instance to specify a larger-step operational semantics, thus improving the scalability of graph transformation as a technique for software verification.},
  isbn = {978-3-540-38872-2},
  langid = {english},
  keywords = {Application Condition,Graph Transformation,Graph Transformation Rule,Host Graph,Interaction Scheme}
}

@article{rensinkRepottingGeraniumsNested2009,
  title = {Repotting the {{Geraniums}}: {{On Nested Graph Transformation Rules}}},
  shorttitle = {Repotting the {{Geraniums}}},
  author = {Rensink, Arend and Kuperus, Jan-Hendrik},
  year = {2009},
  month = sep,
  journal = {Electronic Communications of the EASST},
  pages = {Volume 18: Graph Transformation and Visual Modeling Techniques 2009},
  publisher = {{European Association of Software Science and Technology}},
  doi = {10.14279/TUJ.ECEASST.18.260},
  abstract = {We propose a scheme for rule amalgamation based on nested graph predicates. Essentially, we extend all the graphs in such a predicate with right hand sides. Whenever such an enriched nested predicate matches (i.e., is satisfied by) a given  host graph, this results in many individual match morphisms, and thus many \^asmall\^a rule applications. The total effect is described by the amalgamated rule. This makes for a smooth, uniform and very powerful amalgamation scheme, which we demonstrate  on a number of examples. Among the examples is the following, which we believe to be inexpressible in very few other parallel rule formalism proposed in the literature: repot all flowering geraniums whose pots have cracked.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\58FLATRE\\Rensink og Kuperus - 2009 - Repotting the Geraniums  On Nested Graph Transfor.pdf}
}

@book{resnikEthicsScienceIntroduction2005,
  title = {The {{Ethics}} of {{Science}}: An {{Introduction}}.},
  shorttitle = {The {{Ethics}} of {{Science}}},
  author = {Resnik, David B},
  year = {2005},
  abstract = {Ethics of Science is a comprehensive and student-friendly introduction to the study of ethics in science and scientific research. The book covers: * Science and Ethics * Ethical Theory and Applications * Science as a Profession * Standards of Ethical Conduct in Science * Objectivity in Research * Ethical Issues in the Laboratory * The Scientist in Society * Toward a More Ethical Science * Actual case studies include: Baltimore Affair * cold fusion * Milikan's oil drop experiments * human and animal cloning * Cold War experiments * Strategic Defence Initiative * the Challenger accident * Tobacco Research.},
  isbn = {978-0-203-97906-8},
  langid = {english},
  annotation = {OCLC: 1048580079},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZMQ9SMUF\\Resnik - 2005 - The Ethics of Science an Introduction..pdf}
}

@phdthesis{ribeiroHigherOrderGraphRewriting,
  title = {Higher-{{Order Graph Rewriting Systems}}},
  author = {Ribeiro, D Leila and Heckel, D Reiko and Alegre, Porto and {de}, Janeiro},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GSEIHEQL\\Ribeiro et al. - Higher-Order Graph Rewriting Systems.pdf}
}

@phdthesis{rinderle-maSchemaEvolutionProcess2004,
  title = {Schema Evolution in Process Management Systems.},
  author = {{Rinderle-Ma}, Stefanie},
  year = {2004},
  month = jan,
  school = {Universit\"at Ulm},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\AXGKNH6K\\Ulm og Dadam - Schema Evolution in Process Management Systems.pdf}
}

@incollection{riveraBehaviorTimeViewpoint2009,
  title = {Behavior, {{Time}} and {{Viewpoint Consistency}}: {{Three Challenges}} for {{MDE}}},
  shorttitle = {Behavior, {{Time}} and {{Viewpoint Consistency}}},
  booktitle = {Models in {{Software Engineering}}},
  author = {Rivera, Jos{\'e} Eduardo and Romero, Jos{\'e} Raul and Vallecillo, Antonio},
  editor = {Chaudron, Michel R. V.},
  year = {2009},
  volume = {5421},
  pages = {60--65},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-01648-6_7},
  abstract = {Although Model Driven Software Development (MDSD) is achieving significant progress, it is still far from becoming a real Engineering discipline. In fact, many of the difficult problems of the engineering of complex software systems are still unresolved, or simplistically addressed by many of the current MDSD approaches. In this position paper we outline three of the outstanding problems that we think MDSD should tackle in order to be useful in industrial environments.},
  isbn = {978-3-642-01647-9 978-3-642-01648-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SNHAEEUH\\Rivera et al. - 2009 - Behavior, Time and Viewpoint Consistency Three Ch.pdf}
}

@inproceedings{riveraGraphicalApproachModeling2009,
  title = {A Graphical Approach for Modeling Time-Dependent Behavior of {{DSLs}}},
  booktitle = {2009 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Rivera, Jose E. and Duran, Francisco and Vallecillo, Antonio},
  year = {2009},
  month = sep,
  pages = {51--55},
  publisher = {{IEEE}},
  address = {{Corvallis, OR, USA}},
  doi = {10.1109/VLHCC.2009.5295300},
  isbn = {978-1-4244-4876-0},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PAWR8W27\\Rivera et al. - 2009 - A graphical approach for modeling time-dependent b.pdf}
}

@article{rodriguezCompositionMultilevelDomainSpecific,
  title = {Composition of {{Multilevel Domain-Specific Modelling Languages}}},
  author = {Rodr{\'i}guez, Alejandro and Mac{\'i}as, Fernando and Dur{\'a}n, Francisco and Rutle, Adrian and Wolter, Uwe},
  pages = {49},
  abstract = {Multilevel Modelling (MLM) approaches make it possible for designers and modellers to work with an unlimited number of abstraction levels to specify their domain-specific modelling languages (DSMLs). To fully exploit MLM techniques, we need powerful model composition operators. Indeed, the composition of DSMLs is becoming increasingly relevant to the modelling community either because some DSMLs may share commonalities that we want to make reusable, or because we want to facilitate interoperability between DSMLs. In this paper, we propose a composition mechanism for structure and behaviour of multilevel modelling hierarchies. Our approach facilitates the inclusion of additional features while keeping a clear separation of concerns that enhances modularity. We provide a formal semantics of the constructions based on category theory and graph transformations and show their use in practice on a case study.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KGVCPKDS\\Rodríguez et al. - Composition of Multilevel Domain-Specific Modellin.pdf}
}

@article{rodriguezExecutingMultilevelDomainSpecific2019,
  title = {Executing {{Multilevel Domain-Specific Models}} in {{Maude}}.},
  author = {Rodr{\'i}guez, Alejandro and Dur{\'a}n, Francisco and Rutle, Adrian and Kristensen, Lars Michael},
  year = {2019},
  journal = {The Journal of Object Technology},
  volume = {18},
  number = {2},
  pages = {4:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2019.18.2.a4},
  abstract = {Multilevel modelling (MLM) tackles the limitation in the number of abstraction levels present in traditional modelling approaches within the model-driven software engineering (MDSE) field. One way to specify the behaviour description of MLMs is by means of multilevel model transformations. In this paper, we propose an approach to achieve reusability and flexibility in specifying and executing multilevel model transformations. For this purpose, we rely on code-generation and the efficient rewriting logic mechanisms that Maude provides. As a proof of concept, we have developed an infrastructure which combines our MLM tool MultEcore, that facilitates definition of MLM hierarchies and transformations, with Maude, which performs the execution of the transformations on these hierarchies.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CMNXC5TT\\Rodríguez et al. - 2019 - Executing Multilevel Domain-Specific Models in Mau.pdf}
}

@inproceedings{rodriguezMultilevelModellingColoured2018,
  title = {Multilevel Modelling of Coloured Petri Nets},
  booktitle = {{{MODELS}} Workshops},
  author = {Rodr{\'i}guez, A. and Rutle, Adrian and Dur{\'a}n, F. and Kristensen, L. M. and Mac{\'i}as, Fernando},
  year = {2018},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4G9EAJBL\\Rodríguez et al. - Multilevel modelling of coloured Petri nets.pdf}
}

@book{roubtsovaBehaviorModelingFoundations2015,
  title = {Behavior {{Modeling}} -- {{Foundations}} and {{Applications}}},
  editor = {Roubtsova, Ella and McNeile, Ashley and Kindler, Ekkart and Gerth, Christian},
  year = {2015},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {6368},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21912-7},
  isbn = {978-3-319-21911-0 978-3-319-21912-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FFFRHUWC\\Roubtsova et al. - 2015 - Behavior Modeling -- Foundations and Applications.pdf}
}

@book{ruckerPracticalProcessAutomation2021,
  title = {Practical Process Automation: Orchestration and Integration in Microservices and Cloud Native Architectures},
  shorttitle = {Practical Process Automation},
  author = {R{\"u}cker, Bernd},
  year = {2021},
  edition = {First edition},
  publisher = {{O'Reilly}},
  address = {{Beijing Boston Farnham Sebastopol Tokyo}},
  isbn = {978-1-4920-6145-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VLRWVRR4\\Ruecker - Practical Process Automation.pdf}
}

@incollection{rutleDiagrammaticFormalisationMOFBased2009,
  title = {A {{Diagrammatic Formalisation}} of {{MOF-Based Modelling Languages}}},
  booktitle = {Objects, {{Components}}, {{Models}} and {{Patterns}}},
  author = {Rutle, Adrian and Rossini, Alessandro and Lamo, Yngve and Wolter, Uwe},
  editor = {Oriol, Manuel and Meyer, Bertrand},
  year = {2009},
  volume = {33},
  pages = {37--56},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-02571-6_4},
  abstract = {In Model-Driven Engineering (MDE) models are the primary artefacts of the software development process. The usage of these models have resulted in the introduction of a variety of modelling languages and frameworks. Many of these languages and frameworks are based on the Object Management Group's (OMG) Meta-Object Facility (MOF). In addition to their diagrammatic syntax, these languages use the Object Constraint Language to specify constraints that are difficult to specify diagrammatically. In this paper, we argue for a completely diagrammatic specification framework for MDE, where by diagrammatic we mean specification techniques which target graph-based structures. We introduce the Diagram Predicate Framework, which provides a formal diagrammatic approach to modelling based on category theory \textendash{} the mathematics of graph-based structures. The development of a generic and flexible formalisation of metamodelling is the main contribution of the paper. We illustrate our approach through the formalisation of the kernel of the Eclipse Modeling Framework.},
  isbn = {978-3-642-02570-9 978-3-642-02571-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SHNV8AI5\\Rutle et al. - 2009 - A Diagrammatic Formalisation of MOF-Based Modellin.pdf}
}

@phdthesis{rutleDiagramPredicateFramework2011,
  title = {Diagram {{Predicate Framework}}},
  shorttitle = {Bibliofile Klassikere \& Litter\ae re Likegyldigheter},
  author = {Rutle, Adrian},
  year = {2011},
  langid = {english},
  school = {University of Bergen},
  annotation = {OCLC: 772905668},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NCWQBP7H\\fibred_semantics.pdf;C\:\\Users\\Tim\\Zotero\\storage\\PLMPUSUZ\\Schiøtz - 2010 - Bibliofile klassikere & litterære likegyldigheter.pdf}
}

@article{rutleFormalApproachSpecification2012,
  title = {A Formal Approach to the Specification and Transformation of Constraints in {{MDE}}},
  author = {Rutle, Adrian and Rossini, Alessandro and Lamo, Yngve and Wolter, Uwe},
  year = {2012},
  month = may,
  journal = {The Journal of Logic and Algebraic Programming},
  volume = {81},
  number = {4},
  pages = {422--457},
  issn = {15678326},
  doi = {10.1016/j.jlap.2012.03.006},
  abstract = {This paper introduces a formal approach to constraint-aware model transformation which supports specifying constraints in the definition of transformation rules. These constraints are used to control which structure to create in the target model and which constraints to add to the created structure. The proposed approach is classified under heterogeneous, graphbased and out-place model transformations; and illustrated by applying it to a language translation. It is based on the Diagram Predicate Framework which provides a formalisation of (meta)modelling based on category theory and graph transformation. In particular, the proposed approach uses non-deleting transformation rules that are specified by a joined modelling language which is defined by relating the source and target languages. The relation between source and target languages is formalised by morphisms from their corresponding modelling formalisms into a joined modelling formalism. Furthermore, the application of transformation rules is formalised as a pushout construction and the final target model is obtained by a pullback construction.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6HXX7AMZ\\Rutle et al. - 2012 - A formal approach to the specification and transfo.pdf}
}

@incollection{rutleFormalDiagrammaticApproach2013,
  title = {A {{Formal Diagrammatic Approach}} to {{Compensable Workflow Modelling}}},
  booktitle = {Foundations of {{Health Information Engineering}} and {{Systems}}},
  author = {Rutle, Adrian and Wang, Hao and MacCaull, Wendy},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Weber, Jens and Perseil, Isabelle},
  year = {2013},
  volume = {7789},
  pages = {194--212},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-39088-3_13},
  abstract = {Workflow models drive the development of the software systems used for complex business process scenarios. When some tasks fail during execution, compensation can be used as an error-handling procedure to remove side-effects of already finished tasks. This paper presents a new formal, diagrammatic approach to compensable workflow modelling, using principles from model-driven engineering (MDE), which combines diagrammatic modelling with formal foundations. The approach extends the Diagram Predicate Framework, which is based on category theory and graph transformations, for the specification of compensable workflow models. The use of MDE technologies is especially important for software in health services delivery where protocols are highly localised and frequently change. The static semantics is represented by instances of workflow models, while a transition system represents the dynamic semantics. The transition system is described by model transformation rules between instances.},
  isbn = {978-3-642-39087-6 978-3-642-39088-3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UMAU478A\\Rutle et al. - 2013 - A Formal Diagrammatic Approach to Compensable Work.pdf}
}

@inproceedings{rutleMetamodellingApproachBehavioural2012,
  title = {A Metamodelling Approach to Behavioural Modelling},
  booktitle = {Proceedings of the {{Fourth Workshop}} on {{Behaviour Modelling}} - {{Foundations}} and {{Applications}} - {{BM-FA}} '12},
  author = {Rutle, Adrian and MacCaull, Wendy and Wang, Hao and Lamo, Yngve},
  year = {2012},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{Kgs. Lyngby, Denmark}},
  doi = {10.1145/2325276.2325281},
  abstract = {In this paper we propose a metamodelling approach to behavioural modelling. The approach combines diagrammatic modelling with formal foundations based on category theory and graph transformations. The static semantics of behavioural models is represented by instances of (meta)models, while their dynamic semantics is represented by transition systems. Transitions are described by coupled model transformations. To illustrate the approach, we present a running example of a workflow model for health services delivery.},
  isbn = {978-1-4503-1187-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CD2C28MK\\Rutle et al. - 2012 - A metamodelling approach to behavioural modelling.pdf}
}

@article{rutleUserfriendlyToolModel2013,
  title = {A {{User-friendly Tool}} for {{Model Checking Healthcare Workflows}}},
  author = {Rutle, Adrian},
  year = {2013},
  journal = {Procedia Computer Science},
  pages = {10},
  abstract = {Workflow management tools may be used in many domains, to guide and direct processes, to support monitoring activities and to increase organizational efficiency. In safety critical applications such as healthcare, it is essential that the workflow is error-free, that is, for every run of the workflow, necessary requirements are satisfied and unwanted situations do not occur. However, most tools and frameworks which support workflow specification are not formal enough to allow automated verification and/or are not user-friendly enough for the domain experts to use. In this paper we discuss an extension to a model-driven engineering (MDE) based approach to workflow modelling. Our goals are to provide a framework that can model typical healthcare protocols, by means of a visual tool which can be easily understood by the users (usually clinicians), and to articulate and model check behavioural properties. With this tool, the user can input a workflow model and workflow properties which are defined diagrammatically; the model is automatically transformed to DVE code (the DiVinE model checker's language) and the properties to LTL-formulae. If the workflow model is not valid wrt. a property, the tool provides a visual representation of a path which is a counterexample that can be easily analysed for debugging. The inherent agility of the MDE approach is especially useful in a healthcare setting because workflows, even for widely used clinical guidelines, generally need to be customized to local settings and updated frequently due to changing conditions, new medications or new research.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WCL8HS3K\\Rutle - 2013 - A User-friendly Tool for Model Checking Healthcare.pdf}
}

@article{ruttenUniversalCoalgebraTheory2000,
  title = {Universal Coalgebra: A Theory of Systems},
  shorttitle = {Universal Coalgebra},
  author = {Rutten, J.J.M.M.},
  year = {2000},
  month = oct,
  journal = {Theoretical Computer Science},
  volume = {249},
  number = {1},
  pages = {3--80},
  issn = {03043975},
  doi = {10.1016/S0304-3975(00)00056-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WEE2VA97\\Rutten - 2000 - Universal coalgebra a theory of systems.pdf}
}

@article{samimi-dehkordiEVLStraceNovel2018,
  title = {{{EVL}}+{{Strace}}: A Novel Bidirectional Model Transformation Approach},
  shorttitle = {{{EVL}}+{{Strace}}},
  author = {{Samimi-Dehkordi}, Leila and Zamani, Bahman and {Kolahdouz-Rahimi}, Shekoufeh},
  year = {2018},
  month = aug,
  journal = {Information and Software Technology},
  volume = {100},
  pages = {47--72},
  issn = {09505849},
  doi = {10.1016/j.infsof.2018.03.011},
  abstract = {Objective: To alleviate the aforementioned drawbacks, we propose a novel Bx approach, called EVL+Strace, which is built using the Epsilon Validation Language (EVL) on a domain-specific trace metamodel (Strace). Furthermore, an Eclipse-based toolkit, called MoDEBiTE, is developed to automatically produce the EVL+Strace artifacts including the specific trace metamodel and transformation code. Method: EVL+Strace exploits the ability of EVL to transform user updates on models from source to target and vice versa, simultaneously. The applied trace metamodel should be specific to the domains of source and target metamodels that prevents illegitimate trace elements. Additionally, it enables developers to specify the transformation concepts more precisely. A running example is applied to explain the components of EVL+Strace and application of MoDEBiTE. Result: EVL+Strace is the first practical interactive approach that can provide important bidirectional features, such as preservation and propagation. A feature model of Bx approaches is applied to compare EVL +Strace with the well-known Bx languages. To show the superiority of EVL+Strace and applicability of MoDEBiTE, a comprehensive evaluation on six case studies is performed. Conclusion: EVL+Strace provides an interactive transformation system to manage update conflicts. It uses the EVL language for defining Bx transformation that has an easy-to-learn syntax. It is developed based on Epsilon, which is a comprehensive and actively updated framework.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IWUJYTAE\\Samimi-Dehkordi et al. - 2018 - EVL+Strace a novel bidirectional model transforma.pdf}
}

@article{sanchez-alonsoCoordMaude2003,
  title = {{{CoordMaude}}},
  author = {{S{\'a}nchez-Alonso}, Marisol and Clemente, Pedro J. and Murillo, Juan M. and Hern{\'a}ndez, Juan},
  year = {2003},
  month = dec,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {82},
  number = {3},
  pages = {643--658},
  issn = {15710661},
  doi = {10.1016/S1571-0661(05)82633-7},
  abstract = {Developing concurrent applications in cooperative environments is an arduous task. This is mainly due to the fact that it is very difficult to specify the synchronized interaction between the entities composing the system. Using coordination models makes this task easier. The latest trends in this area suggest that to manage the successful implementation of complex systems, coordination models must support some key features regarding the coordination constraints: their separated specification, their unanticipated evolution and their dynamic change. However, supporting these features is not only a technical challenge: it must be also guaranteed that the application of a separately specified coordination pattern to a set of encapsulated entities, or the change of the coordination constraints in an already running software system will not produce semantic errors. This is just the problem focused in this paper. In particular, a method for generating formal interpretable specifications reproducing coordinated environments is presented. The method is based on the Coordinated Roles coordination model and makes use of Maude as a formal language. The benefits obtained are: (i) easy specification using the coordination model syntax, (ii) automatic generation of the corresponding formal specification and (iii) simulation of system behaviour.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\89YVU38Q\\Sánchez-Alonso et al. - 2003 - CoordMaude.pdf}
}

@book{sangiorgiPcalculusTheoryMobile2003,
  title = {The {$\pi$}-Calculus: A Theory of Mobile Processes},
  shorttitle = {The [Pi]-Calculus},
  author = {Sangiorgi, Davide and Walker, David},
  year = {2003},
  edition = {1st paperback edition},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge New York Port Melbourne}},
  isbn = {978-0-521-54327-9 978-0-521-78177-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IKFP4A5C\\Sangiorgi og Walker - 2003 - The π-calculus a theory of mobile processes.pdf}
}

@inproceedings{sarjoughianModelComposability2006,
  title = {Model {{Composability}}},
  booktitle = {Proceedings of the 2006 {{Winter Simulation Conference}}},
  author = {Sarjoughian, Hessam},
  year = {2006},
  month = dec,
  pages = {149--158},
  publisher = {{IEEE}},
  address = {{Monterey, CA, USA}},
  doi = {10.1109/WSC.2006.323047},
  abstract = {Composition of models is considered essential in developing heterogeneous complex systems and in particular simulation models capable of expressing a system's structure and behavior. This paper describes model composability concepts and approaches in terms of modeling formalisms. These composability approaches along with some of the key capabilities and challenges they pose are presented in the context of semiconductor supply chain manufacturing systems.},
  isbn = {978-1-4244-0501-5 978-1-4244-0500-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TWV8U7RF\\Sarjoughian - 2006 - Model Composability.pdf}
}

@inproceedings{schaferEnhancingDevelopmentConsistency2020,
  title = {Enhancing Development and Consistency of {{UML}} Models and Model Executions with {{USE}} Studio},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Sch{\"a}fer, Marcel and Gogolla, Martin},
  year = {2020},
  month = oct,
  pages = {1--5},
  publisher = {{ACM}},
  address = {{Virtual Event Canada}},
  doi = {10.1145/3417990.3422011},
  abstract = {The UML and OCL tool USE (UML-based Specification Environment) has been developed over more than one decade offering domain-specific languages for describing (1) UML class and statechart models, (2) OCL constraints for invariants (on classes and states) and pre- and postconditions (on operations and transitions), and (3) SOIL (Simple Ocl-like Imperative Language) command sequences for (3a) operation implementations and (3b) executions of model test cases. The three languages have been originally developed as independent textual languages intended for conventional editing. This contribution introduces a new integrated development environment for the three languages to give the developer projectional editing features. We discuss a number of advantages for model development in a developer interface called USE Studio1: (1) completion mechanisms for language syntax elements and already defined developer model elements, (2) structured, focused views on related language elements (e.g., one common view on all model associations), (3) consistency guarantees between the underlying model and model executions, and (4) basic common refactorings for the model and model executions.},
  isbn = {978-1-4503-8135-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GDGIZEX4\\Schäfer und Gogolla - 2020 - Enhancing development and consistency of UML model.pdf}
}

@article{schulzCategoricalFrameworkTransformation2011,
  title = {A Categorical Framework for the Transformation of Object-Oriented Systems: {{Models}} and Data},
  shorttitle = {A Categorical Framework for the Transformation of Object-Oriented Systems},
  author = {Schulz, Christoph and L{\"o}we, Michael and K{\"o}nig, Harald},
  year = {2011},
  month = mar,
  journal = {Journal of Symbolic Computation},
  volume = {46},
  number = {3},
  pages = {316--337},
  issn = {07477171},
  doi = {10.1016/j.jsc.2010.09.010},
  abstract = {Refactoring of information systems is hard, for two reasons. On the one hand, large databases exist which have to be adjusted. On the other hand, many programs access those data. Data and programs all have to be migrated in a consistent manner such that their semantics does not change. This paper addresses the data part of the problem and introduces a model for object-oriented structures, describing the schema level with classes, associations, and inheritance as well as the instance level with objects and links. Positive Horn formulas based on predicates are used to formulate constraints to be obeyed by the schema and instance level, in order to reflect object-oriented structures. Homomorphisms are used for the typing of the instance level as well as for the description of refactorings which specify the addition, folding, and unfolding of schema elements. A categorial framework is presented which allows us to derive instance migrations from schema transformations in such a way that instances of the old schema are automatically migrated into instances of the new schema. The natural use of the pullback functor for unfolding is followed by an initial semantics approach: Instance migration is completed with the help of a co-adjoint functor on arrow categories.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3EG4X82Q\\Schulz et al. - 2011 - A categorical framework for the transformation of .pdf}
}

@phdthesis{schulzTransformationObjektorientierterSysteme2010,
  title = {{Transformation objektorientierter Systeme basierend auf algebraischen Graph-Transformationen}},
  author = {Schulz, Christoph},
  year = {2010},
  month = jun,
  abstract = {Since the beginning of software development, making existing software conformant to new demands has always been an important topic. The extension of software by new functionality is facilitated or even made possible by software refactoring: improving the structure of software without changing its behaviour in order to implement additional functionality more easily. Unfortunately, the transformation of object-oriented data and the transformation of object-oriented software is usually examined separately. This work focuses on the transformation of whole object-oriented systems, i. e. of programs, running program instantiations (processes), and associated data. In order to achieve this goal, first a conceptional model for an appropriate description of object-oriented systems is developed. This model is then formalised by a specification with predicates and positive Horn formulas. Analogously to graph transformations, system transformations are then modelled by spans of homomorphisms. The main result of this work is the canonical deduction of the migration of data, programs, and processes from the transformation of the underlying schema, such that the transformation of a whole system can be uniquely determined by the transformation of the schema only. The work is rounded off by the treatment of the composition of transformations and an outlook of possible model extensions.},
  collaborator = {Technische Universit{\"a}t Berlin and Technische Universit{\"a}t Berlin and Ehrig, Hartmut},
  copyright = {Terms of German Copyright Law},
  langid = {german},
  school = {Technische Universit\"at Berlin},
  keywords = {004 Datenverarbeitung; Informatik,Evolution,Migration,Refactoring,Software,Transformation},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KDHK9KEU\\Schulz - 2010 - Transformation objektorientierter Systeme basieren.pdf}
}

@book{seidlUMLClassroom2015,
  title = {{{UML}} @ {{Classroom}}},
  author = {Seidl, Martina and Scholz, Marion and Huemer, Christian and Kappel, Gerti},
  year = {2015},
  series = {Undergraduate {{Topics}} in {{Computer Science}}},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-12742-2},
  isbn = {978-3-319-12741-5 978-3-319-12742-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7WMTSZTU\\Seidl et al. - 2015 - UML @ Classroom.pdf}
}

@article{seshiaConcurrentStateMachines,
  title = {Concurrent State Machines and Composition},
  author = {Seshia, Sanjit A},
  pages = {11},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4UHNQC2W\\lecture_08.pdf;C\:\\Users\\Tim\\Zotero\\storage\\6L29XY98\\Seshia - Introduction to Embedded Systems.pdf}
}

@inproceedings{simkoTheoryCyberphysicalSystems2014,
  title = {Towards a Theory for Cyber-Physical Systems Modeling},
  author = {Simko, G. and Levendovszky, T. and Maroti, M. and Sztipanovits, J.},
  year = {2014},
  series = {Proceedings of the 4th {{ACM Workshop}} on {{Design}}, {{Modeling}} and {{Evaluation}} of {{Cyber Physical Systems}}, {{CyPhy}} 2014},
  pages = {56--61},
  doi = {10.1145/2593458.2593463},
  document_type = {Conference Paper},
  source = {Scopus},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\97A73LL7\\Zhou et al. - 2014 - Modeling methods for dynamic behaviors of cyber-ph.pdf}
}

@inproceedings{sinhaBehavioralModelComposition2002,
  title = {Behavioral Model Composition in Simulation-Based Design},
  booktitle = {Proceedings 35th {{Annual Simulation Symposium}}. {{SS}} 2002},
  author = {Sinha, R. and Paredis, C.J.J. and Khosla, P.K.},
  year = {2002},
  pages = {308--315},
  publisher = {{IEEE Comput. Soc}},
  address = {{San Deigo, CA, USA}},
  doi = {10.1109/SIMSYM.2002.1000168},
  isbn = {978-0-7695-1552-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\I9T396K8\\Sinha et al. - 2002 - Behavioral model composition in simulation-based d.pdf}
}

@incollection{skouradakiMicroBenchmarkingBPMNWorkflow2016,
  title = {Micro-{{Benchmarking BPMN}} 2.0 {{Workflow Management Systems}} with {{Workflow Patterns}}},
  booktitle = {Advanced {{Information Systems Engineering}}},
  author = {Skouradaki, Marigianna and Ferme, Vincenzo and Pautasso, Cesare and Leymann, Frank and {van Hoorn}, Andr{\'e}},
  editor = {Nurcan, Selmin and Soffer, Pnina and Bajec, Marko and Eder, Johann},
  year = {2016},
  volume = {9694},
  pages = {67--82},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-39696-5_5},
  isbn = {978-3-319-39695-8 978-3-319-39696-5},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NKLWAVBP\\Skouradaki et al. - 2016 - Micro-Benchmarking BPMN 2.0 Workflow Management Sy.pdf}
}

@article{soekenVerifyingDynamicAspects2011,
  title = {Verifying Dynamic Aspects of {{UML}} Models},
  author = {Soeken, M. and Wille, R. and Drechsler, R.},
  year = {2011},
  journal = {2011 Design, Automation \& Test in Europe},
  pages = {1--6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PZYASUMN\\Soeken et al. - Verifying Dynamic Aspects of UML Models.pdf}
}

@misc{SoftwareEngineeringCode2016,
  title = {The {{Software Engineering Code}} of {{Ethics}} and {{Professional Practice}}},
  year = {2016},
  month = jun,
  abstract = {The joint ACM/IEEE-CS Software Engineering Code was published as: Don Gotterbarn, Keith Miller, and Simon Rogerson. 1997. Software engineering code of ethics. Commun. ACM 40, 11 (November 1997), 110-118. DOI: 10.1145/265684.265699 Note that this code is for anyone that is a member of the software engineering profession, regardless of ACM membership status. You may also wish to consult The},
  langid = {american},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\J4AEYLPZ\\software-engineering-code.html}
}

@inproceedings{solaimanToolAutomaticVerification2015,
  title = {A {{Tool}} for the {{Automatic Verification}} of {{BPMN Choreographies}}},
  booktitle = {2015 {{IEEE International Conference}} on {{Services Computing}}},
  author = {Solaiman, Ellis and Sun, Wenzhong and {Molina-Jimenez}, Carlos},
  year = {2015},
  month = jun,
  pages = {728--735},
  publisher = {{IEEE}},
  address = {{New York City, NY, USA}},
  doi = {10.1109/SCC.2015.103},
  abstract = {The Business Process Model Notation (BPMN) provides a standard graphical language that can be used by business analysts for modeling business process choreographies. A challenging task is to formally verify that constructed choreography models are logically correct with respect to safety, liveness, and various application-specific correctness requirements. To aid with this important task, we present a model checker based framework to automate the verification process. The main component of our framework is the BPMNverifier, a tool that can automatically convert BPMN choreography models into PROMELA, the input language of the SPIN model checker. We describe the implementation and functionality of the BPMNverifier, and how the tool eases the task of expressing Linear Temporal Logic (LTL) correctness requirements, through its LTL Manager component.},
  isbn = {978-1-4673-7281-7},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4EC2NVJU\\Solaiman et al. - 2015 - A Tool for the Automatic Verification of BPMN Chor.pdf}
}

@article{soukainaModelDrivenEngineering2018,
  title = {Model {{Driven Engineering}} ({{MDE}}) {{Tools}}: {{A Survey}}},
  shorttitle = {Model {{Driven Engineering}} ({{MDE}}) {{Tools}}},
  author = {Soukaina, Moujtahid},
  year = {2018},
  journal = {American Journal of Science, Engineering and Technology},
  volume = {3},
  number = {2},
  pages = {29},
  issn = {2578-8345},
  doi = {10.11648/j.ajset.20180302.11},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ISVWC58N\\Soukaina - 2018 - Model Driven Engineering (MDE) Tools A Survey.pdf}
}

@incollection{spanoudakisInconsistencyManagementSoftware2001,
  title = {Inconsistency {{Management}} in {{Software Engineering}}: {{Survey}} and {{Open Research Issues}}},
  shorttitle = {{{INCONSISTENCY MANAGEMENT IN SOFTWARE ENGINEERING}}},
  author = {Spanoudakis, George and Zisman, Andrea},
  year = {2001},
  month = dec,
  pages = {329--380},
  doi = {10.1142/9789812389718_0015},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MYZYNXIK\\Spanoudakis og Zisman - 2001 - INCONSISTENCY MANAGEMENT IN SOFTWARE ENGINEERING .pdf}
}

@inproceedings{stevensBidirectionalTransformationsLarge2017,
  title = {Bidirectional {{Transformations}} in the {{Large}}},
  booktitle = {2017 {{ACM}}/{{IEEE}} 20th {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}} ({{MODELS}})},
  author = {Stevens, Perdita},
  year = {2017},
  month = sep,
  pages = {1--11},
  doi = {10.1109/MODELS.2017.8},
  abstract = {The model-driven development of systems involves multiple models, metamodels and transformations, and relationships between them. A bidirectional transformation (bx) is usually defined as a means of maintaining consistency between "two (or more)" models. This includes cases where one model may be generated from one or more others, as well as more complex ("symmetric") cases where models record partially overlapping information. In recent years binary bx, those relating two models, have been extensively studied. Multiary1 bx, those relating more than two models, have received less attention. In this paper we consider how a multiary consistency relation may be defined in terms of binary consistency relations, and how consistency restoration may be carried out on a network of models and relationships between them. We relate this to megamodelling and discuss further research that is needed.},
  keywords = {bidirectional transformation,binary consistency relations,Computational modeling,consistency restoration,metamodels,Model-driven development,multiary consistency relation,Safety,Software,software engineering,Stakeholders,Unified modeling language},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NUANW2L6\\Stevens - 2017 - Bidirectional Transformations in the Large.pdf}
}

@inproceedings{stevensSoundOptimalFlexible2018,
  title = {Towards Sound, Optimal, and Flexible Building from Megamodels},
  booktitle = {Proceedings of the 21th {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Stevens, Perdita},
  year = {2018},
  month = oct,
  pages = {301--311},
  publisher = {{ACM}},
  address = {{Copenhagen Denmark}},
  doi = {10.1145/3239372.3239378},
  isbn = {978-1-4503-4949-9},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PXBSH6UX\\Stevens - 2018 - Towards sound, optimal, and flexible building from.pdf}
}

@article{stunkelComprehensiveSystemsFormal2021,
  title = {Comprehensive {{Systems}}: {{A}} Formal Foundation for {{Multi-Model Consistency Management}}},
  shorttitle = {Comprehensive {{Systems}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  year = {2021},
  month = jul,
  journal = {Formal Aspects of Computing},
  issn = {0934-5043, 1433-299X},
  doi = {10.1007/s00165-021-00555-2},
  abstract = {Abstract                            Model management is a central activity in Software Engineering. The most challenging aspect of model management is to keep inter-related models consistent with each other while they evolve. As a consequence, there is a lot of scientific activity in this area, which has produced an extensive body of knowledge, methods, results and tools. The majority of these approaches, however, are limited to binary inter-model relations; i.e. the synchronisation of exactly two models. Yet, not every multi-ary relation can be factored into a family of  binary relations. In this paper, we propose and investigate a novel               comprehensive system               construction, which is able to represent multi-ary relations among multiple models in an               integrated               manner and thus serves as a               formal  foundation               for artefacts used in consistency management activities involving multiple models. The construction is based on the definition of               partial               commonalities among a set of models using the same language, which is used to denote the (local) models. The main               theoretical               results of this paper are proofs of the facts that comprehensive systems are an admissible environment for (i) applying formal means of consistency verification (diagrammatic predicate framework), (ii) performing algebraic graph transformation (weak adhesive HLR category), and (iii) that they generalise the underlying setting of graph diagrams and triple graph grammars.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SJS3QB85\\Stünkel et al. - 2021 - Comprehensive Systems A formal foundation for Mul.pdf}
}

@phdthesis{stunkelFrameworkMultimodelConsistency2022,
  title = {A Framework for Multi-Model Consistency Management},
  author = {St{\"u}nkel, Patrick},
  year = {2022},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XW9TKB7E\\Stünkel - A framework for multi-model consistency management.pdf}
}

@article{stunkelGraphQLFederationModelBased2020,
  title = {{{GraphQL Federation}}: {{A Model-Based Approach}}.},
  shorttitle = {{{GraphQL Federation}}},
  author = {St{\"u}nkel, Patrick and {von Bargen}, Ole and Rutle, Adrian and Lamo, Yngve},
  year = {2020},
  journal = {The Journal of Object Technology},
  volume = {19},
  number = {2},
  pages = {18:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2020.19.2.a18},
  abstract = {The Graph Query Language (GraphQL) is a framework for developing Web Services, which works on the domain model level rather than the functions. While the declarative nature of this framework has already attracted the interest of practitioners in both academia and industry, it still lacks integration capabilities. This shortcoming has been recognized in the industry; there exists a first tool creating a federation\textemdash a virtual integrated system\textemdash on top of instrumented systems. Being relatively new, it suffers from a few practical and conceptual shortcomings, such as consolidation of (conflicting) schemas and identification of multiple types. In this paper, we will analyze the federation challenge and propose a solution utilizing multi-view modeling and domain specific modeling. Our approach is accompanied by a proof-of-concept implementation and provides a model-based presentation of the GraphQL framework.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DD7UDMBV\\Stünkel et al. - 2020 - GraphQL Federation A Model-Based Approach..pdf;C\:\\Users\\Tim\\Zotero\\storage\\K5F78ICK\\thesis_Integration_of_Web_Services_and_their_data_models_with_special_regard_to_GraphQL.pdf}
}

@inproceedings{stunkelMultimodelCorrespondenceIntermodel2018,
  title = {Multimodel Correspondence through Inter-Model Constraints},
  booktitle = {Conference {{Companion}} of the 2nd {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}} - {{Programming}}'18 {{Companion}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  year = {2018},
  pages = {9--17},
  publisher = {{ACM Press}},
  address = {{Nice, France}},
  doi = {10.1145/3191697.3191715},
  abstract = {The synchronisation of n {$\geq$} 2 heterogenously typed models requires a thorough understanding of global consistency rules. After having related these models by determining identical entities in them, we express the global rules in terms of diagrammatic predicates imposed on a comprehensive metamodel, which integrates the structural properties of all involved model spaces. If the global rules are violated, a possible subsequent consistency restoration can make use of formal descriptions for the verification of these rules.},
  isbn = {978-1-4503-5513-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KT9VJPF4\\Stünkel et al. - 2018 - Multimodel correspondence through inter-model cons.pdf}
}

@article{stunkelMultiModelEvolutionModel2021,
  title = {Multi-{{Model Evolution}} through {{Model Repair}}.},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Rutle, Adrian and Lamo, Yngve},
  year = {2021},
  journal = {The Journal of Object Technology},
  volume = {20},
  number = {1},
  pages = {1:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.1.a2},
  abstract = {Design and development of complex software systems usually comprises multiple inter-related models, i.e. abstract representations of certain aspects of the underlying system. The relations between these models induce global consistency conditions which the models collectively must fulfill. At the same time, these models are subject to frequent changes, and as a result, maintaining their global consistency over time becomes an important issue in model management in general and Model-Driven Software Engineering in particular.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\K24IUATQ\\Stünkel et al. - 2021 - Multi-Model Evolution through Model Repair..pdf}
}

@incollection{stunkelMultipleModelSynchronization2020,
  title = {Towards {{Multiple Model Synchronization}} with {{Comprehensive Systems}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  editor = {Wehrheim, Heike and Cabot, Jordi},
  year = {2020},
  volume = {12076},
  pages = {335--356},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-45234-6_17},
  abstract = {Model management is a central activity in Software Engineering. The most challenging aspect of model management is to keep models consistent with each other while they evolve. As a consequence, there has been increasing activity in this area, which has produced a number of approaches to address this synchronization challenge. The majority of these approaches, however, is limited to a binary setting; i.e. the synchronization of exactly two models with each other. A recent Dagstuhl seminar on multidirectional transformations made it clear that there is a need for further investigations in the domain of general multiple model synchronization simply because not every multiary consistency relation can be factored into binary ones. However, with the help of an auxiliary artifact, which provides a global view over all models, multiary synchronization can be achieved by existing binary model synchronization means. In this paper, we propose a novel comprehensive system construction to produce such an artifact using the same underlying base modelling language as the one used to define the models. Our approach is based on the definition of partial commonalities among a set of aligned models. Comprehensive systems can be shown to generalize the underlying categories of graph diagrams and triple graph grammars and can efficiently be implemented in existing tools.},
  isbn = {978-3-030-45233-9 978-3-030-45234-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SHE2XXBR\\extended.pdf;C\:\\Users\\Tim\\Zotero\\storage\\UR9Z7ZXF\\Stünkel et al. - 2020 - Towards Multiple Model Synchronization with Compre.pdf;C\:\\Users\\Tim\\Zotero\\storage\\ZPNVXGHB\\summary.pdf}
}

@article{stunkelProposal,
  title = {Correspondence and {{Conformance Preserving Model Changes}} in {{Multi Modeling}}},
  author = {St{\"u}nkel, Patrick},
  pages = {14},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XMK27CL2\\Stünkel - Correspondence and Conformance Preserving Model Ch.pdf}
}

@misc{Summary,
  title = {1: {{Summary}}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2ZNJEYUH\\12.pdf}
}

@book{taylorSoftwareArchitectureFoundations2009,
  title = {Software Architecture: {{Foundations}}, Theory, and Practice},
  author = {Taylor, R. N. and Medvidovic, N. and Dashofy, E. M.},
  year = {2009},
  publisher = {{Wiley Publishing}},
  abstract = {Software architecture is foundational to the development of large, practical software-intensive applications. This brand-new text covers all facets of software architecture and how it serves as the intellectual centerpiece of software development and evolution. Critically, this text focuses on supporting creation of real implemented systems. Hence the text details not only modeling techniques, but design, implementation, deployment, and system adaptation \textendash{} as well as a host of other topics \textendash{} putting the elements in context and comparing and contrasting them with one another. Rather than focusing on one method, notation, tool, or process, this new text/reference widely surveys software architecture techniques, enabling the instructor and practitioner to choose the right tool for the job at hand. Software Architecture is intended for upper-division undergraduate and graduate courses in software architecture, software design, component-based software engineering, and distributed systems; the text may also be used in introductory as well as advanced software engineering courses.},
  isbn = {0-470-16774-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\97LWRAWI\\Software Architecture Foundations, Theory, and Practice by Richard N. Taylor Nenad Medvidovic Eric Dashofy.pdf}
}

@phdthesis{tenaMultilevelModellingInfrastructure2021,
  title = {A {{Multilevel Modelling Infrastructure}} for the {{Definition}}, {{Execution}} and {{Composition}} of {{Domain-Specific Modelling Languages}}},
  author = {Tena, Alejandro Rodr{\'i}guez},
  year = {2021},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4N9L79EQ\\Tena - A Multilevel Modelling Infrastructure for the Defi.pdf}
}

@article{thierry-miegUMLBehavioralConsistency2008,
  title = {{{UML}} Behavioral Consistency Checking Using Instantiable {{Petri}} Nets},
  author = {{Thierry-Mieg}, Yann and Hillah, Lom-Messan},
  year = {2008},
  month = oct,
  journal = {Innovations in Systems and Software Engineering},
  volume = {4},
  number = {3},
  pages = {293--300},
  issn = {1614-5054},
  doi = {10.1007/s11334-008-0065-0},
  abstract = {Model-driven engineering (MDE) development methods are gaining increasing attention from industry. In MDE, the model is the primary artifact and serves several goals, including code generation, requirements traceability, and model-based testing. MDE thus enables cost-effective building of models versus direct coding of an application. Thus model-based formal verification of behavioral consistency is desirable as it helps improve model quality. Our approach is based on translation of a UML model to instantiable Petri nets (IPN). This formalism is based on the semantics of Petri nets, but introduces the concepts of type and instance. This allows one to accurately capture these concepts in UML models. IPN support hierarchical descriptions natively, and use the notion of transition synchronization for composition of behaviors. This is a general and powerful mechanism borrowed from process algebra. We show that IPN allow one to adequately address the challenges of translation from UML for analysis purposes. The approach has been implemented and experimental results are presented.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TNGEYCAA\\Thierry-Mieg og Hillah - 2008 - UML behavioral consistency checking using instanti.pdf}
}

@misc{timkrauterArtifactsTERMGRAPH2022,
  title = {Artifacts - {{TERMGRAPH-2022}}},
  author = {{Tim Kr\"auter}},
  journal = {GitHub},
  abstract = {Contribute to timKraeuter/TERMGRAPH-2022 development by creating an account on GitHub.},
  howpublished = {https://github.com/timKraeuter/TERMGRAPH-2022},
  langid = {english}
}

@article{torreHowConsistencyHandled2018,
  title = {How Consistency Is Handled in {{Model Driven Software Engineering}} and {{UML}}: A Survey of Experts in Academia and Industry},
  author = {Torre, Damiano and Genero, Marcela and Labiche, Yvan and Elaasar, Maged},
  year = {2018},
  pages = {37},
  abstract = {Model Driven Software Engineering (MDSE) is an established approach for developing complex software systems. The Unified Modelling Language (UML) is one of the most used model languages for applying the MDSE approach. UML has 14 diagram types that describe different perspectives of one software system under development. These diagrams are strongly dependent on each other, and must be consistent with one another. The main objectives of this paper are: (1) to survey the diffusion and relevance of model consistency issues with experts, in order to understand model consistency in the MDSE/UML contexts; and more importantly, (2) to validate a set of 116 UML consistency rules from the literature, so as to identify the rules that should always be enforced. We conducted a personal opinion survey with 106 MDSE experts from academia and industry, by means of an online questionnaire, from May to June 2016. The survey results describe a detailed overview of how the topic of MDSE/UML consistency is addressed in academia and industry. In addition, this survey identified a set of 52 out of 116 UML consistency rules which should always be checked in every UML model. This subset of 52 rules could be: (a) considered to be added to the UML standard, (b) used as a reference to researchers who study UML/MDSE, (c) used as a practical example for teaching purposes.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SW2VLZ5P\\Torre et al. - 2018 - How consistency is handled in Model Driven Softwar.pdf}
}

@article{torresSystematicLiteratureReview2020,
  title = {A Systematic Literature Review of Cross-Domain Model Consistency Checking by Model Management Tools},
  author = {Torres, Weslley and {van~den Brand}, Mark G. J. and Serebrenik, Alexander},
  year = {2020},
  month = oct,
  journal = {Software and Systems Modeling},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-020-00834-1},
  abstract = {Objective The goal of this study is to identify gaps and challenges related to cross-domain model management focusing on consistency checking. Method We conducted a systematic literature review. We used the keyword-based search on Google Scholar, and we identified 618 potentially relevant studies; after applying inclusion and exclusion criteria, 96 papers were selected for further analysis. Results The main findings/contributions are: (i) a list of available tools used to support model management; (ii) 40\% of the tools can provide consistency checking on models of different domains and 25\% on models of the same domain, and 35\% do not provide any consistency checking; (iii) available strategies to keep the consistency between models of different domains are not mature enough; (iv) most of the tools that provide consistency checking on models of different domains can only capture up to two inconsistency types; (v) the main challenges associated with tools that manage models on different domains are related to interoperability between tools and the consistency maintenance. Conclusion The results presented in this study can be used to guide new research on maintaining the consistency between models of different domains. Example of further research is to investigate how to capture the Behavioral and Refinement inconsistency types. This study also indicates that the tools should be improved in order to address, for example, more kinds of consistency check.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TMLLE76K\\Torres et al. - 2020 - A systematic literature review of cross-domain mod.pdf}
}

@article{torreSystematicIdentificationConsistency2018,
  title = {A Systematic Identification of Consistency Rules for {{UML}} Diagrams},
  author = {Torre, Damiano and Labiche, Yvan and Genero, Marcela and Elaasar, Maged},
  year = {2018},
  month = oct,
  journal = {Journal of Systems and Software},
  volume = {144},
  pages = {121--142},
  issn = {01641212},
  doi = {10.1016/j.jss.2018.06.029},
  abstract = {UML diagrams describe different views of one piece of software. These diagrams strongly depend on each other and must therefore be consistent with one another, since inconsistencies between diagrams may be a source of faults during software development activities that rely on these diagrams. It is therefore paramount that consistency rules be defined and that inconsistencies be detected, analyzed and fixed. The relevant literature shows that authors typically define their own UML consistency rules, sometimes defining the same rules and sometimes defining rules that are already in the UML standard. The reason might be that no consolidated set of rules that are deemed relevant by authors can be found to date. The aim of our research is to provide a consolidated set of UML consistency rules and obtain a detailed overview of the current research in this area. We therefore followed a systematic procedure in order to collect and analyze UML consistency rules. We then consolidated a set of 116 UML consistency rules (avoiding redundant definitions or definitions already in the UML standard) that can be used as an important reference for UML-based software development activities, for teaching UML-based software development, and for further research.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\P6Z3ESVX\\Torre et al. - 2018 - A systematic identification of consistency rules f.pdf}
}

@inproceedings{torreUMLConsistencyRules2014,
  title = {{{UML}} Consistency Rules: A Systematic Mapping Study},
  shorttitle = {{{UML}} Consistency Rules},
  booktitle = {Proceedings of the 18th {{International Conference}} on {{Evaluation}} and {{Assessment}} in {{Software Engineering}} - {{EASE}} '14},
  author = {Torre, Damiano and Labiche, Yvan and Genero, Marcela},
  year = {2014},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{London, England, United Kingdom}},
  doi = {10.1145/2601248.2601292},
  abstract = {Objective: The aim of this article is to deliver a comprehensive summary of UML consistency rules as they are described in the literature to date to obtain an extensive and detailed overview of the current research in this area. Method: We performed a Systematic Mapping Study by following well-known guidelines. We selected 95 primary studies from a search with seven search engines performed in December 2012. Results: Different results are worth mentioning. First it appears that researchers tend to discuss very similar consistency rules, over and over again. Most rules are horizontal (98.10\%) and syntactic (88.21\%). The most used diagrams are the class diagram (71.58\%), the sequence diagram (47.37\%) and the state machine diagram (42.11\%). Conclusion: The fact that many rules are duplicated in primary studies confirms the need for a well-accepted list of consistency rules. This paper is a first step in this direction. Results indicate that much more work is needed to develop consistency rules for all 14 UML diagrams, in all dimensions of consistency (e.g., semantic and syntactic on the one hand, horizontal, vertical and evolution on the other hand).},
  isbn = {978-1-4503-2476-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8B7EMFGA\\Torre et al. - 2014 - UML consistency rules a systematic mapping study.pdf}
}

@article{tripakisModularFormalSemantics2013,
  title = {A Modular Formal Semantics for {{Ptolemy}}},
  author = {Tripakis, Stavros and Stergiou, Christos and Shaver, Chris and Lee, Edward A.},
  year = {2013},
  month = aug,
  journal = {Mathematical Structures in Computer Science},
  volume = {23},
  number = {4},
  pages = {834--881},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129512000278},
  abstract = {Ptolemy               \textdaggerdbl{}               is an open-source and extensible modelling and simulation framework. It offers heterogeneous modeling capabilities by allowing different models of computation, both untimed and timed, to be composed hierarchically in an arbitrary fashion. This paper proposes a formal semantics for Ptolemy that is modular in the sense that atomic actors and their compositions are treated in a unified way. In particular, all actors conform to an executable interface that contains four functions: fire (produce outputs given current state and inputs); postfire (update state instantaneously); deadline (how much time the actor is willing to let elapse); and time-update (update the state with the passage of time). Composite actors are obtained using composition operators that in Ptolemy are called directors. Different directors realise different models of computation. In this paper, we formally define the directors for the following models of computation: synchronous- reactive, discrete event, continuous time, process networks and modal models.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\533DI42E\\Tripakis et al. - 2013 - A modular formal semantics for Ptolemy.pdf}
}

@incollection{trollmannExtendingModelModel2015,
  title = {Extending {{Model}} to {{Model Transformation Results}} from {{Triple Graph Grammars}} to {{Multiple Models}}},
  booktitle = {Theory and {{Practice}} of {{Model Transformations}}},
  author = {Trollmann, Frank and Albayrak, Sahin},
  editor = {Kolovos, Dimitris and Wimmer, Manuel},
  year = {2015},
  volume = {9152},
  pages = {214--229},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21155-8_16},
  isbn = {978-3-319-21154-1 978-3-319-21155-8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\95E56VCZ\\Kolovos und Wimmer - 2015 - Theory and Practice of Model Transformations 8th .pdf}
}

@incollection{vanderstraetenChallengesModelDrivenSoftware2009,
  title = {Challenges in {{Model-Driven Software Engineering}}},
  booktitle = {Models in {{Software Engineering}}},
  author = {Van Der Straeten, Ragnhild and Mens, Tom and Van Baelen, Stefan},
  editor = {Chaudron, Michel R. V.},
  year = {2009},
  volume = {5421},
  pages = {35--47},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-01648-6_4},
  abstract = {After more than a decade of research in Model-Driven Engineering (MDE), the state-of-the-art and the state-of-the-practice in MDE has significantly progressed. Therefore, during this workshop we raised the question of how to proceed next, and we identified a number of future challenges in the field of MDE. The objective of the workshop was to provide a forum for discussing the future of MDE research and practice. Seven presenters shared their vision on the future challenges in the field of MDE. Four breakout groups discussed scalability, consistency and co-evolution, formal foundations, and industrial adoption, respectively. These themes were identified as major categories of challenges by the participants. This report summarises the different presentations, the MDE challenges identified by the workshop participants, and the discussions of the breakout groups.},
  isbn = {978-3-642-01647-9 978-3-642-01648-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RZN9P572\\Van Der Straeten et al. - 2009 - Challenges in Model-Driven Software Engineering.pdf}
}

@article{vanderaalstWorkflowPatterns2003,
  title = {Workflow Patterns},
  author = {{van der Aalst}, Wil M. P. and {ter Hofstede}, Arthur H. M. and Kiepuszewski, Bartek and Barros, Alistair P.},
  year = {2003},
  journal = {Distributed Parallel Databases},
  volume = {14},
  number = {1},
  pages = {5--51},
  doi = {10.1023/A:1022883727209},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/dpd/AalstHKB03.bib},
  timestamp = {Mon, 18 May 2020 12:42:55 +0200},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VCJYIDAE\\van der Aalst et al. - 2003 - Workflow patterns.pdf}
}

@inproceedings{vangheluweIntroductionMultiparadigmModelling2002,
  title = {An Introduction to Multi-Paradigm Modelling and Simulation.},
  author = {Vangheluwe, Hans and {de Lara}, Juan and Mosterman, P.J.},
  year = {2002},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9SEUA4WK\\Vangheluwe et al. - 2002 - An introduction to multi-paradigm modelling and si.pdf}
}

@article{vangorpPetriNetsStatechartsTransformation2013,
  title = {The {{Petri-Nets}} to {{Statecharts Transformation Case}}},
  author = {Van Gorp, Pieter and Rose, Louis M.},
  year = {2013},
  month = nov,
  journal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {135},
  pages = {16--31},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.135.3},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PWEQZMMA\\Van Gorp og Rose - 2013 - The Petri-Nets to Statecharts Transformation Case.pdf}
}

@article{vangorpVisualTokenbasedFormalization2013,
  title = {A Visual Token-Based Formalization of {{BPMN}} 2.0 Based on in-Place Transformations},
  author = {Van Gorp, Pieter and Dijkman, Remco},
  year = {2013},
  month = feb,
  journal = {Information and Software Technology},
  volume = {55},
  number = {2},
  pages = {365--394},
  issn = {09505849},
  doi = {10.1016/j.infsof.2012.08.014},
  abstract = {Objective: This paper provides a BPMN 2.0 semantics formalization that is more complete and intuitive than existing formalizations. Method: The formalization consists of in-place graph transformation rules that are documented visually using BPMN syntax. In-place transformations update models directly and do not require mappings to other languages. We have used a mature tool and test-suite to develop a reference implementation of all rules. Results: Our formalization is a promising complement to the standard, in particular because all rules have been extensively verified and because conceptual validation is facilitated (the informal semantics also describes in-place updates). Conclusion: Since our formalization has already revealed problems with the standard and since the BPMN is still evolving, the maintainers of the standard can benefit from our results. Moreover, tool vendors can use our formalization and reference implementation for verifying conformance to the standard.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RQ2HG9Y9\\Van Gorp og Dijkman - 2013 - A visual token-based formalization of BPMN 2.0 bas.pdf}
}

@phdthesis{varalarsenBCOolBehavioralCoordination2016,
  title = {{{BCOol}} : The Behavioral Coordination Operator Language},
  author = {Vara Larsen, Matias},
  year = {2016},
  month = apr,
  number = {2016NICE4013},
  hal_id = {tel-01302875},
  hal_version = {v2},
  pdf = {https://tel.archives-ouvertes.fr/tel-01302875v2/file/2016NICE4013.pdf},
  school = {Universit\'e Nice Sophia Antipolis},
  keywords = {Coordination languages,DSMLs (Domain Specific Modeling Languages),DSMLs (Langages de Modélisation),Heterogeneous Modeling,Langages de coordination,Modèles hétérogènes},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5DYJVQBR\\Vara Larsen - 2016 - BCool the behavioral coordination operator langua.pdf}
}

@inproceedings{varalarsenBehavioralCoordinationOperator2015,
  title = {A {{Behavioral Coordination Operator Language}} ({{BCOoL}})},
  booktitle = {2015 {{ACM}}/{{IEEE}} 18th {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}} ({{MODELS}})},
  author = {Vara Larsen, Matias Ezequiel and DeAntoni, Julien and Combemale, Benoit and Mallet, Frederic},
  year = {2015},
  month = sep,
  pages = {186--195},
  publisher = {{IEEE}},
  address = {{Ottawa, ON, Canada}},
  doi = {10.1109/MODELS.2015.7338249},
  abstract = {The design of complex systems involves various, possibly heterogeneous, structural and behavioral models. In modeldriven engineering, the coordination of behavioral models to produce a single integrated model is necessary to provide support for validation and verification. Indeed, it allows system designers to understand and validate the global and emerging behavior of the system. However, the manual coordination of models is tedious and error-prone, and current approaches to automate the coordination are bound to a fixed set of coordination patterns. In this paper, we propose a Behavioral Coordination Operator Language (B-COOL) to reify coordination patterns between specific domains by using coordination operators between the Domain-Specific Modeling Languages used in these domains. Those operators are then used to automate the coordination of models conforming to these languages. We illustrate the use of B-COOL with the definition of coordination operators between timed finite state machines and activity diagrams.},
  isbn = {978-1-4673-6908-4},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\X3RN7WNK\\Vara Larsen et al. - 2015 - A Behavioral Coordination Operator Language (BCOoL.pdf}
}

@inproceedings{varroFormalSemanticsUML2002,
  title = {A Formal Semantics of {{UML}} Statecharts by Model Transition Systems},
  booktitle = {Graph Transformation},
  author = {Varr{\'o}, D{\'a}niel},
  editor = {Corradini, Andrea and Ehrig, Hartmut and Kreowski, Hans -J{\"o}rg and Rozenberg, Grzegorz},
  year = {2002},
  pages = {378--392},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML Statecharts are well-known visual means to capture the dynamic behavior of reactive systems in the object-oriented design methodology. Since the UML standard only contains an informal description on how to execute such statemachines mathematically precise semantic frameworks are required for an automated analysis. The current paper presents a formal semantics for UML statecharts based on a combination of metamodeling and graph transformation that is (i) simultaneously visual and precise, and (ii) clearly separates derived static concepts (like priorities, conflicts, etc.) from their dynamic interpretation thus scaling up well for different statechart variants (with, e.g., various priority strategies) and potential future changes in the standard.},
  isbn = {978-3-540-45832-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JIX6BM2P\\Varro - A Formal Semantics of UML Statecharts by Model Tra.pdf}
}

@article{vasilecasAnalysisUsingResources2014,
  title = {Analysis of {{Using Resources}} in {{Business Process Modeling}} and {{Simulation}}},
  author = {Vasilecas, Olegas and Laureckas, Evaldas and Rima, Audrius},
  year = {2014},
  month = dec,
  journal = {Applied Computer Systems},
  volume = {16},
  number = {1},
  pages = {19--25},
  issn = {2255-8691},
  doi = {10.1515/acss-2014-0009},
  abstract = {One of the key purposes of Business Process Model and Notation (BPMN) is to support graphical representation of the process model. However, such models have a lack of support for the graphical representation of resources, whose processes are used during simulation or execution of process instance. The paper analyzes different methods and their extensions for resource modeling. Further, this article presents a selected set of resource properties that are relevant for resource modeling. The paper proposes an approach that explains how to use the selected set of resource properties for extension of process modeling using BPMN and simulation tools. They are based on BPMN, where business process instances use resources in a concurrency manner.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZJFTSKZ4\\Vasilecas et al. - 2014 - Analysis of Using Resources in Business Process Mo.pdf}
}

@misc{VisualDebuggerIntelliJ,
  title = {Visual {{Debugger}} - {{IntelliJ IDEs Plugin}} | {{Marketplace}}},
  journal = {JetBrains Marketplace},
  abstract = {This plugin visualizes the variables during a debugging session as a UML object diagram.     The plugin is used alongside normal debugging.},
  howpublished = {https://plugins.jetbrains.com/plugin/16851-visual-debugger}
}

@article{voelterDesigningImplementingUsing,
  title = {Designing, {{Implementing}} and {{Using Domain-Specific Languages}}},
  author = {Voelter, Markus},
  pages = {560},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZB3TPWFZ\\Voelter - Designing, Implementing and Using Domain-Speciﬁc L.pdf}
}

@book{walickiIntroductionMathematicalLogic2017,
  title = {Introduction to Mathematical Logic},
  author = {Walicki, Micha{\l}},
  year = {2017},
  edition = {Extended edition},
  publisher = {{World Scientific}},
  address = {{New Jersey}},
  isbn = {978-981-4719-95-7 978-981-4719-96-4},
  langid = {english},
  lccn = {QA9 .W334 2017},
  keywords = {Logic; Symbolic and mathematical},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FB9A7QHH\\Walicki - 2017 - Introduction to mathematical logic.pdf}
}

@phdthesis{wangCorrectModellingModel2016,
  title = {Towards {{Correct Modelling}} and {{Model Transformation}} in {{DPF}}},
  author = {Wang, Xiaoliang},
  year = {2016},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\K7BEGNXJ\\dr-thesis-2016-Xiaoliang-Wang.pdf}
}

@article{wangModelCheckingHealthcare2014,
  title = {Model {{Checking Healthcare Workflows Using Alloy}}},
  author = {Wang, Xiaoliang},
  year = {2014},
  journal = {Procedia Computer Science},
  pages = {8},
  abstract = {Workflows are used to organize business processes, and workflow management tools are used to guide users in which order these processes should be performed. These tools increase organizational efficiency and enable users to focus on the tasks and activities rather than complex processes. Workflow models represent real life workflows and consist mainly of a graph-based structure where nodes represent tasks and arrows represent the flows between these tasks. From workflow models, one can use model transformations to generate workflow software. The correctness of the software is dependent on the correctness of the models, hence verification of the models against certain properties like termination, liveness and absence of deadlock are crucial in safety critical domains like healthcare. In previous works we presented a formal diagrammatic framework for workflow modelling and verification which uses principles from model-driven engineering. The framework uses a metamodelling approach for the specification of workflow models, and a transformation module which creates DiVinE code used for verification of model properties. In this paper, in order to improve the scalability and efficiency of the verification, we introduce a new encoding of the workflow models using the Alloy specification language, and we present a bounded verification approach for workflow models based on relational logic. We automatically translate the workflow metamodel into a model transformation specification in Alloy. Properties of the workflow can then be verified against the specification; especially, we can verify properties about loops. We use a running example to explain the metamodelling approach and the encoding to Alloy.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VRTNN6RC\\Wang - 2014 - Model Checking Healthcare Workflows Using Alloy.pdf}
}

@article{warwickIntegratingHeterogeneousModeling2017,
  title = {Integrating Heterogeneous Modeling Frameworks Using the {{DREAMIT}} Workspace},
  author = {Warwick, W. and Walsh, M. and Rodgers, S. and Lebiere, C.},
  year = {2017},
  journal = {Advances in Intelligent Systems and Computing},
  volume = {481},
  pages = {267--278},
  doi = {10.1007/978-3-319-41627-4_24},
  document_type = {Conference Paper},
  source = {Scopus},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FCTA6MHU\\Duffy - 2017 - Advances in Applied Digital Human Modeling and Sim.pdf}
}

@incollection{weidlichICoPFrameworkIdentification2010,
  title = {The {{ICoP Framework}}: {{Identification}} of {{Correspondences}} between {{Process Models}}},
  shorttitle = {The {{ICoP Framework}}},
  booktitle = {Active {{Flow}} and {{Combustion Control}} 2018},
  author = {Weidlich, Matthias and Dijkman, Remco and Mendling, Jan},
  editor = {King, Rudibert},
  year = {2010},
  volume = {141},
  pages = {483--498},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-642-13094-6_37},
  abstract = {Business process models can be compared, for example, to determine their consistency. Any comparison between process models relies on a mapping that identifies which activity in one model corresponds to which activity in another. Tools that generate such mappings are called matchers. This paper presents the ICoP framework, which can be used to develop such matchers. It consists of an architecture and re-usable matcher components. The framework enables the creation of matchers from the re-usable components and, if desired, newly developed components. It focuses on matchers that also detect complex correspondences between groups of activities, where existing matchers focus on 1:1 correspondences. We evaluate the framework by applying it to find matches in process models from practice. We show that the framework can be used to develop matchers in a flexible and adaptable manner and that the resulting matchers can identify a significant number of complex correspondences.},
  isbn = {978-3-319-98176-5 978-3-319-98177-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NEZB8CLB\\Weidlich et al. - 2010 - The ICoP Framework Identification of Corresponden.pdf}
}

@article{weidmannAutomatingModelTransformations2021,
  title = {Automating {{Model Transformations}} for {{Railway Systems Engineering}}.},
  author = {Weidmann, Nils and Salunkhe, Shubhangi and Anjorin, Anthony and Yigitbas, Enes and Engels, Gregor},
  year = {2021},
  journal = {The Journal of Object Technology},
  volume = {20},
  number = {3},
  pages = {10:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.3.a10},
  abstract = {Model-Based Systems Engineering (MBSE) enables system development and analysis on a suitable level of abstraction. In the context of railway systems engineering, system verification is of major importance as software failures can cause serious damage. At DB Netz AG, a railway infrastructure manager that operates large parts of the German railway system, the challenge of enabling both high-level system modelling and formal system verification is addressed by employing SysML, a widespread systems modelling language, and Event-B, a formal systems modelling language particularly suited for automated system verification. In the currently applied completely manual development process, engineers (i) create models using SysML, (ii) translate relevant parts of these models to Event-B for verification, (iii) possibly improve the Event-B models based on verification results, and finally (iv) reflect these improvements in the original SysML models. This process is both tedious and error-prone, clearly indicating a need for an increase in the level of automation.},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HAFFIGA9\\Weidmann et al. - 2021 - Automating Model Transformations for Railway Syste.pdf}
}

@article{weidmannToleranceModelDrivenEngineering2021,
  title = {Tolerance in {{Model-Driven Engineering}}: {{A Systematic Literature Review}} with {{Model-Driven Tool Support}}},
  shorttitle = {Tolerance in {{Model-Driven Engineering}}},
  author = {Weidmann, Nils and Kannan, Suganya and Anjorin, Anthony},
  year = {2021},
  month = jun,
  journal = {arXiv:2106.01063 [cs]},
  eprint = {2106.01063},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {Managing models in a consistent manner is an important task in the field of Model-Driven Engineering (MDE). Although restoring and maintaining consistency is desired in general, recent work has pointed out that always strictly enforcing consistency at any point of time is often not feasible in real-world scenarios, and sometimes even contrary to what a user expects from a trustworthy MDE tool. The challenge of tolerating inconsistencies has been discussed from different viewpoints within and outside the modelling community, but there exists no structured overview of existing and current work in this regard. In this paper, we provide such an overview to help join forces tackling the unresolved problems of tolerating inconsistencies in MDE. We follow the standard process of a Systematic Literature Review (SLR) to point out what tolerance means, how it relates to uncertainty, which examples for tolerant software systems have already been discussed, and which benefits and drawbacks tolerating inconsistencies entails. Furthermore, we propose a tool-chain that helps conducting SLRs in computer science and also eases the reproduction of results. Relevant meta-data of the collected sources is uniformly described in a textual modelling language and exported to the graph database Neo4j to query aggregated information.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3K8NKV4R\\Weidmann et al. - 2021 - Tolerance in Model-Driven Engineering A Systemati.pdf}
}

@misc{weskeModelCollectionBusiness2020,
  title = {Model Collection of the Business Process Management Academic Initiative},
  author = {Weske, Mathias and Decker, Gero and Dumas, Marlon and La Rosa, Marcello and Mendling, Jan and Reijers, Hajo A.},
  year = {2020},
  month = apr,
  publisher = {{Zenodo}},
  doi = {10.5281/zenodo.3758705}
}

@article{westfechtelCasebasedExplorationBidirectional2018,
  title = {Case-Based Exploration of Bidirectional Transformations in {{QVT Relations}}},
  author = {Westfechtel, Bernhard},
  year = {2018},
  month = jul,
  journal = {Software \& Systems Modeling},
  volume = {17},
  number = {3},
  pages = {989--1029},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-016-0527-z},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\D7YAM3UD\\Westfechtel - 2018 - Case-based exploration of bidirectional transforma.pdf}
}

@article{whitesidesWhitesidesGroupWriting2004,
  title = {Whitesides' {{Group}}: {{Writing}} a {{Paper}}},
  shorttitle = {Whitesides' {{Group}}},
  author = {Whitesides, G. M.},
  year = {2004},
  month = aug,
  journal = {Advanced Materials},
  volume = {16},
  number = {15},
  pages = {1375--1377},
  issn = {0935-9648, 1521-4095},
  doi = {10.1002/adma.200400767},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IT35X4CU\\Whitesides - 2004 - Whitesides' Group Writing a Paper.pdf}
}

@incollection{whittleMATAUnifiedApproach2009,
  title = {{{MATA}}: {{A Unified Approach}} for {{Composing UML Aspect Models Based}} on {{Graph Transformation}}},
  shorttitle = {{{MATA}}},
  booktitle = {Transactions on {{Aspect-Oriented Software Development VI}}},
  author = {Whittle, Jon and Jayaraman, Praveen and Elkhodary, Ahmed and Moreira, Ana and Ara{\'u}jo, Jo{\~a}o},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Katz, Shmuel and Ossher, Harold and France, Robert and J{\'e}z{\'e}quel, Jean-Marc},
  year = {2009},
  volume = {5560},
  pages = {191--237},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-03764-1_6},
  abstract = {This paper describes MATA (Modeling Aspects Using a Transformation Approach), a UML aspect-oriented modeling (AOM) technique that uses graph transformations to specify and compose aspects. Graph transformations provide a unified approach for aspect modeling in that the methods presented here can be applied to any modeling language with a well-defined metamodel. This paper, however, focuses on UML class diagrams, sequence diagrams and state diagrams. MATA takes a different approach to AOM since there are no explicit joinpoints. Rather, any model element can be a joinpoint, and composition is a special case of model transformation. The graph transformation execution engine, AGG, is used in MATA to execute model compositions, and critical pair analysis is used to automatically detect structural interactions between different aspect models. MATA has been applied to a number of realistic case studies and is supported by a tool built on top of IBM Rational Software Modeler.},
  isbn = {978-3-642-03763-4 978-3-642-03764-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\78I772XU\\Whittle et al. - 2009 - MATA A Unified Approach for Composing UML Aspect .pdf}
}

@article{whittleStatePracticeModelDriven2014,
  title = {The {{State}} of {{Practice}} in {{Model-Driven Engineering}}},
  author = {Whittle, Jon and Hutchinson, John and Rouncefield, Mark},
  year = {2014},
  month = may,
  journal = {IEEE Software},
  volume = {31},
  number = {3},
  pages = {79--85},
  issn = {0740-7459, 1937-4194},
  doi = {10.1109/MS.2013.65},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WXSTHUZN\\Whittle et al. - 2014 - The State of Practice in Model-Driven Engineering.pdf}
}

@book{wieringaDesignScienceMethodology2014,
  title = {Design {{Science Methodology}} for {{Information Systems}} and {{Software Engineering}}},
  author = {Wieringa, Roel J.},
  year = {2014},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-43839-8},
  isbn = {978-3-662-43838-1 978-3-662-43839-8},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4A4DAT5A\\Wieringa - 2014 - Design Science Methodology for Information Systems.pdf}
}

@incollection{winskelCategoryTheoryModels1986,
  title = {Category Theory and Models for Parallel Computation},
  booktitle = {Category {{Theory}} and {{Computer Programming}}},
  author = {Winskel, Glynn},
  editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegm{\"u}ller, G. and Stoer, J. and Wirth, N. and Pitt, David and Abramsky, Samson and Poign{\'e}, Axel and Rydeheard, David},
  year = {1986},
  volume = {240},
  pages = {266--281},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-17162-2_128},
  isbn = {978-3-540-17162-1 978-3-540-47213-1},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BFPLARDH\\Winskel - 1986 - Category theory and models for parallel computatio.pdf}
}

@incollection{winskelEventStructures1987,
  title = {Event Structures},
  booktitle = {Petri {{Nets}}: {{Applications}} and {{Relationships}} to {{Other Models}} of {{Concurrency}}},
  author = {Winskel, Glynn},
  editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegm{\"u}ller, G. and Stoer, J. and Wirth, N. and Brauer, W. and Reisig, W. and Rozenberg, G.},
  year = {1987},
  volume = {255},
  pages = {325--392},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-17906-2_31},
  isbn = {978-3-540-17906-1 978-3-540-47926-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CKK88UJA\\Winskel - 1987 - Event structures.pdf}
}

@article{winskelModelsConcurrency1993,
  title = {Models for {{Concurrency}}},
  author = {Winskel, Glynn and Nielsen, Mogens},
  year = {1993},
  month = nov,
  journal = {DAIMI Report Series},
  volume = {22},
  number = {463},
  issn = {2245-9316, 0105-8517},
  doi = {10.7146/dpb.v22i463.6936},
  abstract = {{$<$}p{$>$}Revised version of DAIMI PB-429{$<$}/p{$><$}p{$>~<$}/p{$><$}p{$>$}This is, we believe, the final version of a chapter for the Handbook of Logic and the Foundations of Computer Science, vol. IV, Oxford University Press.{$<$}/p{$><$}p{$>$}It surveys a range of models for parallel computation to include interleaving models like transition systems, synchronisation trees and languages (often called Hoare traces in this context), and models like Petri nets, asynchronous transition systems, event structures, pomsets and Mazurkiewicz traces where concurrency is represented more explicitly by a form of causal independence.{$<$}/p{$><$}p{$>$}The presentation is unified by casting the models in a category-theoretic framework. One aim is to use category theory to provide abstract characterisations of constructions like parallel composition valid throughout a range of different models and to provide formal means for translating between different models. A knowledge of basic category theory is assumed, up to an acquaintance with the notion of adjunction.{$<$}/p{$>$}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\R29DYZIR\\winskel-nielsen-models-for-concurrency.pdf}
}

@book{wohlinExperimentationSoftwareEngineering2012,
  title = {Experimentation in {{Software Engineering}}},
  author = {Wohlin, Claes and Runeson, Per and H{\"o}st, Martin and Ohlsson, Magnus C. and Regnell, Bj{\"o}rn and Wessl{\'e}n, Anders},
  year = {2012},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-29044-2},
  isbn = {978-3-642-29043-5 978-3-642-29044-2},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8W7V2ICR\\Wohlin et al. - 2012 - Experimentation in Software Engineering.pdf}
}

@article{wolterStrukturUndVerhalten,
  title = {{Struktur und Verhalten \textendash{} Duale System-Aspekte}},
  author = {Wolter, Uwe},
  pages = {33},
  langid = {german},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\T2P7QAS8\\Wolter - Struktur und Verhalten – Duale System-Aspekte.pdf}
}

@book{wongProcessAlgebraicApproachWorkflow2007,
  title = {A {{Process-Algebraic Approach}} to {{Workflow Specification}} and {{Refinement}}},
  author = {Wong, Peter and Gibbons, Jeremy},
  year = {2007},
  month = mar,
  volume = {4829},
  pages = {65},
  doi = {10.1007/978-3-540-77351-1_5},
  abstract = {This paper describes a process-algebraic approach to specification and refinement of workflow processes. In particular, we model both specification and implementation of workflows as CSP processes. CSP's behavioural models and their respective refinement relations not only enable us to prove correctness properties of an individual workflow process against its behavioural specification but also allows us to design and develop workflow processes compositionally. Moreover, coupled with CSP is an industrial strength automated model checker FDR, which allows behavioural properties of workflow models to be proved automatically. This paper details some CSP models of van der Aalst et al.'s control flow workflow patterns, and illustrates behavioural specification and refinement of workflow systems with a business process scenario.},
  isbn = {978-3-540-77350-4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ALQ6A3XX\\Wong und Gibbons - 2007 - A Process-Algebraic Approach to Workflow Specifica.pdf}
}

@incollection{wongProcessSemanticsBPMN2008,
  title = {A {{Process Semantics}} for {{BPMN}}},
  booktitle = {Formal {{Methods}} and {{Software Engineering}}},
  author = {Wong, Peter Y. H. and Gibbons, Jeremy},
  editor = {Liu, Shaoying and Maibaum, Tom and Araki, Keijiro},
  year = {2008},
  volume = {5256},
  pages = {355--374},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-88194-0_22},
  abstract = {Business Process Modelling Notation (BPMN), developed by the Business Process Management Initiative (BPMI), intends to bridge the gap between business process design and implementation. However, the specification of the notation does not include a formal semantics. This paper shows how a subset of the BPMN can be given a process semantics in Communicating Sequential Processes. Such a semantics allows developers to formally analyse and compare BPMN diagrams. Two simple examples of business processes are included.},
  isbn = {978-3-540-88193-3 978-3-540-88194-0},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DQGKXDEV\\Wong og Gibbons - 2008 - A Process Semantics for BPMN.pdf}
}

@inproceedings{xiaoshanliFormalSemanticsUML2004,
  title = {A Formal Semantics of {{UML}} Sequence Diagram},
  booktitle = {2004 {{Australian Software Engineering Conference}}. {{Proceedings}}.},
  author = {{Xiaoshan Li} and {Zhiming Liu} and Jifeng, H.},
  year = {2004},
  pages = {168--177},
  publisher = {{IEEE}},
  address = {{Melbourne, Vic., Australia}},
  doi = {10.1109/ASWEC.2004.1290469},
  abstract = {This paper presents a formal semantics of UML sequence diagram. In abstract syntax form, a well-formed sequence diagram corresponds to an ordered hierarchical structure tree. The static semantics of a sequence diagram is to check whether it is consistent with the class diagram declaration as well as with its well-formed tree structure. Meanwhile, the dynamic semantics is defined in terms of the state transitions that are carried out by the method invocations in the diagram. When a message is executed, it must be consistent with system state, i.e., object diagram and the state diagrams of its related objects. The semantics clearly captures the consistency between sequence diagram with class diagram and state diagram. Therefore, it is useful to develop the model consistent checking functions in UML CASE tools. And it also can be used to reason about the correctness of a design model with respect to a requirement model.},
  isbn = {978-0-7695-2089-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EH96F2ZE\\Xiaoshan Li et al. - 2004 - A formal semantics of UML sequence diagram.pdf}
}

@inproceedings{yaoConsistencyCheckingUML2006,
  title = {Consistency {{Checking}} of {{UML Dynamic Models Based}} on {{Petri Net Techniques}}},
  booktitle = {2006 15th {{International Conference}} on {{Computing}}},
  author = {Yao, Shuzhen and Shatz, Sol},
  year = {2006},
  month = nov,
  pages = {289--297},
  publisher = {{IEEE}},
  address = {{Mexico city, Mexico}},
  doi = {10.1109/CIC.2006.32},
  abstract = {To aid the development of high quality software applications, we present an approach for consistency checking of UML dynamic models based on Petri Net techniques. ECPN, an Extended Colored Petri Net, is used to formally describe state transitions of individual objects and interactions among objects, and is therefore capable of verifying the consistency of the models based on Petri Net theory. In this work, we consider UML sequence diagrams and statecharts. The approach begins with a flattening strategy for UML dynamic models and then discusses translation of statecharts with composite states to an ECPN notation. The coverability graph is used to drive the consistency checking process. The paper discusses all phases of the approach and illustrates the concept by an example.},
  isbn = {978-0-7695-2708-6},
  langid = {english},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\N7FJ7X3W\\Yao og Shatz - 2006 - Consistency Checking of UML Dynamic Models Based o.pdf}
}

@article{zhouModelingMethodsDynamic2014,
  title = {Modeling Methods for Dynamic Behaviors of Cyber-Physical System},
  author = {Zhou, X.-S. and Yang, Y.-L. and Yang, G.},
  year = {2014},
  journal = {Jisuanji Xuebao/Chinese Journal of Computers},
  volume = {37},
  number = {6},
  pages = {1411--1423},
  doi = {10.3724/SP.J.1016.2014.01411},
  document_type = {Article},
  source = {Scopus}
}

@inproceedings{zschalerAddingHenshinEngineGEMOC2018,
  title = {Adding a {{HenshinEngine}} to {{GEMOC}} Studio: {{An}} Experience Report},
  booktitle = {{{MODELS}} Workshops},
  author = {Zschaler, S.},
  year = {2018},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XQ9QKCCW\\Zschaler - Adding a HenshinEngine to GEMOC Studio.pdf}
}


